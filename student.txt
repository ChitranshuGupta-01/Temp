cors config
package com.scb.creditcardorigination.document.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000")
                .allowedMethods("*")
                .allowedHeaders("*");
    }
}
webconfig:
package com.scb.creditcardorigination.document.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/uploads/**")
                .addResourceLocations("file:uploads/");
    }
}

DocumentController:
package com.scb.creditcardorigination.document.controller;

import com.scb.creditcardorigination.document.model.Document;
import com.scb.creditcardorigination.document.service.DocumentService;
import com.scb.creditcardorigination.document.service.FileStorageService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
@CrossOrigin(origins = "https://localhost:3000")
@RestController
@RequestMapping("/documents")
public class DocumentController {

    @Autowired
    private DocumentService documentService;

    @Autowired
    private FileStorageService fileStorageService;

    @GetMapping
    public List<Document> getAllDocuments() {
        return documentService.getAllDocuments();
    }

    @GetMapping("/{id}")
    public Document getDocumentById(@PathVariable Integer id) {
        return documentService.getDocumentById(id);
    }

    @PostMapping

    public Document createDocument(@RequestParam String applicationId,
                                   @RequestParam String documentName,
                                   @RequestParam String documentType,
                                   @RequestPart("file") MultipartFile file) {
        Document doc = new Document();
        doc.setApplicationId(applicationId);
        doc.setDocumentName(documentName);
        doc.setDocumentType(documentType);
        String filePath = fileStorageService.storeFile(file);
        doc.setFileUrl(filePath);
        return documentService.createDocument(doc);
    }

    @PutMapping("/{id}")
    public Document updateDocument(@PathVariable Integer id,
                                   @RequestBody Document doc) {
        return documentService.updateDocument(id, doc);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteDocument(@PathVariable Integer id) {
        documentService.deleteDocument(id);
        return ResponseEntity.ok().build();
    }
}



Model:
package com.scb.creditcardorigination.document.model;

import jakarta.persistence.*;

@Entity
@Table(name = "documents")
public class Document {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "application_id")
    private String applicationId;

    @Column(name = "document_name")
    private String documentName;

    @Column(name = "document_type")
    private String documentType;

    @Column(name = "file_url")
    private String fileUrl;

    // Constructors (optional)
    public Document() {}

    public Document(String applicationId, String documentName, String documentType, String fileUrl) {
        this.applicationId = applicationId;
        this.documentName = documentName;
        this.documentType = documentType;
        this.fileUrl = fileUrl;
    }

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getApplicationId() {
        return applicationId;
    }

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    public String getDocumentName() {
        return documentName;
    }

    public void setDocumentName(String documentName) {
        this.documentName = documentName;
    }

    public String getDocumentType() {
        return documentType;
    }

    public void setDocumentType(String documentType) {
        this.documentType = documentType;
    }

    public String getFileUrl() {
        return fileUrl;
    }

    public void setFileUrl(String fileUrl) {
        this.fileUrl = fileUrl;
    }


}

repository:
package com.scb.creditcardorigination.document.repository;

import com.scb.creditcardorigination.document.model.Document;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DocumentRepository extends JpaRepository<Document, Integer> {}

DocumentService:
package com.scb.creditcardorigination.document.service;

import com.scb.creditcardorigination.document.model.Document;
import com.scb.creditcardorigination.document.repository.DocumentRepository;
import com.scb.creditcardorigination.document.exceptionHandling.DocumentNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DocumentService {
    @Autowired
    private DocumentRepository repository;

    public List<Document> getAllDocuments() {
        return repository.findAll();
    }

    public Document getDocumentById(Integer id) {
        return repository.findById(id).orElseThrow(() -> new DocumentNotFoundException("Document not found"));
    }

    public Document createDocument(Document doc) {
        return repository.save(doc);
    }

    public Document updateDocument(Integer id, Document doc) {
        Document existing = repository.findById(id).orElseThrow(() -> new DocumentNotFoundException("Document not found"));
        existing.setApplicationId(doc.getApplicationId());
        existing.setDocumentName(doc.getDocumentName());
        existing.setDocumentType(doc.getDocumentType());
        existing.setFileUrl(doc.getFileUrl());
        return repository.save(existing);
    }

    public void deleteDocument(Integer id) {
        repository.deleteById(id);
    }
}

FileStorageService:

package com.scb.creditcardorigination.document.service;

import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;

@Service
public class FileStorageService {

    private final Path uploadDir = Paths.get("uploads");

    public FileStorageService() {
        try {
            if (!Files.exists(uploadDir)) {
                Files.createDirectories(uploadDir);
            }
        } catch (IOException e) {
            throw new RuntimeException("Could not create upload folder!", e);
        }
    }

    public String storeFile(MultipartFile file) {
        String filename = StringUtils.cleanPath(file.getOriginalFilename());
        Path targetLocation = uploadDir.resolve(filename);

        try {
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);
            // Return URL relative to your server base URL
            return "/uploads/" + filename;
        } catch (IOException e) {
            throw new RuntimeException("Failed to store file " + filename, e);
        }
    }
}


FrontEnd:
import React, { useState, useEffect } from "react";
import documentService from "./serviceDocuments"; // new service for documents
import "./DocumentManager.css";

function DocumentManager() {
  const [documents, setDocuments] = useState([]);

  const [editingIdx, setEditingIdx] = useState(-1);
  const [editData, setEditData] = useState({});
  const [creating, setCreating] = useState(false);
  const [createData, setCreateData] = useState({
    applicationId: "",
    documentName: "",
    documentType: "",
    file: null, // store file instead of path
  });

  useEffect(() => {
    fetchDocuments();
  }, []);

  const fetchDocuments = () => {
    documentService
      .getAllDocuments()
      .then((res) => setDocuments(res.data))
      .catch((err) => console.error("Error fetching documents", err));
  };

  const handleEdit = (idx) => {
    setEditingIdx(idx);
    setEditData({ ...documents[idx] });
  };

  const handleEditChange = (e) => {
    const { name, value } = e.target;
    setEditData((prev) => ({ ...prev, [name]: value }));
  };

  const handleEditSave = (idx) => {
    const doc = documents[idx];
    documentService
      .updateDocument(doc.id, editData)
      .then((res) => {
        const updatedDocs = [...documents];
        updatedDocs[idx] = res.data;
        setDocuments(updatedDocs);
        setEditingIdx(-1);
      })
      .catch((err) => console.error("Error updating document:", err));
  };

  const handleDelete = (idx) => {
    const doc = documents[idx];
    documentService
      .deleteDocument(doc.id)
      .then(() => {
        const updatedDocs = [...documents];
        updatedDocs.splice(idx, 1);
        setDocuments(updatedDocs);
      })
      .catch((err) => console.error("Error deleting document:", err));
  };

  const handleCreateOpen = () => {
    setCreating(true);
    setCreateData({
      applicationId: "",
      documentName: "",
      documentType: "",
      file: null,
    });
  };

  const handleCreateChange = (e) => {
    const { name, value } = e.target;
    setCreateData((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    setCreateData((prev) => ({ ...prev, file: e.target.files[0] }));
  };

  const handleCreateSave = () => {
    const formData = new FormData();
    formData.append("applicationId", parseInt(createData.applicationId,10));
    formData.append("documentName", createData.documentName);
    formData.append("documentType", createData.documentType);
    formData.append("file", createData.file);

    documentService
      .createDocument(formData)
      .then((res) => {
        setDocuments([res.data, ...documents]);
        setCreating(false);
      })
      .catch((err) => console.error("Error creating document:", err));
  };

  return (
    <div className="document-manager-container">
      <h2>Document Manager</h2>

      <button className="btn btn-create" onClick={handleCreateOpen}>
        + Add Document
      </button>

      <table className="document-table">
        <thead>
          <tr>
            <th>Application ID</th>
            <th>Document Name</th>
            <th>Document Type</th>
            <th>File</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {documents.map((doc, idx) => (
            <tr key={doc.id}>
              {editingIdx === idx ? (
                <>
                  <td>
                    <input
                      name="applicationId"
                      value={editData.applicationId}
                      onChange={handleEditChange}
                    />
                  </td>
                  <td>
                    <input
                      name="documentName"
                      value={editData.documentName}
                      onChange={handleEditChange}
                    />
                  </td>
                  <td>
                    <input
                      name="documentType"
                      value={editData.documentType}
                      onChange={handleEditChange}
                    />
                  </td>
                  <td>
                    <input
                      name="fileUrl"
                      value={editData.fileUrl}
                      onChange={handleEditChange}
                    />
                  </td>
                  <td>
                    <button onClick={() => handleEditSave(idx)}>✔ Save</button>
                    <button onClick={() => setEditingIdx(-1)}>✖ Cancel</button>
                  </td>
                </>
              ) : (
                <>
                  <td>{doc.applicationId}</td>
                  <td>{doc.documentName}</td>
                  <td>{doc.documentType}</td>
                  <td>
                    <a
                      href={`http://localhost:8080${doc.fileUrl}`}
                      target="_blank"
                      rel="noreferrer"
                    >
                      View
                    </a>
                  </td>
                  <td>
                    <button onClick={() => handleEdit(idx)}>Edit</button>
                    <button onClick={() => handleDelete(idx)}>Delete</button>
                  </td>
                </>
              )}
            </tr>
          ))}
        </tbody>
      </table>

      {creating && (
        <div className="modal-backdrop">
          <div className="modal-box">
            <h3>Add Document</h3>
            <form onSubmit={(e) => e.preventDefault()}>
              <label>
                Application ID:
                <input
                  name="applicationId"
                  value={createData.applicationId}
                  onChange={handleCreateChange}
                />
              </label>
              <label>
                Document Name:
                <input
                  name="documentName"
                  value={createData.documentName}
                  onChange={handleCreateChange}
                />
              </label>
              <label>
                Document Type:
                <input
                  name="documentType"
                  value={createData.documentType}
                  onChange={handleCreateChange}
                />
              </label>
              <label>
                Upload File:
                <input type="file" onChange={handleFileChange} />
              </label>
              <div>
                <button onClick={handleCreateSave}>Create</button>
                <button onClick={() => setCreating(false)}>Cancel</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default DocumentManager;

// import axios from "axios";

// const BASE_URL = "http://localhost:8080/documents";

// const documentService = {
//   getAllDocuments: () => axios.get(BASE_URL),

//   getDocumentById: (id) => axios.get(`${BASE_URL}/${id}`),

//   createDocument: (docData) => axios.post(BASE_URL, docData),

//   updateDocument: (id, docData) => axios.put(`${BASE_URL}/${id}`, docData),

//   deleteDocument: (id) => axios.delete(`${BASE_URL}/${id}`),
// };

// export default documentService;

import axios from "axios";

const API_URL = "http://localhost:8080/documents";

const documentService = {
  getAllDocuments: () => axios.get(API_URL),
  createDocument: (formData) =>
    axios.post(API_URL, formData, {
      headers: { "Content-Type": "multipart/form-data" },
    }),
  updateDocument: (id, data) => axios.put(`${API_URL}/${id}`, data),
  deleteDocument: (id) => axios.delete(`${API_URL}/${id}`),
};

export default documentService;
