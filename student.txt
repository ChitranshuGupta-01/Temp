I have 2 pacakges, the issue i am getting that i am unable to view image when i am clicking view(image attached):
The codes are attached below

Application Form Feature:

package com.scb.creditcardorigination.applicationFormFeature.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.scb.creditcardorigination.applicationFormFeature.model.Application;
import com.scb.creditcardorigination.applicationFormFeature.service.ApplicationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/api/applications")
@CrossOrigin(origins = "http://localhost:3000")
public class ApplicationController {

    private final ApplicationService applicationService;
    private final ObjectMapper objectMapper;

    public ApplicationController(ApplicationService applicationService, ObjectMapper objectMapper) {
        this.applicationService = applicationService;
        this.objectMapper = objectMapper;
    }

    // POST mapping for creating new application
    @PostMapping(consumes = {"multipart/form-data"})
    public ResponseEntity<Application> createApplication(
            @RequestPart("application") String applicationJson,
            @RequestPart("idProof") MultipartFile idProof,
            @RequestPart("addressProof") MultipartFile addressProof,
            @RequestPart("incomeProof") MultipartFile incomeProof
    ) throws IOException {
        // Convert JSON string into Application object
        Application app = objectMapper.readValue(applicationJson, Application.class);

        Application saved = applicationService.saveApplication(app, idProof, addressProof, incomeProof);
        return ResponseEntity.ok(saved);
    }

    // GET mapping for finding all applications
    @GetMapping
    public List<Application> getAll() {
        return applicationService.getAll();
    }

    // GET mapping for finding application by ID
    @GetMapping("/{id}")
    public ResponseEntity<Application> getById(@PathVariable Long id) {
        Application app = applicationService.getById(id);
        return app != null ? ResponseEntity.ok(app) : ResponseEntity.notFound().build();
    }
}


package com.scb.creditcardorigination.applicationFormFeature.model;

import jakarta.persistence.*;

@Entity
@Table(name = "applications")
public class Application {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String fullName;
    private String phoneNumber;
    private String email;
    private String creditCardType; // Gold, Silver, Platinum
    private String profileType;    // New, Existing

    @OneToOne(mappedBy = "application", cascade = CascadeType.ALL)
    private Document2 documents;

    // Default constructor
    public Application() {}

    // Constructor
    public Application(String fullName, String phoneNumber, String email, String creditCardType, String profileType) {
        this.fullName = fullName;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.creditCardType = creditCardType;
        this.profileType = profileType;
    }

    // getters & setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getFullName() { return fullName; }
    public void setFullName(String fullName) { this.fullName = fullName; }

    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getCreditCardType() { return creditCardType; }
    public void setCreditCardType(String creditCardType) { this.creditCardType = creditCardType; }

    public String getProfileType() { return profileType; }
    public void setProfileType(String profileType) { this.profileType = profileType; }

    public Document2 getDocuments() { return documents; }
    public void setDocuments(Document2 documents) {
        this.documents = documents;
        if (documents != null) documents.setApplication(this);
    }

    @Override
    public String toString() {
        return "Application{" +
                "id=" + id +
                ", fullName='" + fullName + '\'' +
                ", phoneNumber='" + phoneNumber + '\'' +
                ", email='" + email + '\'' +
                ", creditCardType='" + creditCardType + '\'' +
                ", profileType='" + profileType + '\'' +
                '}';
    }
}

package com.scb.creditcardorigination.applicationFormFeature.model;

import jakarta.persistence.*;

@Entity
@Table(name = "documents")
public class Document2 {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String idProofPath;
    private String addressProofPath;
    private String incomeProofPath;

    @OneToOne
    @JoinColumn(name = "application_id")
    private Application application;

    // Default constructor
    public Document2() {}

    // Constructor
    public Document2(String idProofPath, String addressProofPath, String incomeProofPath) {
        this.idProofPath = idProofPath;
        this.addressProofPath = addressProofPath;
        this.incomeProofPath = incomeProofPath;
    }

    // Getters and setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getIdProofPath() { return idProofPath; }
    public void setIdProofPath(String idProofPath) { this.idProofPath = idProofPath; }

    public String getAddressProofPath() { return addressProofPath; }
    public void setAddressProofPath(String addressProofPath) { this.addressProofPath = addressProofPath; }

    public String getIncomeProofPath() { return incomeProofPath; }
    public void setIncomeProofPath(String incomeProofPath) { this.incomeProofPath = incomeProofPath; }

    public Application getApplication() { return application; }
    public void setApplication(Application application) { this.application = application; }

    @Override
    public String toString() {
        return "Document{" +
                "id=" + id +
                ", idProofPath='" + idProofPath + '\'' +
                ", addressProofPath='" + addressProofPath + '\'' +
                ", incomeProofPath='" + incomeProofPath + '\'' +
                '}';
    }
}


package com.scb.creditcardorigination.applicationFormFeature.repository;

import com.scb.creditcardorigination.applicationFormFeature.model.Application;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
@Primary
public interface ApplicationFormRepository extends JpaRepository<Application, Long> {
    // Custom query methods can be added here if needed
    List<Application> findByEmail(String email);
    List<Application> findByCreditCardType(String creditCardType);
    List<Application> findByProfileType(String profileType);
}

package com.scb.creditcardorigination.applicationFormFeature.repository;

import com.scb.creditcardorigination.applicationFormFeature.model.Document2;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface Docrepo extends JpaRepository<Document2, Long> {
    // Custom query methods can be added here if needed
}

package com.scb.creditcardorigination.applicationFormFeature.service;

import com.scb.creditcardorigination.applicationFormFeature.model.Application;
import com.scb.creditcardorigination.applicationFormFeature.model.Document2;
import com.scb.creditcardorigination.applicationFormFeature.repository.ApplicationFormRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;
import java.util.List;

@Service
public class ApplicationService {

    private final ApplicationFormRepository applicationRepository;

    @Value("${app.upload.dir}")
    private String uploadDir;

    public ApplicationService(ApplicationFormRepository applicationRepository) {
        this.applicationRepository = applicationRepository;
    }

    public Application saveApplication(Application application,
                                       MultipartFile idProof,
                                       MultipartFile addressProof,
                                       MultipartFile incomeProof) throws IOException {

        // Create upload directory if it doesn't exist
        Path uploadPath = Paths.get(uploadDir).toAbsolutePath().normalize();
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        // Create document entity and store file paths
        Document2 doc = new Document2();
        doc.setIdProofPath(storeFile(uploadPath, idProof));
        doc.setAddressProofPath(storeFile(uploadPath, addressProof));
        doc.setIncomeProofPath(storeFile(uploadPath, incomeProof));

        // Associate document with application
        application.setDocuments(doc);

        // Save and return the application
        return applicationRepository.save(application);
    }

    private String storeFile(Path uploadPath, MultipartFile file) throws IOException {
        // Generate unique filename
        String filename = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path target = uploadPath.resolve(filename);

        // Copy file to target location
        Files.copy(file.getInputStream(), target, StandardCopyOption.REPLACE_EXISTING);

        return filename; // Return relative filename for database storage
    }

    public List<Application> getAll() {
        return applicationRepository.findAll();
    }

    public Application getById(Long id) {
        return applicationRepository.findById(id).orElse(null);
    }

    public List<Application> getByEmail(String email) {
        return applicationRepository.findByEmail(email);
    }

    public List<Application> getByCreditCardType(String creditCardType) {
        return applicationRepository.findByCreditCardType(creditCardType);
    }

    public List<Application> getByProfileType(String profileType) {
        return applicationRepository.findByProfileType(profileType);
    }

    public void deleteApplication(Long id) {
        applicationRepository.deleteById(id);
    }

    public Application updateApplication(Long id, Application updatedApplication) {
        return applicationRepository.findById(id)
                .map(application -> {
                    application.setFullName(updatedApplication.getFullName());
                    application.setPhoneNumber(updatedApplication.getPhoneNumber());
                    application.setEmail(updatedApplication.getEmail());
                    application.setCreditCardType(updatedApplication.getCreditCardType());
                    application.setProfileType(updatedApplication.getProfileType());
                    return applicationRepository.save(application);
                }).orElse(null);
    }
}



document controller:
package com.scb.creditcardorigination.document.controller;

import com.scb.creditcardorigination.document.model.Document;
import com.scb.creditcardorigination.document.service.DocumentService;
import com.scb.creditcardorigination.document.service.FileStorageService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RestController
@RequestMapping("/documents")
public class DocumentController {

    @Autowired
    private DocumentService documentService;

    @Autowired
    private FileStorageService fileStorageService;

    @GetMapping
    public List<Document> getAllDocuments() {
        return documentService.getAllDocuments();
    }

    @GetMapping("/{id}")
    public Document getDocumentById(@PathVariable Integer id) {
        return documentService.getDocumentById(id);
    }

    @PostMapping

    public Document createDocument(@RequestParam String applicationId,
                                   @RequestParam String documentName,
                                   @RequestParam String documentType,
                                   @RequestPart("file") MultipartFile file) {
        Document doc = new Document();
        doc.setApplicationId(applicationId);
        doc.setDocumentName(documentName);
        doc.setDocumentType(documentType);
        String filePath = fileStorageService.storeFile(file);
        doc.setFileUrl(filePath);
        return documentService.createDocument(doc);
    }

    @PutMapping("/{id}")
    public Document updateDocument(@PathVariable Integer id,
                                   @RequestBody Document doc) {
        return documentService.updateDocument(id, doc);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteDocument(@PathVariable Integer id) {
        documentService.deleteDocument(id);
        return ResponseEntity.ok().build();
    }
}




package com.scb.creditcardorigination.document.exceptionHandling;

public class DocumentNotFoundException extends RuntimeException {
    public DocumentNotFoundException(String message) {
        super(message);
    }
}


package com.scb.creditcardorigination.document.model;

import jakarta.persistence.*;

@Entity
@Table(name = "dmtable")
public class Document {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "application_id")
    private String applicationId;

    @Column(name = "document_name")
    private String documentName;

    @Column(name = "document_type")
    private String documentType;

    @Column(name = "file_url")
    private String fileUrl;

    // Constructors (optional)
    public Document() {}

    public Document(String applicationId, String documentName, String documentType, String fileUrl) {
        this.applicationId = applicationId;
        this.documentName = documentName;
        this.documentType = documentType;
        this.fileUrl = fileUrl;
    }

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getApplicationId() {
        return applicationId;
    }

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    public String getDocumentName() {
        return documentName;
    }

    public void setDocumentName(String documentName) {
        this.documentName = documentName;
    }

    public String getDocumentType() {
        return documentType;
    }

    public void setDocumentType(String documentType) {
        this.documentType = documentType;
    }

    public String getFileUrl() {
        return fileUrl;
    }

    public void setFileUrl(String fileUrl) {
        this.fileUrl = fileUrl;
    }


}

package com.scb.creditcardorigination.document.repository;

import com.scb.creditcardorigination.document.model.Document;
import org.springframework.data.jpa.repository.JpaRepository;

public interface repodocument extends JpaRepository<Document, Integer> {}

package com.scb.creditcardorigination.document.service;

import com.scb.creditcardorigination.document.model.Document;
import com.scb.creditcardorigination.document.repository.repodocument;
import com.scb.creditcardorigination.document.exceptionHandling.DocumentNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DocumentService {
    @Autowired
    private repodocument repository;

    public List<Document> getAllDocuments() {
        return repository.findAll();
    }

    public Document getDocumentById(Integer id) {
        return repository.findById(id).orElseThrow(() -> new DocumentNotFoundException("Document not found"));
    }

    public Document createDocument(Document doc) {
        return repository.save(doc);
    }

    public Document updateDocument(Integer id, Document doc) {
        Document existing = repository.findById(id).orElseThrow(() -> new DocumentNotFoundException("Document not found"));
        existing.setApplicationId(doc.getApplicationId());
        existing.setDocumentName(doc.getDocumentName());
        existing.setDocumentType(doc.getDocumentType());
        existing.setFileUrl(doc.getFileUrl());
        return repository.save(existing);
    }

    public void deleteDocument(Integer id) {
        repository.deleteById(id);
    }
}package com.scb.creditcardorigination.document.service;

import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;

@Service
public class FileStorageService {

    private final Path uploadDir = Paths.get("uploads");

    public FileStorageService() {
        try {
            if (!Files.exists(uploadDir)) {
                Files.createDirectories(uploadDir);
            }
        } catch (IOException e) {
            throw new RuntimeException("Could not create upload folder!", e);
        }
    }

    public String storeFile(MultipartFile file) {
        String filename = StringUtils.cleanPath(file.getOriginalFilename());
        Path targetLocation = uploadDir.resolve(filename);

        try {
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);
            // Return URL relative to your server base URL
            return "/uploads/" + filename;
        } catch (IOException e) {
            throw new RuntimeException("Failed to store file " + filename, e);
        }
    }
}


config of this pacakge:
package com.scb.creditcardorigination.document.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000")
                .allowedMethods("*")
                .allowedHeaders("*");
    }
}

webconfig:
package com.scb.creditcardorigination.document.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000")
                .allowedMethods("*")
                .allowedHeaders("*");
    }
}


