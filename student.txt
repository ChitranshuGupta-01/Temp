"use client";
import React, { useMemo, useState } from "react";
import { Search } from "lucide-react";

type Tx = {
  id: string;
  type: string;
  date: string;
  amount: string;
  severity: string;
  beneficiary: string;
  status: string;
  details: string;
};

const severityBadge = (s: string) => {
  if (s.toUpperCase() === "HIGH") return "bg-red-100 text-red-700";
  if (s.toUpperCase() === "MEDIUM") return "bg-yellow-100 text-yellow-700";
  return "bg-green-100 text-green-700";
};

export default function RelatedTransactions({ transactions }: { transactions: Tx[] }) {
  const [query, setQuery] = useState("");
  const [typeFilter, setTypeFilter] = useState("All");
  const [perPage, setPerPage] = useState(5);
  const [page, setPage] = useState(1);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    return transactions.filter((t) => {
      if (typeFilter !== "All" && t.type !== typeFilter) return false;
      if (!q) return true;
      return (
        t.id.toLowerCase().includes(q) ||
        t.beneficiary.toLowerCase().includes(q) ||
        t.details.toLowerCase().includes(q) ||
        t.amount.toLowerCase().includes(q)
      );
    });
  }, [transactions, query, typeFilter]);

  const total = filtered.length;
  const totalPages = Math.max(1, Math.ceil(total / perPage));
  const pageData = filtered.slice((page - 1) * perPage, page * perPage);

  function goto(p: number) {
    setPage(p);
    window.scrollTo({ top: 0, behavior: "smooth" });
  }

  return (
    <div className="bg-white rounded-xl shadow border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-4">
        <div>
          <h4 className="text-lg font-bold">Related Transactions</h4>
          <p className="text-sm text-gray-500">All transactions made to the same account: ****5678</p>
        </div>
        <div className="flex items-center gap-2">
          <button className="px-3 py-2 rounded border bg-white">⚙</button>
          <button className="px-3 py-2 rounded border bg-white">⬇</button>
        </div>
      </div>

      <div className="flex gap-4 items-center mb-4">
        <div className="flex items-center gap-2 w-full">
          <Search className="w-5 h-5 text-gray-400" />
          <input
            value={query}
            onChange={(e) => { setQuery(e.target.value); setPage(1); }}
            placeholder="Search transactions, amounts, beneficiaries, or references..."
            className="w-full border rounded px-3 py-2 text-sm"
          />
        </div>

        <div className="flex items-center gap-2">
          <select
            value={typeFilter}
            onChange={(e) => { setTypeFilter(e.target.value); setPage(1); }}
            className="border rounded px-3 py-2 text-sm"
          >
            <option value="All">All Transaction Types</option>
            <option value="Wire Transfer">Wire Transfer</option>
            <option value="ACH Transfer">ACH Transfer</option>
            <option value="International Wire">International Wire</option>
            <option value="Check Deposit">Check Deposit</option>
          </select>

          <select
            value={perPage}
            onChange={(e) => { setPerPage(Number(e.target.value)); setPage(1); }}
            className="border rounded px-3 py-2 text-sm"
          >
            <option value={5}>5 per page</option>
            <option value={10}>10 per page</option>
            <option value={20}>20 per page</option>
          </select>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full text-sm">
          <thead className="text-left text-gray-600">
            <tr>
              <th className="p-3">TRANSACTION</th>
              <th className="p-3">DATE</th>
              <th className="p-3">AMOUNT</th>
              <th className="p-3">BENEFICIARY</th>
              <th className="p-3">STATUS</th>
              <th className="p-3">DETAILS</th>
            </tr>
          </thead>
          <tbody>
            {pageData.map((t) => (
              <tr key={t.id} className="border-t">
                <td className="p-3">
                  <div className="text-sm font-semibold text-blue-600">{t.type}</div>
                  <div className="text-xs text-blue-500">{t.id}</div>
                </td>
                <td className="p-3 text-gray-600">{t.date}</td>
                <td className="p-3">
                  <div className="font-semibold">{t.amount}</div>
                  <div className={`text-xs mt-1 inline-block px-2 py-1 rounded-full ${severityBadge(t.severity)}`}>{t.severity}</div>
                </td>
                <td className="p-3">
                  <div className="font-medium">{t.beneficiary}</div>
                  <div className="text-xs text-gray-400">****5678 · · · ·</div>
                </td>
                <td className="p-3">
                  <div className={`px-3 py-1 rounded-full text-xs ${t.status === 'Completed' ? 'bg-green-100 text-green-700' : t.status === 'Pending' ? 'bg-yellow-100 text-yellow-700' : 'bg-blue-100 text-blue-700'}`}>
                    {t.status}
                  </div>
                </td>
                <td className="p-3 text-gray-700">{t.details}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* footer / pagination */}
      <div className="mt-4 flex items-center justify-between text-sm text-gray-600">
        <div>
          Showing <span className="font-semibold">{(page - 1) * perPage + 1}</span> to <span className="font-semibold">{Math.min(page * perPage, total)}</span> of <span className="font-semibold">{total}</span> transactions
          <span className="ml-4 inline-flex items-center gap-2"><span className="w-2 h-2 rounded-full bg-green-500"></span> High Value</span>
        </div>

        <div className="flex items-center gap-2">
          <button
            onClick={() => goto(Math.max(1, page - 1))}
            className="px-3 py-1 rounded border bg-white disabled:opacity-50"
            disabled={page === 1}
          >
            ‹
          </button>
          {Array.from({ length: totalPages }).map((_, i) => {
            const p = i + 1;
            return (
              <button
                key={p}
                onClick={() => goto(p)}
                className={`px-3 py-1 rounded ${p === page ? 'bg-green-600 text-white' : 'bg-white border'}`}
              >
                {p}
              </button>
            );
          })}
          <button
            onClick={() => goto(Math.min(totalPages, page + 1))}
            className="px-3 py-1 rounded border bg-white disabled:opacity-50"
            disabled={page === totalPages}
          >
            ›
          </button>
        </div>
      </div>
    </div>
  );

  function goto(p: number) {
    setPage(p);
    const el = document.querySelector(".bg-white.rounded-xl");
    if (el) (el as HTMLElement).scrollIntoView({ behavior: "smooth", block: "start" });
  }
}
