package com.scb.creditcardorigination.xfeature.controller;

import com.scb.creditcardorigination.xfeature.model.Document;
import com.scb.creditcardorigination.xfeature.repository.DocumentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/documents")
public class DocumentController {

    @Autowired
    private DocumentRepository documentRepository;

    // ---------------- GET ALL ----------------
    @GetMapping
    public List<Document> getAllDocuments() {
        return documentRepository.findAll();
    }

    // ---------------- GET BY ID ----------------
    @GetMapping("/{id}")
    public ResponseEntity<Document> getDocumentById(@PathVariable Long id) {
        return documentRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // ---------------- CREATE (UPLOAD FILE) ----------------
    @PostMapping("/upload")
    public ResponseEntity<String> uploadDocument(
            @RequestParam("file") MultipartFile file,
            @RequestParam("applicationId") Long applicationId,
            @RequestParam("documentType") String documentType
    ) throws IOException {

        String uploadDir = "uploads/";

        File directory = new File(uploadDir);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        String filePath = uploadDir + file.getOriginalFilename();
        file.transferTo(new File(filePath));

        Document doc = new Document();
        doc.setApplicationId(applicationId);

        switch (documentType.toLowerCase()) {
            case "id":
                doc.setIdProofPath(filePath);
                break;
            case "address":
                doc.setAddressProofPath(filePath);
                break;
            case "income":
                doc.setIncomeProofPath(filePath);
                break;
            default:
                return ResponseEntity.badRequest().body("Invalid documentType. Use id/address/income");
        }

        documentRepository.save(doc);

        return ResponseEntity.ok("File uploaded successfully: " + filePath);
    }

    // ---------------- UPDATE ----------------
    @PutMapping("/{id}")
    public ResponseEntity<Document> updateDocument(@PathVariable Long id, @RequestBody Document updatedDoc) {
        return documentRepository.findById(id)
                .map(doc -> {
                    doc.setApplicationId(updatedDoc.getApplicationId());
                    doc.setIdProofPath(updatedDoc.getIdProofPath());
                    doc.setAddressProofPath(updatedDoc.getAddressProofPath());
                    doc.setIncomeProofPath(updatedDoc.getIncomeProofPath());
                    return ResponseEntity.ok(documentRepository.save(doc));
                })
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // ---------------- DELETE ----------------
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteDocument(@PathVariable Long id) {
        if (!documentRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        documentRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
