import React, { useState } from 'react';
import { Search, Filter, Download, Calendar, Clock, CreditCard, ArrowUpRight, ArrowDownLeft, ChevronLeft, ChevronRight, Sparkles } from 'lucide-react';
import ChatOverlay from './ChatOverlay';

interface TransactionData {
  id: string;
  transactionId: string;
  type: string;
  date: string;
  time: string;
  amount: number;
  currency: string;
  fromAccount: string;
  toAccount: string;
  beneficiary: string;
  status: string;
  description: string;
  reference: string;
  channel: string;
  priority: 'low' | 'medium' | 'high';
}

const RelatedTransactions: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterBy, setFilterBy] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [isChatOpen, setIsChatOpen] = useState(false);

  const transactionData: TransactionData[] = [
    {
      id: '1',
      transactionId: 'TXN-456123',
      type: 'Wire Transfer',
      date: '2024-01-15',
      time: '14:30:25',
      amount: 15000.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****1234',
      beneficiary: 'ABC Corp',
      status: 'Completed',
      description: 'Business payment for services',
      reference: 'INV-2024-001',
      channel: 'Online Banking',
      priority: 'high'
    },
    {
      id: '2',
      transactionId: 'TXN-456124',
      type: 'ACH Transfer',
      date: '2024-01-14',
      time: '09:15:42',
      amount: 2500.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****9876',
      beneficiary: 'XYZ Services',
      status: 'Pending',
      description: 'Monthly service payment',
      reference: 'AUTO-PAY-001',
      channel: 'Mobile App',
      priority: 'medium'
    },
    {
      id: '3',
      transactionId: 'TXN-456125',
      type: 'International Wire',
      date: '2024-01-13',
      time: '16:45:12',
      amount: 8750.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****4321',
      beneficiary: 'Global Trading Ltd',
      status: 'Completed',
      description: 'International trade payment',
      reference: 'SWIFT-2024-001',
      channel: 'Branch',
      priority: 'high'
    },
    {
      id: '4',
      transactionId: 'TXN-456126',
      type: 'Check Deposit',
      date: '2024-01-12',
      time: '11:20:33',
      amount: 3200.00,
      currency: 'USD',
      fromAccount: '****1111',
      toAccount: '****5678',
      beneficiary: 'John Doe',
      status: 'Cleared',
      description: 'Salary deposit from employer',
      reference: 'CHK-789456',
      channel: 'ATM',
      priority: 'low'
    },
    {
      id: '5',
      transactionId: 'TXN-456127',
      type: 'Wire Transfer',
      date: '2024-01-11',
      time: '13:55:18',
      amount: 12000.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****7890',
      beneficiary: 'Tech Solutions Inc',
      status: 'Completed',
      description: 'Equipment purchase payment',
      reference: 'PO-2024-005',
      channel: 'Online Banking',
      priority: 'high'
    },
    {
      id: '6',
      transactionId: 'TXN-456128',
      type: 'ACH Debit',
      date: '2024-01-10',
      time: '10:30:45',
      amount: 1850.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****2468',
      beneficiary: 'Utility Company',
      status: 'Completed',
      description: 'Monthly utility bill payment',
      reference: 'UTIL-JAN-2024',
      channel: 'Auto-Pay',
      priority: 'low'
    },
    {
      id: '7',
      transactionId: 'TXN-456129',
      type: 'Wire Transfer',
      date: '2024-01-09',
      time: '15:20:11',
      amount: 25000.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****3579',
      beneficiary: 'Investment Partners LLC',
      status: 'Flagged',
      description: 'Large investment transfer - under review',
      reference: 'INV-FUND-001',
      channel: 'Online Banking',
      priority: 'high'
    },
    {
      id: '8',
      transactionId: 'TXN-456130',
      type: 'Direct Deposit',
      date: '2024-01-08',
      time: '08:45:22',
      amount: 4500.00,
      currency: 'USD',
      fromAccount: '****9999',
      toAccount: '****5678',
      beneficiary: 'John Doe',
      status: 'Completed',
      description: 'Freelance project payment',
      reference: 'PROJ-2024-001',
      channel: 'ACH',
      priority: 'medium'
    },
    {
      id: '9',
      transactionId: 'TXN-456131',
      type: 'Wire Transfer',
      date: '2024-01-07',
      time: '12:10:55',
      amount: 6800.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****1357',
      beneficiary: 'Legal Services Corp',
      status: 'Completed',
      description: 'Legal consultation fees',
      reference: 'LEGAL-2024-001',
      channel: 'Branch',
      priority: 'medium'
    },
    {
      id: '10',
      transactionId: 'TXN-456132',
      type: 'ACH Transfer',
      date: '2024-01-06',
      time: '16:22:18',
      amount: 950.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****8642',
      beneficiary: 'Insurance Co',
      status: 'Completed',
      description: 'Monthly insurance premium',
      reference: 'INS-JAN-2024',
      channel: 'Auto-Pay',
      priority: 'low'
    },
    {
      id: '11',
      transactionId: 'TXN-456133',
      type: 'International Wire',
      date: '2024-01-05',
      time: '14:15:30',
      amount: 18500.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****9753',
      beneficiary: 'European Suppliers Ltd',
      status: 'Completed',
      description: 'International supplier payment',
      reference: 'EURO-PAY-001',
      channel: 'Online Banking',
      priority: 'high'
    },
    {
      id: '12',
      transactionId: 'TXN-456134',
      type: 'Wire Transfer',
      date: '2024-01-04',
      time: '11:45:22',
      amount: 7200.00,
      currency: 'USD',
      fromAccount: '****5678',
      toAccount: '****4680',
      beneficiary: 'Marketing Agency',
      status: 'Completed',
      description: 'Marketing campaign payment',
      reference: 'MKT-2024-001',
      channel: 'Mobile App',
      priority: 'medium'
    }
  ];

  const filteredData = transactionData.filter(item => {
    const matchesSearch = 
      item.transactionId.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.beneficiary.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.status.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.reference.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.fromAccount.includes(searchTerm) ||
      item.toAccount.includes(searchTerm) ||
      item.amount.toString().includes(searchTerm);
    
    const matchesFilter = filterBy === 'all' || item.type === filterBy;
    
    return matchesSearch && matchesFilter;
  });

  // Pagination calculations
  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentData = filteredData.slice(startIndex, endIndex);

  // Reset to first page when filters change
  React.useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, filterBy]);

  const transactionTypes = [...new Set(transactionData.map(item => item.type))];

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-gradient-to-r from-red-100 to-pink-100 text-red-800';
      case 'medium': return 'bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800';
      case 'low': return 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800';
      default: return 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'completed': return 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800';
      case 'pending': return 'bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800';
      case 'flagged': return 'bg-gradient-to-r from-red-100 to-pink-100 text-red-800';
      case 'cleared': return 'bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-800';
      default: return 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800';
    }
  };

  const formatAmount = (amount: number, currency: string) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
    }).format(amount);
  };

  const getTransactionIcon = (type: string) => {
    if (type.includes('Wire') || type.includes('Transfer')) {
      return <ArrowUpRight className="w-4 h-4 text-blue-600 flex-shrink-0" />;
    } else if (type.includes('Deposit')) {
      return <ArrowDownLeft className="w-4 h-4 text-green-600 flex-shrink-0" />;
    } else {
      return <CreditCard className="w-4 h-4 text-purple-600 flex-shrink-0" />;
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleItemsPerPageChange = (items: number) => {
    setItemsPerPage(items);
    setCurrentPage(1);
  };

  // CSV Download Function
  const downloadCSV = () => {
    const headers = [
      'Transaction ID',
      'Type',
      'Date',
      'Time',
      'Amount',
      'Currency',
      'From Account',
      'To Account',
      'Beneficiary',
      'Status',
      'Priority',
      'Channel',
      'Reference',
      'Description'
    ];

    const csvContent = [
      headers.join(','),
      ...filteredData.map(item => [
        `"${item.transactionId}"`,
        `"${item.type}"`,
        `"${item.date}"`,
        `"${item.time}"`,
        `"${item.amount}"`,
        `"${item.currency}"`,
        `"${item.fromAccount}"`,
        `"${item.toAccount}"`,
        `"${item.beneficiary}"`,
        `"${item.status}"`,
        `"${item.priority}"`,
        `"${item.channel}"`,
        `"${item.reference}"`,
        `"${item.description.replace(/"/g, '""')}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `related-transactions-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <>
      <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-slate-50 to-green-50 px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-r from-green-500 to-teal-600 rounded-lg shadow-sm">
                <CreditCard className="w-5 h-5 text-white" />
              </div>
              <div>
                <h2 className="text-lg font-semibold text-gray-900">Related Transactions</h2>
                <p className="text-sm text-gray-600">All transactions made to the same account: ****5678</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <button 
                onClick={() => setIsChatOpen(true)}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 hover:scale-105"
                title="Ask AI Assistant"
              >
                <Sparkles className="w-5 h-5" />
              </button>
              <button 
                onClick={downloadCSV}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 hover:scale-105"
                title="Download CSV"
              >
                <Download className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200">
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search transactions, amounts, beneficiaries, or references..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm"
              />
            </div>
            
            <div className="flex gap-4">
              <div className="relative">
                <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <select
                  value={filterBy}
                  onChange={(e) => setFilterBy(e.target.value)}
                  className="pl-10 pr-8 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent appearance-none bg-white shadow-sm transition-all duration-200 min-w-48"
                >
                  <option value="all">All Transaction Types</option>
                  {transactionTypes.map(type => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
              </div>
              
              <select
                value={itemsPerPage}
                onChange={(e) => handleItemsPerPageChange(Number(e.target.value))}
                className="px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent appearance-none bg-white shadow-sm transition-all duration-200"
              >
                <option value={5}>5 per page</option>
                <option value={10}>10 per page</option>
                <option value={15}>15 per page</option>
                <option value={20}>20 per page</option>
              </select>
            </div>
          </div>
        </div>

        {/* Table Container - Removed overflow-x-auto */}
        <div>
          <table className="w-full">
            <thead className="bg-gradient-to-r from-gray-50 to-slate-100">
              <tr>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Transaction</th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Date</th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Amount</th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Beneficiary</th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Status</th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Details</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {currentData.map((item, index) => (
                <tr key={item.id} className={`hover:bg-gradient-to-r hover:from-green-50 hover:to-teal-50 transition-all duration-200 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50/50'}`}>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="flex items-center space-x-2">
                        {getTransactionIcon(item.type)}
                        <span className="text-sm font-semibold text-gray-900 truncate">{item.type}</span>
                      </div>
                      <div className="text-xs font-mono text-indigo-600 bg-indigo-50 rounded px-2 py-1 inline-block">
                        {item.transactionId}
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="flex items-center space-x-1 text-sm text-gray-900">
                        <Calendar className="w-3 h-3 text-gray-500 flex-shrink-0" />
                        <span className="text-xs">{item.date}</span>
                      </div>
                      <div className="flex items-center space-x-1 text-xs text-gray-600">
                        <Clock className="w-3 h-3 text-gray-400 flex-shrink-0" />
                        <span>{item.time}</span>
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="text-sm font-bold text-gray-900">
                        {formatAmount(item.amount, item.currency)}
                      </div>
                      <div className="flex items-center space-x-1">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium shadow-sm ${getPriorityColor(item.priority)}`}>
                          {item.priority.toUpperCase()}
                        </span>
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="text-sm font-medium text-gray-900 truncate max-w-32">{item.beneficiary}</div>
                      <div className="text-xs text-gray-500">{item.channel}</div>
                      <div className="text-xs text-gray-600">
                        <span className="font-mono">{item.fromAccount}</span> → <span className="font-mono">{item.toAccount}</span>
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium shadow-sm ${getStatusColor(item.status)}`}>
                      {item.status}
                    </span>
                  </td>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="text-sm text-gray-600 max-w-48 truncate" title={item.description}>
                        {item.description}
                      </div>
                      <div className="text-xs text-gray-500">
                        Ref: {item.reference}
                      </div>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination Footer */}
        <div className="bg-gradient-to-r from-gray-50 to-slate-50 px-6 py-4 border-t border-gray-200">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
            <div className="flex items-center space-x-4">
              <p className="text-sm text-gray-600 font-medium">
                Showing <span className="text-green-600 font-semibold">{startIndex + 1}</span> to <span className="text-green-600 font-semibold">{Math.min(endIndex, filteredData.length)}</span> of <span className="text-green-600 font-semibold">{filteredData.length}</span> transactions
              </p>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span className="text-xs text-gray-600">High Value</span>
              </div>
            </div>
            
            {/* Pagination Controls */}
            <div className="flex items-center space-x-2">
              <button
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:text-gray-600 disabled:hover:bg-transparent"
              >
                <ChevronLeft className="w-4 h-4" />
              </button>
              
              <div className="flex items-center space-x-1">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => {
                  // Show first page, last page, current page, and pages around current page
                  if (
                    page === 1 ||
                    page === totalPages ||
                    (page >= currentPage - 1 && page <= currentPage + 1)
                  ) {
                    return (
                      <button
                        key={page}
                        onClick={() => handlePageChange(page)}
                        className={`px-3 py-1 text-sm rounded-lg transition-all duration-200 ${
                          currentPage === page
                            ? 'bg-green-600 text-white shadow-sm'
                            : 'text-gray-600 hover:text-green-600 hover:bg-green-50'
                        }`}
                      >
                        {page}
                      </button>
                    );
                  } else if (
                    page === currentPage - 2 ||
                    page === currentPage + 2
                  ) {
                    return (
                      <span key={page} className="px-2 text-gray-400">
                        ...
                      </span>
                    );
                  }
                  return null;
                })}
              </div>
              
              <button
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:text-gray-600 disabled:hover:bg-transparent"
              >
                <ChevronRight className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Overlay */}
      <ChatOverlay 
        isOpen={isChatOpen}
        onClose={() => setIsChatOpen(false)}
        tableData={filteredData}
        tableName="Related Transactions"
      />
    </>
  );
};

export default RelatedTransactions;
