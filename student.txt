import { render, screen, fireEvent } from "@testing-library/react";
import PastEventsLog from "@/components/PastEventsLog";

const mockEvents = [
  {
    id: "E1",
    event: "Login Attempt",
    date: "2025-01-01",
    status: "Success",
    risk: "LOW",
  },
  {
    id: "E2",
    event: "Password Change",
    date: "2025-01-02",
    status: "Failed",
    risk: "HIGH",
  },
];

describe("PastEventsLog Component", () => {
  it("renders the component heading", () => {
    render(<PastEventsLog events={mockEvents} />);
    expect(screen.getByText("Past Event Logs")).toBeInTheDocument();
  });

  it("renders event rows", () => {
    render(<PastEventsLog events={mockEvents} />);
    expect(screen.getByText("Login Attempt")).toBeInTheDocument();
    expect(screen.getByText("Password Change")).toBeInTheDocument();
  });

  it("filters by search query", () => {
    render(<PastEventsLog events={mockEvents} />);
    const input = screen.getByPlaceholderText(/Search past events/i);

    fireEvent.change(input, { target: { value: "Login" } });

    expect(screen.getByText("Login Attempt")).toBeInTheDocument();
    expect(screen.queryByText("Password Change")).not.toBeInTheDocument();
  });

  it("filters by risk dropdown", () => {
    render(<PastEventsLog events={mockEvents} />);
    fireEvent.change(screen.getByDisplayValue("All Risks"), {
      target: { value: "HIGH" },
    });

    expect(screen.getByText("Password Change")).toBeInTheDocument();
    expect(screen.queryByText("Login Attempt")).not.toBeInTheDocument();
  });

  it("shows empty state when no events", () => {
    render(<PastEventsLog events={[]} />);
    expect(screen.queryByText("Login Attempt")).not.toBeInTheDocument();
    expect(screen.queryByText("Password Change")).not.toBeInTheDocument();
  });
});
