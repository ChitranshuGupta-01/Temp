package com.scb.creditcardorigination.xfeature.service;

import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;

@Service
public class FileStorageService {

    private final Path uploadDir = Paths.get("uploads");

    public FileStorageService() {
        try {
            if (!Files.exists(uploadDir)) {
                Files.createDirectories(uploadDir);
            }
        } catch (IOException e) {
            throw new RuntimeException("Could not create upload folder!", e);
        }
    }

    public String storeFile(MultipartFile file) {
        String filename = StringUtils.cleanPath(file.getOriginalFilename());
        Path targetLocation = uploadDir.resolve(filename);

        try {
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);
            // Return URL relative to your server base URL
            return "/uploads/" + filename;
        } catch (IOException e) {
            throw new RuntimeException("Failed to store file " + filename, e);
        }
    }
}


//////////

package com.scb.creditcardorigination.xfeature.service;

import com.scb.creditcardorigination.xfeature.model.Document;
import com.scb.creditcardorigination.xfeature.repository.DocumentRepository;
import com.scb.creditcardorigination.xfeature.exceptionHandling.DocumentNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DocumentService {
    @Autowired
    private DocumentRepository repository;

    public List<Document> getAllDocuments() {
        return repository.findAll();
    }

    public Document getDocumentById(Integer id) {
        return repository.findById(id).orElseThrow(() -> new DocumentNotFoundException("Document not found"));
    }

    public Document createDocument(Document doc) {
        return repository.save(doc);
    }

    public Document updateDocument(Integer id, Document doc) {
        Document existing = repository.findById(id).orElseThrow(() -> new DocumentNotFoundException("Document not found"));
        existing.setApplicationId(doc.getApplicationId());
        existing.setDocumentName(doc.getDocumentName());
        existing.setDocumentType(doc.getDocumentType());
        existing.setFileUrl(doc.getFileUrl());
        return repository.save(existing);
    }

    public void deleteDocument(Integer id) {
        repository.deleteById(id);
    }
}
