import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import * as XLSX from "xlsx"; // <-- added for Excel export
import service from "./service"; // import the axios service
import "./Onboarding.css";
 
function Onboarding() {
  const [applications, setApplications] = useState([]);
  const [editingIdx, setEditingIdx] = useState(-1);
  const [editData, setEditData] = useState({});
  const [creating, setCreating] = useState(false);
  const [createData, setCreateData] = useState({
    applicant: "",
    handler: "",
    status: "Application Submitted",
  });
 
  const navigate = useNavigate();
 
  // Load applications on component mount
  useEffect(() => {
    fetchApplications();
  }, []);
 
  function fetchApplications() {
    service
      .getAllApplications()
      .then((response) => {
        setApplications(response.data);
      })
      .catch((error) => {
        console.error("Error fetching applications:", error);
      });
  }
 
  function handleEdit(idx) {
    setEditingIdx(idx);
    setEditData({ ...applications[idx] });
  }
 
  function handleEditChange(e) {
    let copy = { ...editData };
    copy[e.target.name] = e.target.value;
    setEditData(copy);
  }
 
  function handleEditSave(idx) {
    const app = applications[idx];
    service
      .updateApplication(app.id, editData)
      .then((response) => {
        let copy = [...applications];
        copy[idx] = response.data;
        setApplications(copy);
        setEditingIdx(-1);
      })
      .catch((error) => {
        console.error("Error updating application:", error);
      });
  }
 
  function handleDelete(idx) {
    const app = applications[idx];
    service
      .deleteApplication(app.id)
      .then(() => {
        let copy = [...applications];
        copy.splice(idx, 1);
        setApplications(copy);
        setEditingIdx(-1);
      })
      .catch((error) => {
        console.error("Error deleting application:", error);
      });
  }
 
  function handleCreateOpen() {
    setCreating(true);
    setCreateData({
      applicant: "",
      handler: "",
      status: "Application Submitted",
    });
  }
 
  function handleCreateChange(e) {
    let copy = { ...createData };
    copy[e.target.name] = e.target.value;
    setCreateData(copy);
  }
 
  function handleCreateSave() {
    const newId = "SC" + Math.floor(100000 + Math.random() * 900000);
    const newApp = { id: newId, ...createData };
 
    service
      .createApplication(newApp)
      .then((response) => {
        setApplications([response.data, ...applications]);
        setCreating(false);
      })
      .catch((error) => {
        console.error("Error creating application:", error);
      });
  }

  // ✅ New: Download Excel
  function handleDownloadExcel() {
    if (applications.length === 0) {
      alert("No applications available to download.");
      return;
    }
    const worksheet = XLSX.utils.json_to_sheet(applications);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Applications");
    XLSX.writeFile(workbook, "applications.xlsx");
  }
 
  return (
    <div className="main-content">
      <div>
        <div className="app-title">Applications</div>
        <div className="app-desc">Manage customer onboarding applications</div>
      </div>
 
      <div className="create-container">
        <button className="btn btn-doc" onClick={() => navigate("/documents")}>
          Document manager
        </button>
        <button className="btn btn-download" onClick={handleDownloadExcel}>
          ⬇ Download Excel
        </button>
        <button className="btn btn-create" onClick={handleCreateOpen}>
          + Create New
        </button>
      </div>
 
      {applications.map((app, idx) => (
        <div
          className="app-card"
          key={app.id}
          style={{ outline: editingIdx === idx ? "2px solid #5ea9fa" : "" }}
        >
          {editingIdx === idx ? (
            <div className="edit-form">
              <div className="form-group">
                <label className="form-label">Application ID</label>
                <input className="form-control" value={editData.id} disabled />
              </div>
              <div className="form-group">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="status"
                  value={editData.status}
                  onChange={handleEditChange}
                >
                  <option>Application Submitted</option>
                  <option>Application Processing</option>
                  <option>Credit Card Offer</option>
                  <option>Credit Card Accepted</option>
                  <option>Printed & Shipped</option>
                </select>
              </div>
              <div className="form-group">
                <label className="form-label">Applicant</label>
                <input
                  className="form-control"
                  name="applicant"
                  value={editData.applicant}
                  onChange={handleEditChange}
                />
              </div>
              <div className="form-group">
                <label className="form-label">Handled By</label>
                <input
                  className="form-control"
                  name="handler"
                  value={editData.handler}
                  onChange={handleEditChange}
                />
              </div>
              <div className="edit-actions">
                <button
                  className="btn-save"
                  onClick={() => handleEditSave(idx)}
                >
                  Save
                </button>
                <button
                  className="btn-cancel"
                  onClick={() => setEditingIdx(-1)}
                >
                  ✖ Cancel
                </button>
              </div>
            </div>
          ) : (
            <>
              <div className="app-header">
                <div className="app-header-left">
                  <span className="app-id">Application ID - {app.id}</span>
                  <span
                    className={`badge badge-status ${
                      app.status === "Application Submitted"
                        ? "badge-submitted"
                        : app.status === "Application Processing"
                        ? "badge-processing"
                        : app.status === "Credit Card Offer"
                        ? "badge-offer"
                        : app.status === "Credit Card Accepted"
                        ? "badge-accepted"
                        : "badge-shipped"
                    }`}
                  >
                    {app.status}
                  </span>
                </div>
                <div className="app-header-right">
                  <button
                    className="app-action-btn app-action-btn-edit"
                    onClick={() => handleEdit(idx)}
                  >
                    Edit
                  </button>
                  <button
                    className="app-action-btn app-action-btn-offer"
                    onClick={() => navigate("/CreditCardOfferSales")}
                  >
                    Credit Score
                  </button>
                  <button
                    className="app-action-btn app-action-btn-del"
                    onClick={() => handleDelete(idx)}
                  >
                    Delete
                  </button>
                </div>
              </div>
              <div className="ms-1" style={{ lineHeight: 1.8 }}>
                <span className="info-label">Applicant:</span>{" "}
                <span className="info-value">{app.applicant}</span>
                <br />
                <span className="info-label">Handled By:</span>{" "}
                <span className="info-value">{app.handler}</span>
              </div>
            </>
          )}
        </div>
      ))}
 
      {creating && (
        <div className="modal-backdrop-custom">
          <div className="modal-box">
            <span className="modal-close" onClick={() => setCreating(false)}>
              &times;
            </span>
            <div className="modal-title">Create New Application</div>
            <form className="modal-form" onSubmit={(e) => e.preventDefault()}>
              <div className="form-group">
                <label className="form-label">Applicant</label>
                <input
                  className="form-control"
                  name="applicant"
                  value={createData.applicant}
                  onChange={handleCreateChange}
                  placeholder="Enter Applicant Name"
                />
              </div>
              <div className="form-group">
                <label className="form-label">Handled By</label>
                <input
                  className="form-control"
                  name="handler"
                  value={createData.handler}
                  onChange={handleCreateChange}
                  placeholder="Enter Handler Name"
                />
              </div>
              <div className="form-group">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="status"
                  value={createData.status}
                  onChange={handleCreateChange}
                >
                  <option>Application Submitted</option>
                  <option>Application Processing</option>
                  <option>Credit Card Offer</option>
                  <option>Credit Card Accepted</option>
                  <option>Printed & Shipped</option>
                </select>
              </div>
              <div className="modal-actions">
                <button
                  type="submit"
                  className="btn btn-create"
                  onClick={handleCreateSave}
                >
                  Create
                </button>
                <button
                  type="button"
                  className="btn btn-outline-secondary"
                  onClick={() => setCreating(false)}
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
 
export default Onboarding;





///////////





/* Container */
.main-content {
  font-family: "Segoe UI", Roboto, Arial, sans-serif;
  padding: 20px;
  background-color: #f9fbfd; /* light white-blue background */
  color: #002147; /* SC dark blue */
}

/* Title */
.app-title {
  font-size: 1.8rem;
  font-weight: 600;
  color: #006a4d; /* SC green */
  margin-bottom: 6px;
}

.app-desc {
  font-size: 1rem;
  color: #555;
  margin-bottom: 20px;
}

/* Button container */
.create-container {
  display: flex;
  justify-content: flex-end;
  margin-bottom: 20px;
  gap: 10px;
}

/* Generic Button */
.btn {
  padding: 8px 14px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

/* Create button */
.btn-create {
  background-color: #006a4d; /* SC green */
  color: #fff;
}
.btn-create:hover {
  background-color: #004d34;
}

/* Document button */
.btn-doc {
  background-color: #002147; /* SC navy */
  color: #fff;
}
.btn-doc:hover {
  background-color: #00152d;
}

/* Download Excel button */
.btn-download {
  background: #4caf50;
  border: none;
  font-weight: 500;
  font-size: 1.05rem;
  padding: 9px 18px;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(30, 90, 210, 0.12);
  transition: background 0.2s;
  color: #fff;
}
.btn-download:hover {
  background: #45a049;
}

/* Application card */
.app-card {
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0, 33, 71, 0.1);
  padding: 16px;
  margin-bottom: 16px;
}

/* Header inside card */
.app-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.app-header-left {
  display: flex;
  align-items: center;
  gap: 12px;
}

.app-id {
  font-weight: 600;
  font-size: 1rem;
  color: #002147;
}

/* Status badges */
.badge {
  padding: 5px 10px;
  border-radius: 12px;
  font-size: 0.85rem;
  font-weight: 500;
  color: #fff;
}

.badge-submitted {
  background: #2196f3;
}
.badge-processing {
  background: #ff9800;
}
.badge-offer {
  background: #673ab7;
}
.badge-accepted {
  background: #006a4d;
}
.badge-shipped {
  background: #009688;
}

/* Action buttons */
.app-action-btn {
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 0.85rem;
  border: none;
  cursor: pointer;
  font-weight: 500;
  margin-left: 6px;
  transition: 0.3s;
}

.app-action-btn-edit {
  background-color: #006a4d;
  color: #fff;
}
.app-action-btn-edit:hover {
  background-color: #004d34;
}

.app-action-btn-offer {
  background-color: #2196f3;
  color: #fff;
}
.app-action-btn-offer:hover {
  background-color: #0b7dda;
}

.app-action-btn-del {
  background-color: #d32f2f;
  color: #fff;
}
.app-action-btn-del:hover {
  background-color: #b71c1c;
}

/* Info text */
.info-label {
  font-weight: 600;
  color: #002147;
}
.info-value {
  color: #444;
}

/* Edit form */
.edit-form {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-label {
  font-weight: 500;
  margin-bottom: 4px;
  color: #002147;
}

.form-control,
.form-select {
  padding: 8px 10px;
  border: 1px solid #cfd8dc;
  border-radius: 6px;
}

.form-control:focus,
.form-select:focus {
  border-color: #006a4d;
  outline: none;
  box-shadow: 0 0 4px rgba(0, 106, 77, 0.3);
}

/* Edit actions */
.edit-actions {
  display: flex;
  gap: 10px;
}

.btn-save {
  background: #006a4d;
  color: #fff;
  border: none;
  padding: 6px 12px;
  border-radius: 6px;
  cursor: pointer;
}

.btn-cancel {
  background: #9e9e9e;
  color: #fff;
  border: none;
  padding: 6px 12px;
  border-radius: 6px;
  cursor: pointer;
}

/* Modal */
.modal-backdrop-custom {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 33, 71, 0.6); /* SC dark blue overlay */
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-box {
  background: #fff;
  padding: 24px;
  border-radius: 10px;
  width: 420px;
  box-shadow: 0 6px 20px rgba(0, 33, 71, 0.2);
  position: relative;
}

.modal-title {
  font-size: 1.2rem;
  font-weight: 600;
  color: #006a4d;
  margin-bottom: 16px;
}

.modal-close {
  position: absolute;
  top: 12px;
  right: 16px;
  font-size: 1.5rem;
  color: #555;
  cursor: pointer;
}

.modal-form {
  display: flex;
  flex-direction: column;
  gap: 14px;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}

.modal-box button {
  padding: 8px 14px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
}
