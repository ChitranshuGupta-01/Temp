"use client";

import React, { useMemo, useState } from "react";
import {
  FileText,
  AlertTriangle,
  Search,
  Filter,
  Download,
  Settings,
  ChevronLeft,
  ChevronRight,
  X,
} from "lucide-react";
import ReactFlow, { Background, Controls } from "reactflow";
import "reactflow/dist/style.css";

type EventItem = {
  id: string;
  type: string;
  date: string;
  profile: string;
  ip: string;
  status: "Success" | "Failed" | "Flagged" | "Other";
  severity: "Low" | "Medium" | "High";
  desc: string;
};

export default function CaseDetailPage() {
  // existing states
  const [searchTerm, setSearchTerm] = useState("");
  const [eventTypeFilter, setEventTypeFilter] = useState("All Event Types");
  const [pageSize, setPageSize] = useState<number>(5);
  const [page, setPage] = useState<number>(1);

  // NEW states
  const [notes, setNotes] = useState<string[]>([]);
  const [showNoteModal, setShowNoteModal] = useState(false);
  const [newNote, setNewNote] = useState("");
  const [showStatusModal, setShowStatusModal] = useState(false);
  const [caseStatus, setCaseStatus] = useState("Active");

  // --- Dummy events (shortened for clarity, keep your full list) ---
  const events: EventItem[] = [
    {
      id: "EVT-001",
      type: "Login Attempt",
      date: "2024-01-15 14:30:25",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "Successful login from registered device",
    },
  ];

  // event types
  const eventTypes = useMemo(() => {
    const s = new Set<string>();
    events.forEach((e) => s.add(e.type));
    return ["All Event Types", ...Array.from(s)];
  }, [events]);

  // filtered events
  const filtered = useMemo(() => {
    const q = searchTerm.trim().toLowerCase();
    return events.filter((e) => {
      if (eventTypeFilter !== "All Event Types" && e.type !== eventTypeFilter)
        return false;
      if (!q) return true;
      return (
        e.id.toLowerCase().includes(q) ||
        e.type.toLowerCase().includes(q) ||
        e.profile.toLowerCase().includes(q) ||
        e.ip.toLowerCase().includes(q) ||
        e.status.toLowerCase().includes(q) ||
        e.desc.toLowerCase().includes(q) ||
        e.date.toLowerCase().includes(q)
      );
    });
  }, [events, searchTerm, eventTypeFilter]);

  const totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
  const currentPage = Math.min(Math.max(1, page), totalPages);
  const startIndex = (currentPage - 1) * pageSize;
  const visible = filtered.slice(startIndex, startIndex + pageSize);

  function handlePageChange(next: number) {
    setPage(Math.min(Math.max(1, next), totalPages));
  }

  function handleDownloadCSV() {
    const headers = [
      "Event ID",
      "Event Type",
      "Date & Time",
      "Profile",
      "IP Address",
      "Status",
      "Severity",
      "Description",
    ];
    const rows = filtered.map((r) =>
      [
        r.id,
        r.type,
        r.date,
        r.profile,
        r.ip,
        r.status,
        r.severity,
        `"${r.desc.replace(/"/g, '""')}"`,
      ].join(",")
    );
    const csv = [headers.join(","), ...rows].join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "events.csv";
    a.click();
    URL.revokeObjectURL(url);
  }

  // Generate report (simple text)
  function handleGenerateReport() {
    const report = `
Case Report
-----------
Case ID: CASE-2024-154
Status: ${caseStatus}
Notes:
${notes.length ? notes.map((n, i) => `${i + 1}. ${n}`).join("\n") : "No notes yet."}
Events: ${events.length}
`;
    const blob = new Blob([report], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "case-report.txt";
    a.click();
    URL.revokeObjectURL(url);
  }

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
      {/* ===== Case Header ===== */}
      <div className="bg-white rounded-2xl shadow-lg border overflow-hidden">
        <div className="bg-gradient-to-r from-orange-50 to-red-50 px-6 py-4 border-b">
          <h1 className="text-xl font-bold text-gray-800 flex items-center gap-3">
            <FileText className="w-6 h-6 text-orange-600" />
            Case #54532134
          </h1>
          <p className="text-gray-500 text-sm mt-1">
            High Value Transaction Investigation
          </p>
        </div>

        <div className="p-6 space-y-4">
          <p className="text-gray-700">
            Case Status:{" "}
            <span className="font-semibold text-indigo-700">{caseStatus}</span>
          </p>

          {notes.length > 0 && (
            <div className="bg-gray-50 p-3 rounded-lg border text-sm space-y-1">
              <h3 className="font-semibold">Notes:</h3>
              {notes.map((n, i) => (
                <p key={i} className="text-gray-700">
                  {i + 1}. {n}
                </p>
              ))}
            </div>
          )}

          <div className="flex gap-3">
            <button
              onClick={() => setShowNoteModal(true)}
              className="px-4 py-2 text-sm font-medium bg-gradient-to-r from-gray-50 to-gray-100 border rounded-lg hover:from-indigo-50 hover:to-indigo-100 transition-all shadow-sm"
            >
              Add Note
            </button>
            <button
              onClick={() => setShowStatusModal(true)}
              className="px-4 py-2 text-sm font-medium bg-gradient-to-r from-gray-50 to-gray-100 border rounded-lg hover:from-indigo-50 hover:to-indigo-100 transition-all shadow-sm"
            >
              Update Status
            </button>
            <button
              onClick={handleGenerateReport}
              className="px-4 py-2 text-sm font-medium bg-gradient-to-r from-gray-50 to-gray-100 border rounded-lg hover:from-indigo-50 hover:to-indigo-100 transition-all shadow-sm"
            >
              Generate Report
            </button>
          </div>
        </div>
      </div>

      {/* ===== Note Modal ===== */}
      {showNoteModal && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">Add Note</h2>
              <button onClick={() => setShowNoteModal(false)}>
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>
            <textarea
              value={newNote}
              onChange={(e) => setNewNote(e.target.value)}
              className="w-full border rounded-lg p-2 text-sm"
              rows={4}
              placeholder="Write your note here..."
            />
            <div className="mt-4 flex justify-end gap-2">
              <button
                onClick={() => setShowNoteModal(false)}
                className="px-3 py-2 text-sm border rounded-lg"
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  if (newNote.trim()) {
                    setNotes((prev) => [...prev, newNote.trim()]);
                    setNewNote("");
                  }
                  setShowNoteModal(false);
                }}
                className="px-3 py-2 text-sm bg-indigo-600 text-white rounded-lg"
              >
                Save Note
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ===== Status Modal ===== */}
      {showStatusModal && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-sm">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">Update Case Status</h2>
              <button onClick={() => setShowStatusModal(false)}>
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>
            <select
              value={caseStatus}
              onChange={(e) => setCaseStatus(e.target.value)}
              className="w-full border rounded-lg p-2 text-sm"
            >
              <option value="Active">Active</option>
              <option value="Under Review">Under Review</option>
              <option value="Closed">Closed</option>
            </select>
            <div className="mt-4 flex justify-end gap-2">
              <button
                onClick={() => setShowStatusModal(false)}
                className="px-3 py-2 text-sm border rounded-lg"
              >
                Cancel
              </button>
              <button
                onClick={() => setShowStatusModal(false)}
                className="px-3 py-2 text-sm bg-indigo-600 text-white rounded-lg"
              >
                Update
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
