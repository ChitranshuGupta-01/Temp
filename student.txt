import React, { useState, useRef, useEffect } from 'react';
import { X, Minimize2, Maximize2, Send, Sparkles, Bot, User, Clock } from 'lucide-react';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface ChatOverlayProps {
  isOpen: boolean;
  onClose: () => void;
  tableData?: any[];
  tableName?: string;
}

const ChatOverlay: React.FC<ChatOverlayProps> = ({ 
  isOpen, 
  onClose, 
  tableData = [], 
  tableName = "Data Table" 
}) => {
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'assistant',
      content: `Hello! I'm your AI assistant for analyzing the ${tableName}. I can help you understand patterns, trends, and specific insights from your data. What would you like to know?`,
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Dynamic sample questions based on table type
  const getSampleQuestions = () => {
    if (tableName.toLowerCase().includes('transaction')) {
      return [
        "What's the total transaction volume this month?",
        "Which beneficiaries receive the most payments?",
        "Show me all high-value transactions above $10,000",
        "What are the most common transaction types?",
        "Are there any flagged or suspicious transactions?",
        "What's the average transaction amount by channel?"
      ];
    } else {
      return [
        "How many high severity events were there in the past month?",
        "What are the most common event types?",
        "Show me all failed login attempts",
        "Which IP addresses appear most frequently?",
        "What's the trend of security events over time?",
        "Are there any suspicious patterns in the data?"
      ];
    }
  };

  const sampleQuestions = getSampleQuestions();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && !isMinimized) {
      inputRef.current?.focus();
    }
  }, [isOpen, isMinimized]);

  const generateResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    // Transaction-specific responses
    if (tableName.toLowerCase().includes('transaction')) {
      if (lowerMessage.includes('total') && (lowerMessage.includes('volume') || lowerMessage.includes('amount'))) {
        const totalAmount = tableData.reduce((sum, item) => sum + (item.amount || 0), 0);
        const transactionCount = tableData.length;
        return `Based on the current data, the **total transaction volume** is **$${totalAmount.toLocaleString()}** across **${transactionCount} transactions**. This represents significant financial activity that should be monitored for compliance purposes.`;
      }
      
      if (lowerMessage.includes('beneficiar')) {
        const beneficiaries = tableData.reduce((acc: any, item: any) => {
          const beneficiary = item.beneficiary;
          if (beneficiary) {
            acc[beneficiary] = (acc[beneficiary] || 0) + (item.amount || 0);
          }
          return acc;
        }, {});
        const topBeneficiaries = Object.entries(beneficiaries)
          .sort(([,a]: any, [,b]: any) => b - a)
          .slice(0, 3)
          .map(([name, amount]: any) => `**${name}** ($${amount.toLocaleString()})`)
          .join(', ');
        return `The top beneficiaries by transaction volume are: ${topBeneficiaries}. These entities receive the most significant payments and may warrant additional due diligence.`;
      }
      
      if (lowerMessage.includes('high') && (lowerMessage.includes('value') || lowerMessage.includes('amount'))) {
        const highValueTransactions = tableData.filter(item => (item.amount || 0) > 10000);
        const totalHighValue = highValueTransactions.reduce((sum, item) => sum + (item.amount || 0), 0);
        return `I found **${highValueTransactions.length} high-value transactions** (above $10,000) totaling **$${totalHighValue.toLocaleString()}**. These transactions require enhanced monitoring and may trigger regulatory reporting requirements.`;
      }
      
      if (lowerMessage.includes('common') && lowerMessage.includes('type')) {
        const transactionTypes = tableData.reduce((acc: any, item: any) => {
          const type = item.type;
          acc[type] = (acc[type] || 0) + 1;
          return acc;
        }, {});
        const mostCommon = Object.entries(transactionTypes)
          .sort(([,a]: any, [,b]: any) => b - a)
          .slice(0, 3)
          .map(([type, count]) => `**${type}** (${count} transactions)`)
          .join(', ');
        return `The most common transaction types are: ${mostCommon}. This distribution helps identify the primary payment patterns in your system.`;
      }
      
      if (lowerMessage.includes('flagged') || lowerMessage.includes('suspicious')) {
        const flaggedTransactions = tableData.filter(item => 
          item.status?.toLowerCase().includes('flagged') || 
          item.priority === 'high' ||
          item.status?.toLowerCase().includes('blocked')
        );
        return `I identified **${flaggedTransactions.length} flagged or suspicious transactions** that require immediate attention. These include high-priority transfers, blocked transactions, and those under review for potential compliance issues.`;
      }
      
      if (lowerMessage.includes('average') && lowerMessage.includes('channel')) {
        const channelAverages = tableData.reduce((acc: any, item: any) => {
          const channel = item.channel;
          if (channel) {
            if (!acc[channel]) acc[channel] = { total: 0, count: 0 };
            acc[channel].total += (item.amount || 0);
            acc[channel].count += 1;
          }
          return acc;
        }, {});
        
        const averagesByChannel = Object.entries(channelAverages)
          .map(([channel, data]: any) => `**${channel}**: $${Math.round(data.total / data.count).toLocaleString()}`)
          .join(', ');
        return `Average transaction amounts by channel: ${averagesByChannel}. This analysis helps identify channel-specific transaction patterns and potential anomalies.`;
      }
    } else {
      // Event-specific responses (existing logic)
      if (lowerMessage.includes('high severity') || lowerMessage.includes('high priority')) {
        const highSeverityCount = tableData.filter(item => 
          item.severity === 'high' || item.priority === 'high'
        ).length;
        return `Based on the current data, there are **${highSeverityCount} high severity events** in the table. These include failed login attempts, suspicious activities, and transaction alerts that require immediate attention.`;
      }
      
      if (lowerMessage.includes('common') && lowerMessage.includes('event')) {
        const eventTypes = tableData.reduce((acc: any, item: any) => {
          const type = item.eventType || item.type;
          acc[type] = (acc[type] || 0) + 1;
          return acc;
        }, {});
        const mostCommon = Object.entries(eventTypes)
          .sort(([,a]: any, [,b]: any) => b - a)
          .slice(0, 3)
          .map(([type, count]) => `**${type}** (${count} occurrences)`)
          .join(', ');
        return `The most common event types are: ${mostCommon}. This suggests these are the primary activities being monitored in your system.`;
      }
      
      if (lowerMessage.includes('failed') && lowerMessage.includes('login')) {
        const failedLogins = tableData.filter(item => 
          item.eventType?.toLowerCase().includes('failed') || 
          item.status?.toLowerCase() === 'failed'
        ).length;
        return `I found **${failedLogins} failed login attempts** in the data. These events should be monitored closely as they may indicate potential security threats or account compromise attempts.`;
      }
      
      if (lowerMessage.includes('ip') || lowerMessage.includes('address')) {
        const ipAddresses = [...new Set(tableData.map(item => item.ipAddress).filter(Boolean))];
        return `There are **${ipAddresses.length} unique IP addresses** in the data. The most frequently appearing ones include addresses from your internal network (192.168.x.x) and some external IPs that may require investigation.`;
      }
      
      if (lowerMessage.includes('trend') || lowerMessage.includes('pattern')) {
        return `Based on the temporal analysis of your data, I can see patterns in event timing and frequency. There appears to be higher activity during business hours, with some suspicious activities occurring outside normal hours. Would you like me to analyze specific time periods?`;
      }
      
      if (lowerMessage.includes('suspicious')) {
        return `I've identified several potentially suspicious patterns: multiple failed login attempts from foreign IP addresses, high-value transactions outside normal patterns, and unusual access times. These events are flagged with high severity and should be investigated further.`;
      }
    }
    
    // Default response
    return `I understand you're asking about "${userMessage}". While I can see the data structure, I'd recommend being more specific about what aspect you'd like me to analyze. You can ask about counts, patterns, trends, or specific data points from the ${tableName}.`;
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: generateResponse(inputValue),
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleSampleQuestion = (question: string) => {
    setInputValue(question);
    inputRef.current?.focus();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) return null;

  // Dynamic color scheme based on table type
  const getColorScheme = () => {
    if (tableName.toLowerCase().includes('transaction')) {
      return {
        gradient: 'from-green-50 to-teal-50',
        iconGradient: 'from-green-500 to-teal-600',
        buttonHover: 'hover:text-green-600 hover:bg-green-50',
        userMessage: 'from-green-500 to-teal-600',
        focusRing: 'focus:ring-green-500'
      };
    } else {
      return {
        gradient: 'from-sky-50 to-blue-50',
        iconGradient: 'from-sky-500 to-blue-600',
        buttonHover: 'hover:text-sky-600 hover:bg-sky-50',
        userMessage: 'from-sky-500 to-blue-600',
        focusRing: 'focus:ring-sky-500'
      };
    }
  };

  const colors = getColorScheme();

  return (
    <div className={`fixed bottom-0 right-6 z-50 transition-all duration-300 ${
      isMinimized 
        ? 'w-80 h-16' 
        : 'w-96 h-[500px]'
    }`}>
      <div className="bg-white rounded-t-2xl shadow-2xl border border-gray-200 border-b-0 h-full flex flex-col">
        {/* Header */}
        <div className={`flex items-center justify-between p-4 border-b border-gray-200 bg-gradient-to-r ${colors.gradient} rounded-t-2xl flex-shrink-0`}>
          <div className="flex items-center space-x-3">
            <div className={`p-2 bg-gradient-to-r ${colors.iconGradient} rounded-lg shadow-sm`}>
              <Sparkles className="w-4 h-4 text-white" />
            </div>
            <div>
              <h3 className="text-sm font-semibold text-gray-900">AI Assistant</h3>
              {!isMinimized && (
                <p className="text-xs text-gray-600">Ask questions about {tableName}</p>
              )}
            </div>
          </div>
          
          <div className="flex items-center space-x-1">
            <button
              onClick={() => setIsMinimized(!isMinimized)}
              className={`p-1.5 text-gray-600 ${colors.buttonHover} rounded-md transition-all duration-200`}
              title={isMinimized ? "Maximize" : "Minimize"}
            >
              {isMinimized ? <Maximize2 className="w-3 h-3" /> : <Minimize2 className="w-3 h-3" />}
            </button>
            <button
              onClick={onClose}
              className="p-1.5 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-md transition-all duration-200"
              title="Close"
            >
              <X className="w-3 h-3" />
            </button>
          </div>
        </div>

        {/* Content */}
        {!isMinimized && (
          <>
            {/* Sample Questions */}
            <div className="p-3 bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200 flex-shrink-0">
              <p className="text-xs font-medium text-gray-700 mb-2">Quick questions:</p>
              <div className="flex flex-wrap gap-1">
                {sampleQuestions.slice(0, 2).map((question, index) => (
                  <button
                    key={index}
                    onClick={() => handleSampleQuestion(question)}
                    className={`text-xs bg-white border border-gray-200 rounded-full px-2 py-1 ${colors.buttonHover} transition-all duration-200 truncate max-w-full`}
                    title={question}
                  >
                    {question.length > 35 ? question.substring(0, 35) + '...' : question}
                  </button>
                ))}
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-3 space-y-3 min-h-0">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex items-start space-x-2 ${
                    message.type === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  {message.type === 'assistant' && (
                    <div className={`p-1.5 bg-gradient-to-r ${colors.iconGradient} rounded-lg shadow-sm flex-shrink-0`}>
                      <Bot className="w-3 h-3 text-white" />
                    </div>
                  )}
                  
                  <div className={`max-w-[75%] ${message.type === 'user' ? 'order-2' : ''}`}>
                    <div
                      className={`p-2.5 rounded-xl shadow-sm text-xs ${
                        message.type === 'user'
                          ? `bg-gradient-to-r ${colors.userMessage} text-white`
                          : 'bg-gray-50 text-gray-900 border border-gray-200'
                      }`}
                    >
                      <div className="whitespace-pre-wrap">
                        {message.content.split('**').map((part, index) => 
                          index % 2 === 1 ? <strong key={index}>{part}</strong> : part
                        )}
                      </div>
                    </div>
                    <div className="flex items-center space-x-1 mt-1 text-xs text-gray-500">
                      <Clock className="w-2 h-2" />
                      <span className="text-xs">{message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                    </div>
                  </div>
                  
                  {message.type === 'user' && (
                    <div className={`p-1.5 bg-gradient-to-r ${colors.userMessage} rounded-lg shadow-sm flex-shrink-0 order-3`}>
                      <User className="w-3 h-3 text-white" />
                    </div>
                  )}
                </div>
              ))}
              
              {/* Typing Indicator */}
              {isTyping && (
                <div className="flex items-start space-x-2">
                  <div className={`p-1.5 bg-gradient-to-r ${colors.iconGradient} rounded-lg shadow-sm`}>
                    <Bot className="w-3 h-3 text-white" />
                  </div>
                  <div className="bg-gray-50 border border-gray-200 rounded-xl p-2.5 shadow-sm">
                    <div className="flex space-x-1">
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-3 border-t border-gray-200 bg-gradient-to-r from-gray-50 to-slate-50 flex-shrink-0">
              <div className="flex items-center space-x-2">
                <div className="flex-1 relative">
                  <input
                    ref={inputRef}
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Ask about your data..."
                    className={`w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 ${colors.focusRing} focus:border-transparent transition-all duration-200 bg-white shadow-sm`}
                  />
                </div>
                <button
                  onClick={handleSendMessage}
                  disabled={!inputValue.trim() || isTyping}
                  className={`p-2 bg-gradient-to-r ${colors.userMessage} text-white rounded-lg hover:shadow-xl transition-all duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex-shrink-0`}
                >
                  <Send className="w-4 h-4" />
                </button>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default ChatOverlay;
