// src/app/hoc/withAuth.tsx
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { isSessionValid, clearSession } from "../utils/session";

export default function withAuth(WrappedComponent: React.ComponentType<any>) {
  const AuthenticatedComponent = (props: any) => {
    const [isLoading, setIsLoading] = useState(true);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const router = useRouter();

    useEffect(() => {
      const checkAuth = async () => {
        const valid = isSessionValid();

        if (valid) {
          setIsAuthenticated(true);
        } else {
          clearSession();
          router.push("/login");
        }
        setIsLoading(false);
      };

      checkAuth();
    }, [router]);

    if (isLoading) {
      return <div style={{ textAlign: "center", marginTop: "50px" }}>Loading...</div>;
    }

    if (!isAuthenticated) {
      return null;
    }

    return <WrappedComponent {...props} />;
  };

  return AuthenticatedComponent;
}
