import React, { useState } from 'react';
import { Search, Filter, Download, Calendar, Clock, User, Activity, ChevronLeft, ChevronRight, Sparkles } from 'lucide-react';
import ChatOverlay from './ChatOverlay';

interface EventData {
  id: string;
  eventId: string;
  eventType: string;
  date: string;
  time: string;
  profileId: string;
  profileName: string;
  ipAddress: string;
  status: string;
  description: string;
  severity: 'low' | 'medium' | 'high';
}

const DataTable: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterBy, setFilterBy] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [isChatOpen, setIsChatOpen] = useState(false);

  const eventData: EventData[] = [
    {
      id: '1',
      eventId: 'EVT-001',
      eventType: 'Login Attempt',
      date: '2024-01-15',
      time: '14:30:25',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'Successful login from registered device',
      severity: 'low'
    },
    {
      id: '2',
      eventId: 'EVT-002',
      eventType: 'Failed Login',
      date: '2024-01-15',
      time: '09:15:42',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '203.45.67.89',
      status: 'Failed',
      description: 'Multiple failed login attempts from unknown IP',
      severity: 'high'
    },
    {
      id: '3',
      eventId: 'EVT-003',
      eventType: 'Transaction Alert',
      date: '2024-01-14',
      time: '16:45:12',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Flagged',
      description: 'High-value transaction exceeding daily limit',
      severity: 'medium'
    },
    {
      id: '4',
      eventId: 'EVT-004',
      eventType: 'Profile Update',
      date: '2024-01-14',
      time: '11:20:33',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'Contact information updated successfully',
      severity: 'low'
    },
    {
      id: '5',
      eventId: 'EVT-005',
      eventType: 'Beneficiary Added',
      date: '2024-01-13',
      time: '13:55:18',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'New beneficiary ABC Corp added to account',
      severity: 'low'
    },
    {
      id: '6',
      eventId: 'EVT-006',
      eventType: 'Password Change',
      date: '2024-01-12',
      time: '10:30:45',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'Password changed successfully',
      severity: 'medium'
    },
    {
      id: '7',
      eventId: 'EVT-007',
      eventType: 'Suspicious Activity',
      date: '2024-01-11',
      time: '22:15:30',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '45.123.67.201',
      status: 'Blocked',
      description: 'Unusual access pattern detected and blocked',
      severity: 'high'
    },
    {
      id: '8',
      eventId: 'EVT-008',
      eventType: 'Device Registration',
      date: '2024-01-10',
      time: '08:45:22',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'New mobile device registered for 2FA',
      severity: 'low'
    },
    {
      id: '9',
      eventId: 'EVT-009',
      eventType: 'Rule Triggered',
      date: '2024-01-09',
      time: '15:20:11',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Alert',
      description: 'High Amount Alert rule triggered for transaction',
      severity: 'medium'
    },
    {
      id: '10',
      eventId: 'EVT-010',
      eventType: 'Account Verification',
      date: '2024-01-08',
      time: '12:10:55',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'Account verification completed successfully',
      severity: 'low'
    },
    {
      id: '11',
      eventId: 'EVT-011',
      eventType: 'Login Attempt',
      date: '2024-01-07',
      time: '16:22:18',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'Regular login from home network',
      severity: 'low'
    },
    {
      id: '12',
      eventId: 'EVT-012',
      eventType: 'Data Export',
      date: '2024-01-06',
      time: '14:15:30',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'Account statement exported successfully',
      severity: 'low'
    },
    {
      id: '13',
      eventId: 'EVT-013',
      eventType: 'Security Alert',
      date: '2024-01-05',
      time: '11:45:22',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '78.123.45.67',
      status: 'Flagged',
      description: 'Login from new geographic location',
      severity: 'medium'
    },
    {
      id: '14',
      eventId: 'EVT-014',
      eventType: 'Transaction Alert',
      date: '2024-01-04',
      time: '09:30:15',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Alert',
      description: 'Unusual transaction pattern detected',
      severity: 'high'
    },
    {
      id: '15',
      eventId: 'EVT-015',
      eventType: 'Profile Update',
      date: '2024-01-03',
      time: '13:20:45',
      profileId: 'PROF-789',
      profileName: 'John Doe',
      ipAddress: '192.168.1.100',
      status: 'Success',
      description: 'Email address updated successfully',
      severity: 'low'
    }
  ];

  const filteredData = eventData.filter(item => {
    const matchesSearch = 
      item.eventType.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.profileName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.status.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.ipAddress.includes(searchTerm);
    
    const matchesFilter = filterBy === 'all' || item.eventType === filterBy;
    
    return matchesSearch && matchesFilter;
  });

  // Pagination calculations
  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentData = filteredData.slice(startIndex, endIndex);

  // Reset to first page when filters change
  React.useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, filterBy]);

  const eventTypes = [...new Set(eventData.map(item => item.eventType))];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-gradient-to-r from-red-100 to-pink-100 text-red-800';
      case 'medium': return 'bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800';
      case 'low': return 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800';
      default: return 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'success': return 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800';
      case 'failed': return 'bg-gradient-to-r from-red-100 to-pink-100 text-red-800';
      case 'blocked': return 'bg-gradient-to-r from-red-100 to-pink-100 text-red-800';
      case 'flagged': return 'bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800';
      case 'alert': return 'bg-gradient-to-r from-purple-100 to-violet-100 text-purple-800';
      default: return 'bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-800';
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleItemsPerPageChange = (items: number) => {
    setItemsPerPage(items);
    setCurrentPage(1);
  };

  // CSV Download Function
  const downloadCSV = () => {
    const headers = [
      'Event ID',
      'Event Type',
      'Date',
      'Time',
      'Profile ID',
      'Profile Name',
      'IP Address',
      'Status',
      'Severity',
      'Description'
    ];

    const csvContent = [
      headers.join(','),
      ...filteredData.map(item => [
        `"${item.eventId}"`,
        `"${item.eventType}"`,
        `"${item.date}"`,
        `"${item.time}"`,
        `"${item.profileId}"`,
        `"${item.profileName}"`,
        `"${item.ipAddress}"`,
        `"${item.status}"`,
        `"${item.severity}"`,
        `"${item.description.replace(/"/g, '""')}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `past-events-log-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <>
      <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-slate-50 to-purple-50 px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg shadow-sm">
                <Activity className="w-5 h-5 text-white" />
              </div>
              <div>
                <h2 className="text-lg font-semibold text-gray-900">Past Events Log</h2>
                <p className="text-sm text-gray-600">Recent activity and security events for Profile: John Doe</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <button 
                onClick={() => setIsChatOpen(true)}
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 hover:scale-105"
                title="Ask AI Assistant"
              >
                <Sparkles className="w-5 h-5" />
              </button>
              <button 
                onClick={downloadCSV}
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 hover:scale-105"
                title="Download CSV"
              >
                <Download className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200">
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search events, status, IP addresses, or descriptions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm"
              />
            </div>
            
            <div className="flex gap-4">
              <div className="relative">
                <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <select
                  value={filterBy}
                  onChange={(e) => setFilterBy(e.target.value)}
                  className="pl-10 pr-8 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent appearance-none bg-white shadow-sm transition-all duration-200 min-w-48"
                >
                  <option value="all">All Event Types</option>
                  {eventTypes.map(eventType => (
                    <option key={eventType} value={eventType}>{eventType}</option>
                  ))}
                </select>
              </div>
              
              <select
                value={itemsPerPage}
                onChange={(e) => handleItemsPerPageChange(Number(e.target.value))}
                className="px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent appearance-none bg-white shadow-sm transition-all duration-200"
              >
                <option value={5}>5 per page</option>
                <option value={10}>10 per page</option>
                <option value={15}>15 per page</option>
                <option value={20}>20 per page</option>
              </select>
            </div>
          </div>
        </div>

        {/* Table Container */}
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gradient-to-r from-gray-50 to-slate-100">
              <tr>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Event ID</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Event Type</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Date & Time</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Profile</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">IP Address</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Status</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Severity</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Description</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {currentData.map((item, index) => (
                <tr key={item.id} className={`hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 transition-all duration-200 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50/50'}`}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm font-mono text-indigo-600 bg-indigo-50 rounded px-2 py-1">
                      {item.eventId}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center space-x-2">
                      <Activity className="w-4 h-4 text-purple-600 flex-shrink-0" />
                      <span className="text-sm font-semibold text-gray-900">{item.eventType}</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex flex-col">
                      <div className="flex items-center space-x-1 text-sm text-gray-900">
                        <Calendar className="w-3 h-3 text-gray-500 flex-shrink-0" />
                        <span>{item.date}</span>
                      </div>
                      <div className="flex items-center space-x-1 text-xs text-gray-600">
                        <Clock className="w-3 h-3 text-gray-400 flex-shrink-0" />
                        <span>{item.time}</span>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center space-x-2">
                      <User className="w-4 h-4 text-blue-600 flex-shrink-0" />
                      <div className="flex flex-col min-w-0">
                        <span className="text-sm font-medium text-gray-900 truncate">{item.profileName}</span>
                        <span className="text-xs text-gray-500 truncate">{item.profileId}</span>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm font-mono text-gray-600 bg-gray-50 rounded px-2 py-1">
                      {item.ipAddress}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium shadow-sm ${getStatusColor(item.status)}`}>
                      {item.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium shadow-sm ${getSeverityColor(item.severity)}`}>
                      {item.severity.toUpperCase()}
                    </span>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm text-gray-600 max-w-xs">
                      <div className="line-clamp-2" title={item.description}>
                        {item.description}
                      </div>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination Footer */}
        <div className="bg-gradient-to-r from-gray-50 to-slate-50 px-6 py-4 border-t border-gray-200">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
            <div className="flex items-center space-x-4">
              <p className="text-sm text-gray-600 font-medium">
                Showing <span className="text-purple-600 font-semibold">{startIndex + 1}</span> to <span className="text-purple-600 font-semibold">{Math.min(endIndex, filteredData.length)}</span> of <span className="text-purple-600 font-semibold">{filteredData.length}</span> events
              </p>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                <span className="text-xs text-gray-600">High Priority</span>
              </div>
            </div>
            
            {/* Pagination Controls */}
            <div className="flex items-center space-x-2">
              <button
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:text-gray-600 disabled:hover:bg-transparent"
              >
                <ChevronLeft className="w-4 h-4" />
              </button>
              
              <div className="flex items-center space-x-1">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => {
                  // Show first page, last page, current page, and pages around current page
                  if (
                    page === 1 ||
                    page === totalPages ||
                    (page >= currentPage - 1 && page <= currentPage + 1)
                  ) {
                    return (
                      <button
                        key={page}
                        onClick={() => handlePageChange(page)}
                        className={`px-3 py-1 text-sm rounded-lg transition-all duration-200 ${
                          currentPage === page
                            ? 'bg-purple-600 text-white shadow-sm'
                            : 'text-gray-600 hover:text-purple-600 hover:bg-purple-50'
                        }`}
                      >
                        {page}
                      </button>
                    );
                  } else if (
                    page === currentPage - 2 ||
                    page === currentPage + 2
                  ) {
                    return (
                      <span key={page} className="px-2 text-gray-400">
                        ...
                      </span>
                    );
                  }
                  return null;
                })}
              </div>
              
              <button
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:text-gray-600 disabled:hover:bg-transparent"
              >
                <ChevronRight className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Overlay */}
      <ChatOverlay 
        isOpen={isChatOpen}
        onClose={() => setIsChatOpen(false)}
        tableData={filteredData}
        tableName="Past Events Log"
      />
    </>
  );
};

export default DataTable;
