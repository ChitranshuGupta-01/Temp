Authwrapper:
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";

import { isSessionValid, clearSession } from "@/app/utils/session";

export default function AuthWrapper({ children }: { children: React.ReactNode }) {
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const checkAuth = () => {
      const valid = isSessionValid();
      if (valid) {
        setIsAuthenticated(true);
      } else {
        clearSession();
        router.push("/login");
      }
      setIsLoading(false);
    };

    checkAuth();
  }, [router]);

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  return <>{children}</>;
}

utils/session.tsx:
// src/app/utils/session.js

// Save token + expiry (15 minutes)
export function setSession(token) {
    const expiry = Date.now() + 15 * 60 * 1000; // 15 min
    sessionStorage.setItem("authToken", token);
    sessionStorage.setItem("expiry", expiry.toString());
  }
  
  // Get token from sessionStorage
  export function getToken() {
    return sessionStorage.getItem("authToken");
  }

  export function setCurrentRealtionshipId(relationshipId: string){
    sessionStorage.setItem("currentRelationshipId",relationshipId);
  }
  export function getCurrentRelationshipId(){
    return sessionStorage.getItem("currentRelationshipId");
  }
  // Clear session
  export function clearSession() {
    sessionStorage.removeItem("authToken");
    sessionStorage.removeItem("expiry");
  }
  
  // Validate token and expiry
  export function isSessionValid() {
    const token = sessionStorage.getItem("authToken");
    const expiry = sessionStorage.getItem("expiry");
  
    if (!token || !expiry) return false;
    return Date.now() < parseInt(expiry);
  }
