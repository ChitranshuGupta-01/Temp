"use client";
import React, { useCallback } from "react";
import ReactFlow, { Background, Controls, Node, Edge } from "reactflow";
import {
  ZoomIn,
  ZoomOut,
  Maximize2,
  Minimize2,
  FileText
} from "lucide-react";
import "reactflow/dist/style.css";

export default function CaseRelationDiagram({ relation, isFullscreen = false, onToggleFullscreen = () => {} }) {
  const renderEntityCard = (title, color, fields) => (
    <div className="rounded-xl shadow-lg border border-gray-200 bg-white" style={{ minWidth: 170 }}>
      <div className="rounded-t-xl p-2 flex items-center" style={{ background: color }}>
        <div className="font-semibold text-white text-base mx-auto">{title}</div>
      </div>
      <div className="p-2 space-y-1">
        {fields.map((f, idx) => (
          <div key={f.name || idx} className="flex justify-between text-xs font-mono">
            <span className={f.isPrimaryKey ? "text-blue-800 font-bold flex gap-1" : f.isForeignKey ? "text-red-600 flex gap-1" : "text-gray-700"}>
              {f.isPrimaryKey && <span>ðŸ”‘</span>}
              {f.isForeignKey && <span>ðŸ”—</span>}
              {f.name}
            </span>
            <span className="text-gray-500">{f.value}</span>
          </div>
        ))}
      </div>
    </div>
  );

  // Robust safety: Only create nodes/edges when source data exists
  const nodes: Node[] = [
    {
      id: "case",
      position: { x: 200, y: 100 },
      data: {
        label: renderEntityCard(
          "Case",
          "linear-gradient(90deg, #EF4444, #f87171)",
          [
            { name: "Case ID", value: relation?.case?.caseId || "", isPrimaryKey: true },
            { name: "Date", value: relation?.case?.date || "" },
            { name: "Status", value: relation?.case?.status || "" },
            { name: "Decision", value: relation?.case?.decision || "" },
            { name: "Type", value: relation?.case?.type || "" }
          ]
        ),
      },
      style: { width: 200, height: 145 }
    },
    {
      id: "profile",
      position: { x: 550, y: 120 },
      data: {
        label: renderEntityCard(
          "Profile",
          "linear-gradient(90deg, #3B82F6, #60a5fa)",
          [
            { name: "Profile ID", value: relation?.profile?.id || "", isPrimaryKey: true },
            { name: "Name", value: relation?.profile?.name || "" },
            { name: "MMN", value: relation?.profile?.mmn || "" },
            { name: "Gender", value: relation?.profile?.gender || "" },
            { name: "DOB", value: relation?.profile?.dob || "" },
            { name: "Case ID", value: relation?.case?.caseId || "", isForeignKey: true },
          ]
        )
      },
      style: { width: 200, height: 170 }
    },
    {
      id: "txn",
      position: { x: 50, y: 320 },
      data: {
        label: renderEntityCard(
          "Transaction Detail",
          "linear-gradient(90deg, #8B5CF6, #a78bfa)",
          [
            { name: "Trans ID", value: relation?.transaction?.id || "", isPrimaryKey: true },
            { name: "Type", value: relation?.transaction?.type || "" },
            { name: "Amount", value: relation?.transaction?.amount || "" },
            { name: "Frequency", value: relation?.transaction?.frequency || "" },
            { name: "Recent Date", value: relation?.transaction?.recentDate || "" },
            { name: "Beneficiary", value: relation?.beneficiary?.name || "" },
            { name: "Account", value: relation?.transaction?.account || "" },
            { name: "From Account", value: relation?.transaction?.fromAccount || "" },
            { name: "Case ID", value: relation?.case?.caseId || "", isForeignKey: true },
          ]
        )
      },
      style: { width: 220, height: 215 }
    },
    // Rule node (optional, render only if present)
    ...(relation?.rule
      ? [
          {
            id: "rule",
            position: { x: 120, y: 580 },
            data: {
              label: renderEntityCard(
                "Rule",
                "linear-gradient(90deg, #10B981, #6ee7b7)",
                [
                  { name: "Rule ID", value: relation?.rule?.id || "", isPrimaryKey: true },
                  { name: "Rule Name", value: relation?.rule?.name || "" },
                  { name: "Policy", value: relation?.rule?.policy || "" },
                  { name: "Case ID", value: relation?.case?.caseId || "", isForeignKey: true }
                ]
              )
            },
            style: { width: 180, height: 140 }
          }
        ]
      : []),
    {
      id: "bene",
      position: { x: 380, y: 420 },
      data: {
        label: renderEntityCard(
          "Beneficiary Detail",
          "linear-gradient(90deg, #F59E0B, #fbbf24)",
          [
            { name: "Bene ID", value: relation?.beneficiary?.id || "", isPrimaryKey: true },
            { name: "Name", value: relation?.beneficiary?.name || "" },
            { name: "Amount", value: relation?.beneficiary?.amount || "" },
            { name: "Gender", value: relation?.beneficiary?.gender || "" },
            { name: "Added Date", value: relation?.beneficiary?.addedDate || "" },
            { name: "Trans ID", value: relation?.transaction?.id || "", isForeignKey: true }
          ]
        )
      },
      style: { width: 200, height: 155 }
    },
    // Last 5 Activity (render if present)
    ...(Array.isArray(relation?.last5Activity)
      ? [
          {
            id: "activity",
            position: { x: 620, y: 350 },
            data: {
              label: (
                <div className="rounded-xl shadow-lg border border-gray-200 bg-white" style={{ width: 220 }}>
                  <div className="rounded-t-xl p-2" style={{ background: "linear-gradient(90deg, #EC4899, #f472b6)" }}>
                    <span className="font-semibold text-white text-base mx-auto">Last 5 Activity</span>
                  </div>
                  <div className="overflow-x-auto p-2">
                    <table className="w-full text-xs">
                      <thead>
                        <tr>
                          <th className="text-left font-bold text-slate-700">Event ID</th>
                          <th className="text-left font-bold text-slate-700">Date</th>
                          <th className="text-left font-bold text-slate-700">Type</th>
                        </tr>
                      </thead>
                      <tbody>
                        {relation.last5Activity.map((a, idx) => (
                          <tr key={a.id} className={idx % 2 === 0 ? "bg-gray-50" : ""}>
                            <td className="text-blue-900 font-semibold">{a.id}</td>
                            <td className="text-slate-700">{a.date}</td>
                            <td className="text-gray-600">{a.type && a.type.length > 12 ? a.type.slice(0, 12) + "..." : a.type || ""}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )
            },
            style: { width: 220, height: 180 }
          }
        ]
      : [])
  ];

  const edges: Edge[] = [
    { id: "e1", source: "case", target: "profile", animated: true, style: { stroke: "#6366f1", strokeWidth: 2 } },
    { id: "e2", source: "case", target: "txn", animated: true, style: { stroke: "#6366f1", strokeWidth: 2 } },
    ...(relation?.rule
      ? [{ id: "e3", source: "case", target: "rule", animated: true, style: { stroke: "#6366f1", strokeWidth: 2 } }]
      : []),
    { id: "e4", source: "txn", target: "bene", animated: true, style: { stroke: "#6366f1", strokeWidth: 2 } },
    { id: "e5", source: "profile", target: "activity", animated: true, style: { stroke: "#6366f1", strokeWidth: 2 } }
  ];

  const onInit = useCallback(instance => {
    instance.fitView({ padding: 0.15 });
  }, []);

  // You can add zoom state management if needed, code below implements static buttons for illustration.
  return (
    <div className={`rounded-xl shadow-lg border border-gray-200 overflow-hidden transition-all duration-300 bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 ${isFullscreen ? "fixed inset-4 z-50 bg-white" : ""}`}>
      {/* Header */}
      <div className="bg-gradient-to-r from-slate-50 to-orange-50 px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          {/* Case Number */}
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-orange-200 to-orange-300 rounded-lg">
              <FileText className="w-5 h-5 text-white" />
            </div>
            <div>
              <h2 className="text-lg font-semibold text-gray-900">
                Case #{relation?.case?.caseId || "XXXXXX"}
              </h2>
              <p className="text-sm text-gray-600">Case Relation Diagram</p>
            </div>
          </div>
          {/* Controls */}
          <div className="flex items-center space-x-2">
            <div className="flex items-center space-x-1 bg-white rounded-lg border border-gray-200 p-1">
              <button
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-md transition-all duration-200"
                title="Zoom Out"
                // Add zoom out logic if needed
              >
                <ZoomOut className="w-4 h-4" />
              </button>
              <span className="px-2 text-sm font-medium text-gray-700 min-w-[3rem] text-center">100%</span>
              <button
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-md transition-all duration-200"
                title="Zoom In"
                // Add zoom in logic if needed
              >
                <ZoomIn className="w-4 h-4" />
              </button>
            </div>
            <button
              className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 hover:scale-105"
              title={isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}
              onClick={onToggleFullscreen}
            >
              {isFullscreen ? <Minimize2 className="w-5 h-5" /> : <Maximize2 className="w-5 h-5" />}
            </button>
          </div>
        </div>
      </div>
      {/* Diagram */}
      <div style={{ minHeight: 600, background: "transparent" }}>
        <ReactFlow nodes={nodes} edges={edges} onInit={onInit} fitView>
          <Background color="#f8fafc" gap={25} />
          <Controls showInteractive={false} />
        </ReactFlow>
      </div>
    </div>
  );
}
