"use client";
import React, { useCallback, useRef, useState } from "react";
import ReactFlow, {
  Background,
  Controls,
  Node,
  Edge,
  useReactFlow,
  ReactFlowProvider,
} from "reactflow";
import { ZoomIn, ZoomOut, Maximize2, Minimize2, FileText } from "lucide-react";
import "reactflow/dist/style.css";

function DiagramContent({ relation }: { relation: any }) {
  const [zoom, setZoom] = useState(1);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const instance = useReactFlow();

  // Define nodes
  const nodes: Node[] = [
    {
      id: "case",
      position: { x: 100, y: 40 },
      data: {
        label: (
          <div className="rounded-lg p-3 bg-gradient-to-r from-red-500 to-red-400 text-white shadow-md">
            <div className="font-bold text-base">Case</div>
            <div className="text-xs mt-1">
              Case ID: {relation.case?.caseId || "CASE-001"}
            </div>
            <div className="text-xs">Date: {relation.case?.date}</div>
            <div className="text-xs">Status: {relation.case?.status}</div>
          </div>
        ),
      },
      style: { width: 200, height: 120 },
    },
    {
      id: "profile",
      position: { x: 420, y: 20 },
      data: {
        label: (
          <div className="rounded-lg p-3 bg-gradient-to-r from-blue-500 to-blue-400 text-white shadow-md">
            <div className="font-bold text-base">Profile</div>
            <div className="text-xs mt-1">{relation.profile?.name}</div>
            <div className="text-xs">{relation.profile?.id}</div>
          </div>
        ),
      },
      style: { width: 200, height: 120 },
    },
    {
      id: "txn",
      position: { x: 40, y: 220 },
      data: {
        label: (
          <div className="rounded-lg p-3 bg-gradient-to-r from-indigo-500 to-indigo-400 text-white shadow-md">
            <div className="font-bold text-base">Transaction Detail</div>
            <div className="text-xs mt-1">
              {relation.transaction?.type} - {relation.transaction?.id}
            </div>
            <div className="text-xs">{relation.transaction?.amount}</div>
          </div>
        ),
      },
      style: { width: 220, height: 120 },
    },
    {
      id: "bene",
      position: { x: 320, y: 220 },
      data: {
        label: (
          <div className="rounded-lg p-3 bg-gradient-to-r from-yellow-400 to-yellow-300 text-white shadow-md">
            <div className="font-bold text-base">Beneficiary Detail</div>
            <div className="text-xs mt-1">
              {relation.beneficiary?.name || "ABC Corp"}
            </div>
            <div className="text-xs">{relation.beneficiary?.amount}</div>
          </div>
        ),
      },
      style: { width: 200, height: 100 },
    },
    {
      id: "activity",
      position: { x: 560, y: 220 },
      data: {
        label: (
          <div className="rounded-lg p-3 bg-gradient-to-r from-pink-500 to-pink-400 text-white shadow-md">
            <div className="font-bold text-base">Last 5 Activity</div>
            <div className="text-xs mt-1">
              {relation.last5Activity
                ? relation.last5Activity.map((a: any) => a.id).join(", ")
                : "No Activity"}
            </div>
          </div>
        ),
      },
      style: { width: 240, height: 120 },
    },
  ];

  const edges: Edge[] = [
    { id: "e1", source: "case", target: "profile", animated: true },
    { id: "e2", source: "case", target: "txn", animated: true },
    { id: "e3", source: "txn", target: "bene", animated: true },
    { id: "e4", source: "profile", target: "activity", animated: true },
    { id: "e5", source: "case", target: "bene", animated: true },
  ];

  const handleZoomIn = () => {
    const newZoom = Math.min(zoom + 0.2, 2);
    setZoom(newZoom);
    instance.setZoom(newZoom);
  };

  const handleZoomOut = () => {
    const newZoom = Math.max(zoom - 0.2, 0.5);
    setZoom(newZoom);
    instance.setZoom(newZoom);
  };

  const toggleFullscreen = () => setIsFullscreen((f) => !f);

  const onInit = useCallback(
    (inst: any) => {
      inst.fitView({ padding: 0.2 });
    },
    []
  );

  return (
    <div
      className={`rounded-xl shadow-lg border border-gray-200 overflow-hidden transition-all duration-300 ${
        isFullscreen
          ? "fixed inset-4 z-50 bg-white"
          : "h-[600px] bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50"
      }`}
    >
      {/* Header */}
      <div className="bg-gradient-to-r from-slate-50 to-orange-50 px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          {/* Left Section */}
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-orange-300 to-orange-400 rounded-lg">
              <FileText className="w-5 h-5 text-white" />
            </div>
            <div>
              <h2 className="text-lg font-semibold text-gray-900">
                Case #{relation.case?.caseId || "223456"}
              </h2>
              <p className="text-sm text-gray-600">Case Relation Diagram</p>
            </div>
          </div>

          {/* Right Controls */}
          <div className="flex items-center space-x-2">
            <div className="flex items-center space-x-1 bg-white rounded-lg border border-gray-200 p-1">
              <button
                onClick={handleZoomOut}
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-md transition-all duration-200"
                title="Zoom Out"
              >
                <ZoomOut className="w-4 h-4" />
              </button>
              <span className="px-2 text-sm font-medium text-gray-700 min-w-[3rem] text-center">
                {Math.round(zoom * 100)}%
              </span>
              <button
                onClick={handleZoomIn}
                className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-md transition-all duration-200"
                title="Zoom In"
              >
                <ZoomIn className="w-4 h-4" />
              </button>
            </div>
            <button
              onClick={toggleFullscreen}
              className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 hover:scale-105"
              title={isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}
            >
              {isFullscreen ? (
                <Minimize2 className="w-5 h-5" />
              ) : (
                <Maximize2 className="w-5 h-5" />
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Diagram Section */}
      <div ref={reactFlowWrapper} className="relative flex-1 overflow-hidden">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onInit={onInit}
          fitView
          nodesDraggable
          nodesConnectable={false}
          zoomOnScroll={false}
          zoomOnPinch={false}
          minZoom={0.5}
          maxZoom={2}
          className="w-full h-full"
        >
          <Background color="#f3f4f6" gap={20} />
          <Controls />
        </ReactFlow>
      </div>
    </div>
  );
}

// Wrap with ReactFlowProvider
export default function CaseRelationDiagram(props: any) {
  return (
    <ReactFlowProvider>
      <DiagramContent {...props} />
    </ReactFlowProvider>
  );
}
