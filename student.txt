import axios from "axios";

const BASE_URL = "http://localhost:8080/documents";

const getAllDocuments = () => axios.get(BASE_URL);

const getDocumentById = (id) => axios.get(`${BASE_URL}/${id}`);

const createDocument = (docData, file) => {
  // Use FormData to send JSON + File together in multipart/form-data
  const formData = new FormData();
  formData.append("file", file);
  formData.append(
    "document",
    new Blob([JSON.stringify(docData)], { type: "application/json" })
  );

  return axios.post(BASE_URL, formData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};

const updateDocument = (id, docData) =>
  axios.put(`${BASE_URL}/${id}`, docData);

const deleteDocument = (id) => axios.delete(`${BASE_URL}/${id}`);

export default {
  getAllDocuments,
  getDocumentById,
  createDocument,
  updateDocument,
  deleteDocument,
};

///


import React, { useState, useEffect } from "react";
import documentService from "./serviceDocuments";
import "./DocumentManager.css";

function DocumentManager() {
  const [documents, setDocuments] = useState([]);
  const [editingIdx, setEditingIdx] = useState(-1);
  const [editData, setEditData] = useState({});
  const [editFile, setEditFile] = useState(null);
  const [creating, setCreating] = useState(false);
  const [createData, setCreateData] = useState({
    applicationId: "",
    documentName: "",
    documentType: "",
    fileUrl: "",
  });
  const [createFile, setCreateFile] = useState(null);

  useEffect(() => {
    fetchDocuments();
  }, []);

  const fetchDocuments = () => {
    documentService
      .getAllDocuments()
      .then((res) => setDocuments(res.data))
      .catch((err) => console.error("Error fetching documents", err));
  };

  const handleEdit = (idx) => {
    setEditingIdx(idx);
    setEditData({ ...documents[idx] });
    setEditFile(null);
  };

  const handleEditChange = (e) => {
    const { name, value } = e.target;
    setEditData((prev) => ({ ...prev, [name]: value }));
  };

  const handleEditFileChange = (e) => {
    if (e.target.files.length > 0) {
      setEditFile(e.target.files[0]);
    }
  };

  const handleEditSave = (idx) => {
    const doc = documents[idx];
    // If a new file was selected, upload it separately or enhance backend for update with file
    // For now, update without file change
    documentService
      .updateDocument(doc.id, editData)
      .then((res) => {
        const updatedDocs = [...documents];
        updatedDocs[idx] = res.data;
        setDocuments(updatedDocs);
        setEditingIdx(-1);
      })
      .catch((err) => console.error("Error updating document:", err));
  };

  const handleDelete = (idx) => {
    const doc = documents[idx];
    documentService
      .deleteDocument(doc.id)
      .then(() => {
        const updatedDocs = [...documents];
        updatedDocs.splice(idx, 1);
        setDocuments(updatedDocs);
      })
      .catch((err) => console.error("Error deleting document:", err));
  };

  const handleCreateOpen = () => {
    setCreating(true);
    setCreateData({
      applicationId: "",
      documentName: "",
      documentType: "",
      fileUrl: "",
    });
    setCreateFile(null);
  };

  const handleCreateChange = (e) => {
    const { name, value } = e.target;
    setCreateData((prev) => ({ ...prev, [name]: value }));
  };

  const handleCreateFileChange = (e) => {
    if (e.target.files.length > 0) {
      setCreateFile(e.target.files[0]);
    }
  };

  const handleCreateSave = () => {
    if (!createFile) {
      alert("Please select a file to upload");
      return;
    }
    documentService
      .createDocument(createData, createFile)
      .then((res) => {
        setDocuments([res.data, ...documents]);
        setCreating(false);
      })
      .catch((err) => console.error("Error creating document:", err));
  };

  return (
    <div className="document-manager-container">
      <h2>Document Manager</h2>
      <button className="btn btn-create" onClick={handleCreateOpen}>
        + Add Document
      </button>
      <table className="document-table">
        <thead>
          <tr>
            <th>Application ID</th>
            <th>Document Name</th>
            <th>Document Type</th>
            <th>File URL</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {documents.map((doc, idx) => (
            <tr key={doc.id}>
              {editingIdx === idx ? (
                <>
                  <td>
                    <input
                      name="applicationId"
                      value={editData.applicationId}
                      onChange={handleEditChange}
                    />
                  </td>
                  <td>
                    <input
                      name="documentName"
                      value={editData.documentName}
                      onChange={handleEditChange}
                    />
                  </td>
                  <td>
                    <input
                      name="documentType"
                      value={editData.documentType}
                      onChange={handleEditChange}
                    />
                  </td>
                  <td>
                    <input
                      name="fileUrl"
                      value={editData.fileUrl}
                      onChange={handleEditChange}
                      readOnly
                    />
                    <input type="file" onChange={handleEditFileChange} />
                  </td>
                  <td>
                    <button onClick={() => handleEditSave(idx)}>✔ Save</button>
                    <button onClick={() => setEditingIdx(-1)}>✖ Cancel</button>
                  </td>
                </>
              ) : (
                <>
                  <td>{doc.applicationId}</td>
                  <td>{doc.documentName}</td>
                  <td>{doc.documentType}</td>
                  <td>
                    <a href={doc.fileUrl} target="_blank" rel="noreferrer">
                      View
                    </a>
                  </td>
                  <td>
                    <button onClick={() => handleEdit(idx)}>Edit</button>
                    <button onClick={() => handleDelete(idx)}>Delete</button>
                  </td>
                </>
              )}
            </tr>
          ))}
        </tbody>
      </table>
      {creating && (
        <div className="modal-backdrop">
          <div className="modal-box">
            <h3>Add Document</h3>
            <form onSubmit={(e) => e.preventDefault()}>
              <label>
                Application ID:
                <input
                  name="applicationId"
                  value={createData.applicationId}
                  onChange={handleCreateChange}
                />
              </label>
              <label>
                Document Name:
                <input
                  name="documentName"
                  value={createData.documentName}
                  onChange={handleCreateChange}
                />
              </label>
              <label>
                Document Type:
                <input
                  name="documentType"
                  value={createData.documentType}
                  onChange={handleCreateChange}
                />
              </label>
              <label>
                File:
                <input type="file" onChange={handleCreateFileChange} />
              </label>
              <div>
                <button onClick={handleCreateSave}>Create</button>
                <button onClick={() => setCreating(false)}>Cancel</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default DocumentManager;
