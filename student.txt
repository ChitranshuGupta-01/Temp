"use client";
import React, { useState } from "react";
import {
  FileText,
  AlertTriangle,
  User,
  Calendar,
  X,
  Edit,
  Trash2,
  Download,
} from "lucide-react";

export default function CaseDetails({ caseData }: { caseData: any }) {
  const [notes, setNotes] = useState<{ id: number; text: string }[]>([]);
  const [showNoteInput, setShowNoteInput] = useState(false);
  const [noteText, setNoteText] = useState("");
  const [editingNoteId, setEditingNoteId] = useState<number | null>(null);
  const [status, setStatus] = useState(caseData.status || "Active");
  const [showStatusDropdown, setShowStatusDropdown] = useState(false);

  // ✅ Utility color functions
  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case "active":
        return "bg-gradient-to-r from-green-100 to-emerald-100 text-green-800";
      case "under review":
        return "bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800";
      case "closed":
        return "bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800";
      default:
        return "bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-800";
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority?.toLowerCase()) {
      case "high":
        return "bg-gradient-to-r from-red-100 to-pink-100 text-red-800";
      case "medium":
        return "bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800";
      case "low":
        return "bg-gradient-to-r from-green-100 to-emerald-100 text-green-800";
      default:
        return "bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800";
    }
  };

  const getRiskScoreColor = (score: number) => {
    if (score >= 80) return "text-red-600 bg-red-50";
    if (score >= 60) return "text-orange-600 bg-orange-50";
    if (score >= 40) return "text-yellow-600 bg-yellow-50";
    return "text-green-600 bg-green-50";
  };

  // ✅ Add or Update Note
  const handleSaveNote = () => {
    if (noteText.trim() === "") return;
    if (editingNoteId !== null) {
      setNotes((prev) =>
        prev.map((note) =>
          note.id === editingNoteId ? { ...note, text: noteText } : note
        )
      );
      setEditingNoteId(null);
    } else {
      setNotes([...notes, { id: Date.now(), text: noteText }]);
    }
    setNoteText("");
    setShowNoteInput(false);
  };

  // ✅ Edit Note
  const handleEditNote = (id: number, text: string) => {
    setEditingNoteId(id);
    setNoteText(text);
    setShowNoteInput(true);
  };

  // ✅ Delete Note
  const handleDeleteNote = (id: number) => {
    setNotes(notes.filter((note) => note.id !== id));
  };

  // ✅ Update Status
  const handleStatusChange = (newStatus: string) => {
    setStatus(newStatus);
    setShowStatusDropdown(false);
  };

  // ✅ Generate Report
  const handleGenerateReport = () => {
    const reportContent = `
--- Case Report ---
Case ID: ${caseData.id}
Title: ${caseData.title}
Status: ${status}
Priority: ${caseData.priority}
Assignee: ${caseData.assignee}
Profile: ${caseData.profile?.name} (${caseData.profile?.id})
Created: ${caseData.created}
Updated: ${caseData.updated}
Risk Score: ${caseData.riskScore}/100
Description: ${caseData.description}

Notes:
${
  notes.length > 0
    ? notes.map((n, i) => `${i + 1}. ${n.text}`).join("\n")
    : "No notes yet."
}
-------------------
    `;

    const blob = new Blob([reportContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `Case_${caseData.id}_Report.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
      {/* ---------- HEADER ---------- */}
      <div className="px-6 py-5 border-b border-gray-100 flex flex-col sm:flex-row items-start sm:items-center justify-between bg-white">
        <div className="flex items-center space-x-4">
          <div className="p-3 bg-gradient-to-r from-orange-200 to-orange-300 rounded-xl shadow-md">
            <FileText className="w-6 h-6 text-white" />
          </div>
          <div>
            <h2 className="text-xl font-bold text-gray-900">
              Case #{caseData.id}
            </h2>
            <p className="text-sm text-gray-600">{caseData.title}</p>
          </div>
        </div>

        <div className="flex flex-wrap items-center space-x-2 mt-3 sm:mt-0">
          <span
            className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium shadow-sm ${getStatusColor(
              status
            )}`}
          >
            {status}
          </span>
          <span
            className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium shadow-sm ${getPriorityColor(
              caseData.priority
            )}`}
          >
            {caseData.priority} Priority
          </span>
        </div>
      </div>

      {/* ---------- BODY ---------- */}
      <div className="p-6 bg-gradient-to-r from-slate-50 to-blue-50">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Left: Case Details */}
          <div className="lg:col-span-2">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">
              Case Details
            </h3>
            <p className="text-gray-700 mb-4">{caseData.description}</p>

            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center space-x-2">
                <User className="w-4 h-4 text-gray-500" />
                <span className="text-gray-600">
                  Assignee:{" "}
                  <span className="font-medium text-gray-900">
                    {caseData.assignee}
                  </span>
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="w-4 h-4 text-gray-500" />
                <span className="text-gray-600">
                  Created:{" "}
                  <span className="font-medium text-gray-900">
                    {caseData.created}
                  </span>
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <FileText className="w-4 h-4 text-gray-500" />
                <span className="text-gray-600">
                  Profile:{" "}
                  <span className="font-medium text-gray-900">
                    {caseData.profile?.name} ({caseData.profile?.id})
                  </span>
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="w-4 h-4 text-gray-500" />
                <span className="text-gray-600">
                  Updated:{" "}
                  <span className="font-medium text-gray-900">
                    {caseData.updated}
                  </span>
                </span>
              </div>
            </div>

            {/* Notes Section */}
            {notes.length > 0 && (
              <div className="mt-6 bg-white rounded-lg border border-gray-200 p-4">
                <h4 className="text-sm font-semibold text-gray-800 mb-2">
                  Notes
                </h4>
                <ul className="space-y-2">
                  {notes.map((note) => (
                    <li
                      key={note.id}
                      className="flex justify-between items-start border border-gray-100 rounded-md p-2 bg-gray-50"
                    >
                      <p className="text-sm text-gray-800">{note.text}</p>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEditNote(note.id, note.text)}
                          className="text-blue-600 hover:text-blue-800"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDeleteNote(note.id)}
                          className="text-red-600 hover:text-red-800"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          {/* Middle: Risk Score */}
          <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6">
            <div className="flex items-center space-x-3">
              <AlertTriangle className="w-6 h-6 text-orange-600" />
              <div>
                <p className="text-sm text-gray-600">Risk Score</p>
                <div className="flex items-center space-x-2">
                  <span
                    className={`text-2xl font-bold px-3 py-1 rounded-lg ${getRiskScoreColor(
                      caseData.riskScore
                    )}`}
                  >
                    {caseData.riskScore}
                  </span>
                  <span className="text-sm text-gray-500">/100</span>
                </div>
              </div>
            </div>
          </div>

          {/* Right: Quick Actions */}
          <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 relative">
            <h4 className="text-sm font-semibold text-gray-900 mb-3">
              Quick Actions
            </h4>
            <div className="space-y-2">
              <button
                onClick={() => setShowNoteInput(!showNoteInput)}
                className="w-full text-left px-3 py-2 text-sm text-purple-600 hover:bg-purple-50 rounded-lg transition-colors duration-200"
              >
                Add / Edit Note
              </button>
              <button
                onClick={() => setShowStatusDropdown(!showStatusDropdown)}
                className="w-full text-left px-3 py-2 text-sm text-purple-600 hover:bg-purple-50 rounded-lg transition-colors duration-200"
              >
                Update Status
              </button>
              <button
                onClick={handleGenerateReport}
                className="w-full text-left px-3 py-2 text-sm text-purple-600 hover:bg-purple-50 rounded-lg transition-colors duration-200"
              >
                Generate Report
              </button>
            </div>

            {/* Note Input */}
            {showNoteInput && (
              <div className="absolute top-6 left-0 right-0 bg-white border border-gray-300 shadow-lg rounded-lg p-4 z-20">
                <div className="flex justify-between items-center mb-2">
                  <h4 className="text-sm font-semibold">
                    {editingNoteId ? "Edit Note" : "Add Note"}
                  </h4>
                  <button onClick={() => setShowNoteInput(false)}>
                    <X className="w-4 h-4 text-gray-500" />
                  </button>
                </div>
                <textarea
                  value={noteText}
                  onChange={(e) => setNoteText(e.target.value)}
                  rows={3}
                  className="w-full border border-gray-300 rounded-lg p-2 text-sm focus:outline-none focus:ring-1 focus:ring-purple-400"
                  placeholder="Type your note..."
                />
                <div className="mt-2 text-right">
                  <button
                    onClick={handleSaveNote}
                    className="bg-purple-600 text-white px-3 py-1 rounded-lg text-sm hover:bg-purple-700"
                  >
                    {editingNoteId ? "Update" : "Save"}
                  </button>
                </div>
              </div>
            )}

            {/* Status Dropdown */}
            {showStatusDropdown && (
              <div className="absolute top-20 left-0 right-0 bg-white border border-gray-300 shadow-lg rounded-lg p-3 z-20">
                {["Active", "Under Review", "Closed"].map((s) => (
                  <button
                    key={s}
                    onClick={() => handleStatusChange(s)}
                    className="w-full text-left px-3 py-2 text-sm rounded-md hover:bg-gray-100"
                  >
                    {s}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
