import { DBSQLClient } from '@databricks/sql';
import {Agent, ProxyAgent, setGlobalDispatcher} from 'undici';
import { HttpsProxyAgent } from "https-proxy-agent";
import { getDbrClientId, getDbrClientSecret, getDbrHost, getDbrLoginUrl, getDbrScope, getDbrWarehousePath } from './config';
import config from './config';



//const proxyUrl = 'http://127.0.0.1:9000';
const proxyUrl = 'http://10.239.9.190:443';
const agent = new ProxyAgent(proxyUrl);

const DBR_CLIENT_ID = getDbrClientId();
const DBR_CLIENT_SECRET = getDbrClientSecret();
const DBR_SCOPE = getDbrScope();
const DBR_HOST = getDbrHost();
const DBR_LOGIN_URL = getDbrLoginUrl();
const DBR_WAREHOURSE_PATH = getDbrWarehousePath();

if (!DBR_CLIENT_ID || !DBR_CLIENT_SECRET || !DBR_SCOPE || !DBR_HOST || !DBR_LOGIN_URL) {
  throw new Error(
    "Missing required environment variables: DBR_CLIENT_ID, DBR_CLIENT_SECRET, DBR_SCOPE, DBR_HOST"
  );
}

// Databricks Client
class DatabricksClient {

  private token: string | null = null;
  private connection: DBSQLClient | null = null;


  // Fetch an access token from Azure AD
  private async getAccessToken(): Promise<string> {
    if (this.token) {
      return this.token;
    }
    try {
      console.log("TEST");
      console.log(getDbrLoginUrl());
      console.log(DBR_CLIENT_ID);
      console.log(DBR_CLIENT_SECRET);
      console.log(DBR_SCOPE);
      const response:any = await fetch(getDbrLoginUrl(), {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        dispatcher: agent,
        dispatcher:mTLS,
        body: new URLSearchParams({
          client_id: DBR_CLIENT_ID,
          client_secret: DBR_CLIENT_SECRET,
          scope: DBR_SCOPE,
          grant_type: "client_credentials",
        }).toString()
      });
      console.log("TEST3");

      console.log(response);
      var data1 = await response;
      console.log("TEST2");
      console.log(data1);
            if (!response.ok) {
        const errorData = await response.json();
        throw new Error("Failed to fetch access token");
      }
      console.log(response);
 
      const data = await response.json();
      this.token = data.access_token;
      return this.token;
    } catch (error) {
      console.log(error);
      throw new Error("Failed to fetch access token");
    }
  }

  // Initialize the connection to Databricks
  private async connect(): Promise<any> {

    if (this.connection) {
      return this.connection;
    }

    try {
      const token = await this.getAccessToken();
      this.connection = new DBSQLClient();
      const connectOptions:any = {
        token: token,
        host: DBR_HOST,
        path: DBR_WAREHOURSE_PATH
      };
          
      return await this.connection.connect(connectOptions);
    } catch (error) {
      console.error("Error connecting to Databricks:", error);
      throw new Error("Failed to connect to Databricks");
    }
  }

  // Run a SQL query
  public async runQuery(sql: string): Promise<any> {

    try {

      const result = await this.connect().then(async (client) => {
        let session = await client.openSession();
        let queryOperation = await session.executeStatement(`SELECT
            event_type, agent_type, true_ip_geo, 
            event_datetime, risk_rating, policy, 
            transaction_amount, transaction_currency, transaction_id, 
            account_number, account_login, transaction_amount_usd, 
            condition_attrib_3,customer_event_type, agent_model, reason_code
            FROM soar.tmx_parsed_silver
          where account_login=6525224447 and 
            event_datetime >= current_date() - interval 60 days`, {
          runAsync: true,
          maxRows: 10000, // This option enables the direct results feature.
        });
        var results = await queryOperation.fetchAll();
        await queryOperation.close();
        await session.close();
        await client.close();
        return results;
      });
      result.sort((a:bigint, b:bigint) => new Date(b["event_datetime"]).getTime() - new Date(a["event_datetime"]).getTime());
      return result;
    } catch (error) {
      console.error("---Error running query:----", error);
      throw new Error("Failed to run query");
    }
  }

  public async getLoginId(accNo) {

  }

  public async getAccountNumber(LogId) {

  }

  // Close the connection
  public async close(): Promise<void> {
    if (this.connection) {
      await this.connection.close();
      this.connection = null;
    }
  }
}

// Export the Databricks client
export default DatabricksClient;
