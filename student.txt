package com.scb.creditcardorigination.xfeature.controller;

import com.scb.creditcardorigination.xfeature.model.Document;
import com.scb.creditcardorigination.xfeature.service.DocumentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/documents")
public class DocumentController {

    @Autowired
    private DocumentService documentService;

    // ✅ Get all documents
    @GetMapping
    public List<Document> getAllDocuments() {
        return documentService.getAllDocuments();
    }

    // ✅ Get document by ID (metadata only)
    @GetMapping("/{id}")
    public Document getDocumentById(@PathVariable Integer id) {
        return documentService.getDocumentById(id);
    }

    // ✅ Create new document with file
    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public Document createDocument(@RequestPart("document") Document document,
                                   @RequestPart("file") MultipartFile file) throws IOException {
        String fileUrl = documentService.storeFile(file); // generate file URL
        document.setFileUrl(fileUrl);
        return documentService.createDocument(document);
    }

    // ✅ Update document metadata (not file)
    @PutMapping("/{id}")
    public Document updateDocument(@PathVariable Integer id, @RequestBody Document document) {
        document.setId(id);
        return documentService.updateDocument(document);
    }

    // ✅ Delete document
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteDocument(@PathVariable Integer id) {
        documentService.deleteDocument(id);
        return ResponseEntity.noContent().build();
    }

    // ✅ Serve file so frontend can "View"
    @GetMapping("/files/{filename:.+}")
    public ResponseEntity<Resource> getFile(@PathVariable String filename) throws IOException {
        Resource file = documentService.loadFile(filename);

        String contentType = Files.probeContentType(file.getFile().toPath());
        if (contentType == null) {
            contentType = "application/octet-stream";
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + file.getFilename() + "\"")
                .body(file);
    }
}


///////////////////



package com.scb.creditcardorigination.xfeature.service;

import com.scb.creditcardorigination.xfeature.model.Document;
import com.scb.creditcardorigination.xfeature.repository.DocumentRepository;
import com.scb.creditcardorigination.xfeature.exceptionHandling.DocumentNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.*;
import java.util.List;
import java.util.UUID;

@Service
public class DocumentService {

    @Autowired
    private DocumentRepository repository;

    private final Path uploadPath = Paths.get("uploads");

    public List<Document> getAllDocuments() {
        return repository.findAll();
    }

    public Document getDocumentById(Integer id) {
        return repository.findById(id)
                .orElseThrow(() -> new DocumentNotFoundException("Document not found"));
    }

    public Document createDocument(Document doc) {
        return repository.save(doc);
    }

    public Document updateDocument(Integer id, Document doc) {
        Document existing = repository.findById(id)
                .orElseThrow(() -> new DocumentNotFoundException("Document not found"));

        existing.setApplicationId(doc.getApplicationId());
        existing.setDocumentName(doc.getDocumentName());
        existing.setDocumentType(doc.getDocumentType());
        existing.setFileUrl(doc.getFileUrl());

        return repository.save(existing);
    }

    public void deleteDocument(Integer id) {
        repository.deleteById(id);
    }

    // ✅ Store uploaded file
    public String storeFile(MultipartFile file) throws IOException {
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        String filename = UUID.randomUUID() + "_" + file.getOriginalFilename();
        Path filePath = uploadPath.resolve(filename);
        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

        // Return accessible URL for frontend
        return "http://localhost:8080/documents/files/" + filename;
    }

    // ✅ Load file for download/view
    public Resource loadFile(String filename) throws MalformedURLException {
        Path filePath = uploadPath.resolve(filename);
        Resource resource = new UrlResource(filePath.toUri());

        if (resource.exists() && resource.isReadable()) {
            return resource;
        } else {
            throw new RuntimeException("File not found or not readable: " + filename);
        }
    }
}
