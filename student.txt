import React from "react";
import { render, screen, fireEvent, act } from "@testing-library/react";
import "@testing-library/jest-dom";
import CaseDetails from "@/components/CaseDetails";
import { useRouter } from "next/navigation";

// ✅ Mock router
jest.mock("next/navigation", () => ({
  useRouter: jest.fn(),
}));

// ✅ Mock URL and Blob for "Generate Report"
global.URL.createObjectURL = jest.fn(() => "mock-url");
global.URL.revokeObjectURL = jest.fn();
global.Blob = function (content: any, options: any) {
  return { content, options };
};
document.createElement = jest.fn(() => ({
  href: "",
  download: "",
  click: jest.fn(),
}));

describe("CaseDetails Component", () => {
  const push = jest.fn();
  const back = jest.fn();
  (useRouter as jest.Mock).mockReturnValue({ push, back });

  const mockCaseData = {
    id: 101,
    title: "Payment Fraud Investigation",
    status: "Active",
    priority: "High",
    assignee: "John Doe",
    profile: { name: "Jane Smith", id: "P123" },
    created: "2025-10-01",
    updated: "2025-10-05",
    riskScore: 75,
    description: "A suspected payment fraud case under review.",
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders case details correctly", () => {
    render(<CaseDetails caseData={mockCaseData} />);

    expect(screen.getByText(/Case #101/i)).toBeInTheDocument();
    expect(screen.getByText(/Payment Fraud Investigation/i)).toBeInTheDocument();
    expect(screen.getByText(/High Priority/i)).toBeInTheDocument();
    expect(screen.getByText(/A suspected payment fraud/i)).toBeInTheDocument();
    expect(screen.getByText(/Risk Score/i)).toBeInTheDocument();
    expect(screen.getByText("75")).toBeInTheDocument();
  });

  it("navigates back when Go Back button is clicked", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    const backButton = screen.getByTitle(/go back/i);
    fireEvent.click(backButton);
    expect(back).toHaveBeenCalled();
  });

  it("opens and closes the Add Note input box", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    const addNoteButton = screen.getByText(/Add Note/i);

    fireEvent.click(addNoteButton);
    expect(screen.getByPlaceholderText(/Type your note/i)).toBeInTheDocument();

    const closeButton = screen.getByRole("button", { name: "" });
    fireEvent.click(closeButton);
    expect(screen.queryByPlaceholderText(/Type your note/i)).not.toBeInTheDocument();
  });

  it("adds a new note successfully", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    const addNoteButton = screen.getByText(/Add Note/i);

    fireEvent.click(addNoteButton);
    const textarea = screen.getByPlaceholderText(/Type your note/i);
    fireEvent.change(textarea, { target: { value: "Test Note 1" } });

    const saveButton = screen.getByText(/Save/i);
    fireEvent.click(saveButton);

    expect(screen.getByText("Test Note 1")).toBeInTheDocument();
  });

  it("edits an existing note", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    const addNoteButton = screen.getByText(/Add Note/i);
    fireEvent.click(addNoteButton);

    const textarea = screen.getByPlaceholderText(/Type your note/i);
    fireEvent.change(textarea, { target: { value: "Initial Note" } });
    fireEvent.click(screen.getByText(/Save/i));

    const editButton = screen.getByRole("button", { name: "" });
    fireEvent.click(editButton);

    const editTextarea = screen.getByPlaceholderText(/Type your note/i);
    fireEvent.change(editTextarea, { target: { value: "Edited Note" } });
    fireEvent.click(screen.getByText(/Update/i));

    expect(screen.getByText("Edited Note")).toBeInTheDocument();
  });

  it("deletes a note", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    const addNoteButton = screen.getByText(/Add Note/i);
    fireEvent.click(addNoteButton);

    const textarea = screen.getByPlaceholderText(/Type your note/i);
    fireEvent.change(textarea, { target: { value: "Note to Delete" } });
    fireEvent.click(screen.getByText(/Save/i));

    const deleteButton = screen.getByRole("button", { name: "" });
    fireEvent.click(deleteButton);

    expect(screen.queryByText("Note to Delete")).not.toBeInTheDocument();
  });

  it("updates case status from dropdown", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    const updateStatusButton = screen.getByText(/Update Status/i);
    fireEvent.click(updateStatusButton);

    const closedButton = screen.getByText(/Closed/i);
    fireEvent.click(closedButton);

    expect(screen.getByText("Closed")).toBeInTheDocument();
  });

  it("generates report file on clicking 'Generate Report'", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    const generateButton = screen.getByText(/Generate Report/i);
    fireEvent.click(generateButton);

    expect(document.createElement).toHaveBeenCalledWith("a");
    expect(global.URL.createObjectURL).toHaveBeenCalled();
    expect(global.URL.revokeObjectURL).toHaveBeenCalled();
  });
});

