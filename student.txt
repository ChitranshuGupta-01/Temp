import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import "@testing-library/jest-dom";
import CaseDetails from "@/components/CaseDetails";

// ✅ Mock Next.js router
const mockPush = jest.fn();
const mockBack = jest.fn();

jest.mock("next/navigation", () => ({
  useRouter: () => ({
    push: mockPush,
    back: mockBack,
    prefetch: jest.fn(),
  }),
}));

// ✅ Mock URL + anchor creation (no Blob)
global.URL.createObjectURL = jest.fn(() => "mock-url");
global.URL.revokeObjectURL = jest.fn();

const mockClick = jest.fn();
jest.spyOn(document, "createElement").mockImplementation((tagName: string) => {
  if (tagName === "a") {
    const anchor = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
    anchor.click = mockClick;
    return anchor;
  }
  return document.createElementNS("http://www.w3.org/1999/xhtml", tagName);
});

describe("CaseDetails Component", () => {
  const mockCaseData = {
    id: 101,
    title: "Payment Fraud Investigation",
    status: "Active",
    priority: "High",
    assignee: "John Doe",
    profile: { name: "Jane Smith", id: "P123" },
    created: "2025-10-01",
    updated: "2025-10-05",
    riskScore: 75,
    description: "A suspected payment fraud case under review.",
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  // ✅ Render test
  it("renders case details correctly", () => {
    render(<CaseDetails caseData={mockCaseData} />);

    expect(screen.getByText(/Case #101/i)).toBeInTheDocument();
    expect(screen.getByText(/Payment Fraud Investigation/i)).toBeInTheDocument();
    expect(screen.getByText(/High Priority/i)).toBeInTheDocument();
    expect(screen.getByText(/A suspected payment fraud case/i)).toBeInTheDocument();
    expect(screen.getByText(/Risk Score/i)).toBeInTheDocument();
    expect(screen.getByText("75")).toBeInTheDocument();
    expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
    expect(screen.getByText(/Jane Smith/i)).toBeInTheDocument();
  });

  // ✅ Navigation (Go Back)
  it("navigates back when Go Back button is clicked", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    fireEvent.click(screen.getByTitle(/go back/i));
    expect(mockBack).toHaveBeenCalledTimes(1);
  });

  // ✅ Add Note
  it("opens note input, adds note, and displays it", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    fireEvent.click(screen.getByText(/Add Note/i));

    const textarea = screen.getByPlaceholderText(/Type your note/i);
    fireEvent.change(textarea, { target: { value: "New Note" } });

    fireEvent.click(screen.getByText(/Save/i));
    expect(screen.getByText("New Note")).toBeInTheDocument();
  });

  // ✅ Edit Note
  it("edits an existing note correctly", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    fireEvent.click(screen.getByText(/Add Note/i));

    const textarea = screen.getByPlaceholderText(/Type your note/i);
    fireEvent.change(textarea, { target: { value: "Initial Note" } });
    fireEvent.click(screen.getByText(/Save/i));

    const editButtons = screen.getAllByRole("button");
    const editButton = editButtons.find((btn) =>
      btn.querySelector("svg")?.getAttribute("class")?.includes("text-blue")
    );
    if (editButton) fireEvent.click(editButton);

    const editTextarea = screen.getByPlaceholderText(/Type your note/i);
    fireEvent.change(editTextarea, { target: { value: "Edited Note" } });
    fireEvent.click(screen.getByText(/Update/i));

    expect(screen.getByText("Edited Note")).toBeInTheDocument();
  });

  // ✅ Delete Note
  it("deletes a note successfully", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    fireEvent.click(screen.getByText(/Add Note/i));

    fireEvent.change(screen.getByPlaceholderText(/Type your note/i), {
      target: { value: "Note to Delete" },
    });
    fireEvent.click(screen.getByText(/Save/i));

    expect(screen.getByText("Note to Delete")).toBeInTheDocument();

    const deleteButtons = screen.getAllByRole("button");
    const deleteButton = deleteButtons.find((btn) =>
      btn.querySelector("svg")?.getAttribute("class")?.includes("text-red")
    );
    if (deleteButton) fireEvent.click(deleteButton);

    expect(screen.queryByText("Note to Delete")).not.toBeInTheDocument();
  });

  // ✅ Status Update
  it("updates status using dropdown", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    fireEvent.click(screen.getByText(/Update Status/i));
    fireEvent.click(screen.getByText(/Closed/i));
    expect(screen.getByText("Closed")).toBeInTheDocument();
  });

  // ✅ Generate Report (Blob-free)
  it("triggers report generation when 'Generate Report' is clicked", () => {
    render(<CaseDetails caseData={mockCaseData} />);
    fireEvent.click(screen.getByText(/Generate Report/i));

    expect(global.URL.createObjectURL).toHaveBeenCalledTimes(1);
    expect(mockClick).toHaveBeenCalledTimes(1);
    expect(global.URL.revokeObjectURL).toHaveBeenCalledTimes(1);
  });
});
