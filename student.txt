import { render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { useRouter } from "next/navigation";
import LoginPage from "./LoginPage";
import { setSession } from "../fincrime/services/session";

jest.mock("next/navigation", () => ({
  useRouter: jest.fn(),
}));
jest.mock("../fincrime/services/session");
jest.mock("next/image", () => ({
  __esModule: true,
  default: (props: any) => <img {...props} />,
}));

describe("LoginPage", () => {
  const mockPush = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    jest.useFakeTimers();
    (useRouter as jest.Mock).mockReturnValue({ push: mockPush });
  });

  afterEach(() => {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });

  it("renders login form with all elements", () => {
    render(<LoginPage />);
    
    expect(screen.getByText("Krono Sphere")).toBeInTheDocument();
    expect(screen.getByText("Sign in to your account")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Enter your username")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Enter your password")).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /Sign In/i })).toBeDisabled();
  });

  it("enables submit button when both fields are filled", async () => {
    const user = userEvent.setup({ delay: null });
    render(<LoginPage />);

    await user.type(screen.getByPlaceholderText("Enter your username"), "admin");
    await user.type(screen.getByPlaceholderText("Enter your password"), "password");

    expect(screen.getByRole("button", { name: /Sign In/i })).not.toBeDisabled();
  });

  it("toggles password visibility", async () => {
    const user = userEvent.setup({ delay: null });
    render(<LoginPage />);

    const passwordInput = screen.getByPlaceholderText("Enter your password");
    const toggleButton = screen.getByRole("button", { type: "button" });

    expect(passwordInput).toHaveAttribute("type", "password");
    await user.click(toggleButton);
    expect(passwordInput).toHaveAttribute("type", "text");
  });

  it("successfully logs in with correct credentials", async () => {
    const user = userEvent.setup({ delay: null });
    render(<LoginPage />);

    await user.type(screen.getByPlaceholderText("Enter your username"), "admin");
    await user.type(screen.getByPlaceholderText("Enter your password"), "fin@1234");
    await user.click(screen.getByRole("button", { name: /Sign In/i }));

    expect(screen.getByText("Authenticating...")).toBeInTheDocument();

    jest.advanceTimersByTime(2000);

    await waitFor(() => {
      expect(screen.getByText("Access Granted")).toBeInTheDocument();
      expect(setSession).toHaveBeenCalledWith(expect.stringContaining("fincrime_token_"));
    });

    jest.advanceTimersByTime(1500);
    await waitFor(() => expect(mockPush).toHaveBeenCalledWith("/"));
  });

  it("shows error message with invalid credentials", async () => {
    const user = userEvent.setup({ delay: null });
    render(<LoginPage />);

    await user.type(screen.getByPlaceholderText("Enter your username"), "wrong");
    await user.type(screen.getByPlaceholderText("Enter your password"), "wrong");
    await user.click(screen.getByRole("button", { name: /Sign In/i }));

    jest.advanceTimersByTime(2000);

    await waitFor(() => {
      expect(screen.getByText("Invalid credentials. Try again.")).toBeInTheDocument();
      expect(setSession).not.toHaveBeenCalled();
      expect(mockPush).not.toHaveBeenCalled();
    });
  });

  it("submits form on Enter key press", async () => {
    const user = userEvent.setup({ delay: null });
    render(<LoginPage />);

    await user.type(screen.getByPlaceholderText("Enter your username"), "admin");
    await user.type(screen.getByPlaceholderText("Enter your password"), "fin@1234");
    await user.keyboard("{Enter}");

    expect(screen.getByText("Authenticating...")).toBeInTheDocument();
  });
});
