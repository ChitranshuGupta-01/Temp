// @ts-nocheck
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import LoginPage from "../src/app/login/page";

// Mock next/navigation
jest.mock("next/navigation", () => ({
  useRouter: jest.fn(),
}));

// Mock session service
jest.mock("../src/app/fincrime/services/session", () => ({
  setSession: jest.fn(),
}));

// Mock next/image
jest.mock("next/image", () => ({
  __esModule: true,
  default: ({ src, alt, ...props }) => <img src={src} alt={alt} {...props} />,
}));

// @ts-nocheck
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import LoginPage from "../src/app/login/page";
import { useRouter } from "next/navigation";
import { setSession } from "../src/app/fincrime/services/session";

describe("LoginPage", () => {
  const mockPush = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    jest.useFakeTimers();
    (useRouter as jest.Mock).mockReturnValue({
      push: mockPush,
      replace: jest.fn(),
      prefetch: jest.fn(),
    });
  });

  afterEach(() => {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });

  it("renders login form with all elements", () => {
    render(<LoginPage />);
    
    expect(screen.getByText("Krono Sphere")).toBeInTheDocument();
    expect(screen.getByText("Sign in to your account")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Enter your username")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Enter your password")).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /Sign In/i })).toBeDisabled();
  });

  it("enables submit button when both fields are filled", () => {
    render(<LoginPage />);

    const usernameInput = screen.getByPlaceholderText("Enter your username");
    const passwordInput = screen.getByPlaceholderText("Enter your password");

    fireEvent.change(usernameInput, { target: { value: "admin" } });
    fireEvent.change(passwordInput, { target: { value: "password" } });

    expect(screen.getByRole("button", { name: /Sign In/i })).not.toBeDisabled();
  });

  it("toggles password visibility", () => {
    render(<LoginPage />);

    const passwordInput = screen.getByPlaceholderText("Enter your password");
    const toggleButton = passwordInput.parentElement.querySelector('button[type="button"]');

    expect(passwordInput).toHaveAttribute("type", "password");
    
    fireEvent.click(toggleButton);
    expect(passwordInput).toHaveAttribute("type", "text");
    
    fireEvent.click(toggleButton);
    expect(passwordInput).toHaveAttribute("type", "password");
  });

  it("successfully logs in with correct credentials", async () => {
    render(<LoginPage />);

    const usernameInput = screen.getByPlaceholderText("Enter your username");
    const passwordInput = screen.getByPlaceholderText("Enter your password");
    const submitButton = screen.getByRole("button", { name: /Sign In/i });

    fireEvent.change(usernameInput, { target: { value: "admin" } });
    fireEvent.change(passwordInput, { target: { value: "fin@1234" } });
    fireEvent.click(submitButton);

    expect(screen.getByText("Authenticating...")).toBeInTheDocument();

    jest.advanceTimersByTime(2000);

    await waitFor(() => {
      expect(screen.getByText("Access Granted")).toBeInTheDocument();
      expect(setSession).toHaveBeenCalledWith(expect.stringContaining("fincrime_token_"));
    });

    jest.advanceTimersByTime(1500);
    
    await waitFor(() => {
      expect(mockPush).toHaveBeenCalledWith("/");
    });
  });

  it("shows error message with invalid credentials", async () => {
    render(<LoginPage />);

    const usernameInput = screen.getByPlaceholderText("Enter your username");
    const passwordInput = screen.getByPlaceholderText("Enter your password");
    const submitButton = screen.getByRole("button", { name: /Sign In/i });

    fireEvent.change(usernameInput, { target: { value: "wrong" } });
    fireEvent.change(passwordInput, { target: { value: "wrong" } });
    fireEvent.click(submitButton);

    jest.advanceTimersByTime(2000);

    await waitFor(() => {
      expect(screen.getByText("Invalid credentials. Try again.")).toBeInTheDocument();
      expect(setSession).not.toHaveBeenCalled();
      expect(mockPush).not.toHaveBeenCalled();
    });
  });

  it("submits form on Enter key press", () => {
    render(<LoginPage />);

    const usernameInput = screen.getByPlaceholderText("Enter your username");
    const passwordInput = screen.getByPlaceholderText("Enter your password");
    const form = screen.getByRole("button", { name: /Sign In/i }).closest("form");

    fireEvent.change(usernameInput, { target: { value: "admin" } });
    fireEvent.change(passwordInput, { target: { value: "fin@1234" } });
    fireEvent.submit(form);

    expect(screen.getByText("Authenticating...")).toBeInTheDocument();
  });
});
