import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import "@testing-library/jest-dom";
import CaseDetails from "@/components/CaseDetails";

// ✅ Mock Next.js App Router
const mockPush = jest.fn();
const mockBack = jest.fn();

jest.mock("next/navigation", () => ({
  useRouter: () => ({
    push: mockPush,
    back: mockBack,
    prefetch: jest.fn(),
  }),
}));

// ✅ Safe mocks for file download + URLs
global.URL.createObjectURL = jest.fn(() => "mock-url");
global.URL.revokeObjectURL = jest.fn();
global.Blob = function (content: any, options: any) {
  return { content, options };
};

// ✅ Fixed: createElement returns valid Node for <a>
const mockClick = jest.fn();
jest.spyOn(document, "createElement").mockImplementation((tagName: string) => {
  if (tagName === "a") {
    const anchor = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
    anchor.click = mockClick;
    return anchor;
  }
  return document.createElementNS("http://www.w3.org/1999/xhtml", tagName);
});
