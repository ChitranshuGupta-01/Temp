"use client";
import React, { useMemo, useState } from "react";
import { Search, Filter, Download, Calendar, Clock, User, Sparkles, ChevronLeft, ChevronRight } from "lucide-react";

type Event = {
  id: string;
  type: string;
  date: string;
  profile: string;
  ip: string;
  status: string;
  severity: string;
  description: string;
};

const getSeverityColor = (s: string) => {
  switch (s.toUpperCase()) {
    case "HIGH":
      return "bg-gradient-to-r from-red-100 to-pink-100 text-red-800";
    case "MEDIUM":
      return "bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800";
    case "LOW":
      return "bg-gradient-to-r from-green-100 to-emerald-100 text-green-800";
    default:
      return "bg-gray-100 text-gray-800";
  }
};

const getStatusColor = (s: string) => {
  switch (s.toLowerCase()) {
    case "success":
      return "bg-gradient-to-r from-green-100 to-emerald-100 text-green-800";
    case "failed":
      return "bg-gradient-to-r from-red-100 to-pink-100 text-red-800";
    case "blocked":
      return "bg-gradient-to-r from-red-100 to-pink-100 text-red-800";
    case "flagged":
      return "bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800";
    case "alert":
      return "bg-gradient-to-r from-purple-100 to-violet-100 text-purple-800";
    default:
      return "bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-800";
  }
};

export default function PastEventsLog({ events }: { events: Event[] }) {
  const [query, setQuery] = useState("");
  const [severityFilter, setSeverityFilter] = useState<string>("All");
  const [perPage, setPerPage] = useState<number>(5);
  const [page, setPage] = useState(1);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    return events.filter((e) => {
      if (severityFilter !== "All" && e.severity.toUpperCase() !== severityFilter.toUpperCase()) return false;
      if (!q) return true;
      return (
        e.id.toLowerCase().includes(q) ||
        e.type.toLowerCase().includes(q) ||
        e.ip.toLowerCase().includes(q) ||
        e.description.toLowerCase().includes(q)
      );
    });
  }, [events, query, severityFilter]);

  const total = filtered.length;
  const totalPages = Math.max(1, Math.ceil(total / perPage));
  const pageData = filtered.slice((page - 1) * perPage, page * perPage);

  const goto = (p: number) => {
    setPage(p);
    const el = document.querySelector(".bg-white.rounded-xl");
    if (el) (el as HTMLElement).scrollIntoView({ behavior: "smooth", block: "start" });
  };

  // CSV Download
  const downloadCSV = () => {
    const headers = ["Event ID", "Type", "Date", "Profile", "IP", "Status", "Severity", "Description"];
    const csvContent = [
      headers.join(","),
      ...filtered.map((e) =>
        [e.id, e.type, e.date, e.profile, e.ip, e.status, e.severity, `"${e.description}"`].join(",")
      ),
    ].join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.href = url;
    link.download = `past-events-log-${new Date().toISOString().split("T")[0]}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-slate-50 to-purple-50 px-6 py-4 border-b border-gray-200 flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg shadow-sm">
            <User className="w-5 h-5 text-white" />
          </div>
          <div>
            <h2 className="text-lg font-semibold text-gray-900">Past Events Log</h2>
            <p className="text-sm text-gray-600">Recent activity and security events for Profile: John Doe</p>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <button
            onClick={downloadCSV}
            className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 hover:scale-105"
            title="Download CSV"
          >
            <Download className="w-5 h-5" />
          </button>
          <button
            className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 hover:scale-105"
            title="Ask AI Assistant"
          >
            <Sparkles className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Filters */}
      <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200">
        <div className="flex flex-col lg:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              value={query}
              onChange={(e) => {
                setQuery(e.target.value);
                setPage(1);
              }}
              placeholder="Search events, status, IP addresses, or descriptions..."
              className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm"
            />
          </div>

          <div className="flex gap-4">
            <div className="relative">
              <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <select
                value={severityFilter}
                onChange={(e) => {
                  setSeverityFilter(e.target.value);
                  setPage(1);
                }}
                className="pl-10 pr-8 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white shadow-sm transition-all duration-200"
              >
                <option>All</option>
                <option>LOW</option>
                <option>MEDIUM</option>
                <option>HIGH</option>
              </select>
            </div>

            <select
              value={perPage}
              onChange={(e) => {
                setPerPage(Number(e.target.value));
                setPage(1);
              }}
              className="px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white shadow-sm transition-all duration-200"
            >
              <option value={5}>5 per page</option>
              <option value={10}>10 per page</option>
              <option value={20}>20 per page</option>
            </select>
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gradient-to-r from-gray-50 to-slate-100">
            <tr>
              {["Event ID", "Event Type", "Date & Time", "Profile", "IP Address", "Status", "Severity", "Description"].map(
                (header) => (
                  <th key={header} className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    {header}
                  </th>
                )
              )}
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {pageData.map((e, i) => (
              <tr
                key={e.id}
                className={`hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 transition-all duration-200 ${
                  i % 2 === 0 ? "bg-white" : "bg-gray-50/50"
                }`}
              >
                <td className="px-6 py-4 text-sm font-mono text-indigo-600 bg-indigo-50 rounded-md">
                  {e.id}
                </td>
                <td className="px-6 py-4 text-sm text-gray-900 font-medium">{e.type}</td>
                <td className="px-6 py-4 text-sm text-gray-700">
                  <div className="flex flex-col">
                    <div className="flex items-center space-x-1">
                      <Calendar className="w-3 h-3 text-gray-500" />
                      <span>{e.date}</span>
                    </div>
                    <div className="flex items-center space-x-1 text-xs text-gray-500">
                      <Clock className="w-3 h-3" />
                      <span>14:30</span>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 text-sm text-gray-900">{e.profile}</td>
                <td className="px-6 py-4 text-sm text-gray-700">{e.ip}</td>
                <td className="px-6 py-4">
                  <span
                    className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium shadow-sm ${getStatusColor(
                      e.status
                    )}`}
                  >
                    {e.status}
                  </span>
                </td>
                <td className="px-6 py-4">
                  <span
                    className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium shadow-sm ${getSeverityColor(
                      e.severity
                    )}`}
                  >
                    {e.severity.toUpperCase()}
                  </span>
                </td>
                <td className="px-6 py-4 text-sm text-gray-600">{e.description}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination Footer */}
      <div className="bg-gradient-to-r from-gray-50 to-slate-50 px-6 py-4 border-t border-gray-200">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          <p className="text-sm text-gray-600 font-medium">
            Showing{" "}
            <span className="text-purple-600 font-semibold">{(page - 1) * perPage + 1}</span> to{" "}
            <span className="text-purple-600 font-semibold">{Math.min(page * perPage, total)}</span> of{" "}
            <span className="text-purple-600 font-semibold">{total}</span> events
          </p>

          <div className="flex items-center space-x-2">
            <button
              onClick={() => goto(page - 1)}
              disabled={page === 1}
              className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 disabled:opacity-50"
            >
              <ChevronLeft className="w-4 h-4" />
            </button>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((p) => (
              <button
                key={p}
                onClick={() => goto(p)}
                className={`px-3 py-1 text-sm rounded-lg transition-all duration-200 ${
                  p === page
                    ? "bg-purple-600 text-white shadow-sm"
                    : "text-gray-600 hover:text-purple-600 hover:bg-purple-50"
                }`}
              >
                {p}
              </button>
            ))}
            <button
              onClick={() => goto(page + 1)}
              disabled={page === totalPages}
              className="p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-200 disabled:opacity-50"
            >
              <ChevronRight className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
