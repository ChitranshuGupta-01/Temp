// Application.java - Main Spring Boot Application
package com.scb.creditcardorigination;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CreditCardOriginationApplication {
    public static void main(String[] args) {
        SpringApplication.run(CreditCardOriginationApplication.class, args);
    }
}

// ========================================
// APPLICATION FEATURE
// ========================================

// ApplicationController.java
package com.scb.creditcardorigination.application.controller;

import com.scb.creditcardorigination.application.model.Application;
import com.scb.creditcardorigination.application.service.ApplicationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/applications")
@CrossOrigin(origins = "http://localhost:3000") // Allow React frontend
public class ApplicationController {

    @Autowired
    private ApplicationService applicationService;

    // Get all applications
    @GetMapping
    public ResponseEntity<List<Application>> getAllApplications() {
        try {
            List<Application> applications = applicationService.getAllApplications();
            return ResponseEntity.ok(applications);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // Get application by ID
    @GetMapping("/{id}")
    public ResponseEntity<Application> getApplicationById(@PathVariable String id) {
        try {
            Optional<Application> application = applicationService.getApplicationById(id);
            return application.map(ResponseEntity::ok)
                    .orElse(ResponseEntity.notFound().build());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // Create new application
    @PostMapping
    public ResponseEntity<Application> createApplication(@RequestBody Application application) {
        try {
            Application createdApplication = applicationService.createApplication(application);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdApplication);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    // Update existing application
    @PutMapping("/{id}")
    public ResponseEntity<Application> updateApplication(
            @PathVariable String id, 
            @RequestBody Application application) {
        try {
            Application updatedApplication = applicationService.updateApplication(id, application);
            if (updatedApplication != null) {
                return ResponseEntity.ok(updatedApplication);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    // Delete application
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteApplication(@PathVariable String id) {
        try {
            boolean deleted = applicationService.deleteApplication(id);
            if (deleted) {
                return ResponseEntity.noContent().build();
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}

// ApplicationExceptionHandling.java
package com.scb.creditcardorigination.application.exceptionHandling;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class ApplicationExceptionHandling {

    @ExceptionHandler(ApplicationNotFoundException.class)
    public ResponseEntity<Map<String, String>> handleApplicationNotFound(ApplicationNotFoundException ex) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", "Application Not Found");
        errorResponse.put("message", ex.getMessage());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
    }

    @ExceptionHandler(InvalidApplicationDataException.class)
    public ResponseEntity<Map<String, String>> handleInvalidApplicationData(InvalidApplicationDataException ex) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", "Invalid Application Data");
        errorResponse.put("message", ex.getMessage());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
    }

    @ExceptionHandler(ApplicationServiceException.class)
    public ResponseEntity<Map<String, String>> handleApplicationServiceException(ApplicationServiceException ex) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", "Service Error");
        errorResponse.put("message", ex.getMessage());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, String>> handleGenericException(Exception ex) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", "Internal Server Error");
        errorResponse.put("message", "An unexpected error occurred");
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
    }

    // Custom Exception Classes
    public static class ApplicationNotFoundException extends RuntimeException {
        public ApplicationNotFoundException(String message) {
            super(message);
        }
    }

    public static class InvalidApplicationDataException extends RuntimeException {
        public InvalidApplicationDataException(String message) {
            super(message);
        }
    }

    public static class ApplicationServiceException extends RuntimeException {
        public ApplicationServiceException(String message) {
            super(message);
        }
    }
}

// Application.java - Model
package com.scb.creditcardorigination.application.model;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "applications")
public class Application {
    
    @Id
    private String id;
    
    @Column(nullable = false)
    private String applicant;
    
    @Column(nullable = false)
    private String handler;
    
    @Column(nullable = false)
    private String status;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    // Default constructor
    public Application() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    // Constructor with parameters
    public Application(String id, String applicant, String handler, String status) {
        this.id = id;
        this.applicant = applicant;
        this.handler = handler;
        this.status = status;
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    // Getters and Setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getApplicant() {
        return applicant;
    }

    public void setApplicant(String applicant) {
        this.applicant = applicant;
    }

    public String getHandler() {
        return handler;
    }

    public void setHandler(String handler) {
        this.handler = handler;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
        this.updatedAt = LocalDateTime.now();
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    @PreUpdate
    public void preUpdate() {
        this.updatedAt = LocalDateTime.now();
    }

    @Override
    public String toString() {
        return "Application{" +
                "id='" + id + '\'' +
                ", applicant='" + applicant + '\'' +
                ", handler='" + handler + '\'' +
                ", status='" + status + '\'' +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                '}';
    }
}

// ApplicationRepository.java
package com.scb.creditcardorigination.application.repository;

import com.scb.creditcardorigination.application.model.Application;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ApplicationRepository extends JpaRepository<Application, String> {
    
    // Find applications by status
    List<Application> findByStatus(String status);
    
    // Find applications by applicant name
    List<Application> findByApplicantContainingIgnoreCase(String applicant);
    
    // Find applications by handler
    List<Application> findByHandler(String handler);
    
    // Custom query to find applications by applicant and handler
    @Query("SELECT a FROM Application a WHERE a.applicant = :applicant AND a.handler = :handler")
    List<Application> findByApplicantAndHandler(@Param("applicant") String applicant, @Param("handler") String handler);
    
    // Check if application exists by ID
    boolean existsById(String id);
}

// ApplicationService.java
package com.scb.creditcardorigination.application.service;

import com.scb.creditcardorigination.application.exceptionHandling.ApplicationExceptionHandling.*;
import com.scb.creditcardorigination.application.model.Application;
import com.scb.creditcardorigination.application.repository.ApplicationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;

@Service
public class ApplicationService {

    @Autowired
    private ApplicationRepository applicationRepository;

    private final List<String> validStatuses = Arrays.asList(
        "Application Submitted",
        "Application Processing", 
        "Credit Card Offer",
        "Credit Card Accepted",
        "Printed & Shipped"
    );

    // Get all applications
    public List<Application> getAllApplications() {
        try {
            return applicationRepository.findAll();
        } catch (Exception e) {
            throw new ApplicationServiceException("Error retrieving applications: " + e.getMessage());
        }
    }

    // Get application by ID
    public Optional<Application> getApplicationById(String id) {
        if (id == null || id.trim().isEmpty()) {
            throw new InvalidApplicationDataException("Application ID cannot be null or empty");
        }
        
        try {
            return applicationRepository.findById(id);
        } catch (Exception e) {
            throw new ApplicationServiceException("Error retrieving application with ID: " + id);
        }
    }

    // Create new application
    public Application createApplication(Application application) {
        validateApplicationData(application);
        
        try {
            // Generate unique ID
            String newId = generateUniqueId();
            application.setId(newId);
            
            return applicationRepository.save(application);
        } catch (Exception e) {
            throw new ApplicationServiceException("Error creating application: " + e.getMessage());
        }
    }

    // Update existing application
    public Application updateApplication(String id, Application updatedApplication) {
        if (id == null || id.trim().isEmpty()) {
            throw new InvalidApplicationDataException("Application ID cannot be null or empty");
        }

        validateApplicationData(updatedApplication);

        try {
            Optional<Application> existingApp = applicationRepository.findById(id);
            if (existingApp.isPresent()) {
                Application app = existingApp.get();
                app.setApplicant(updatedApplication.getApplicant());
                app.setHandler(updatedApplication.getHandler());
                app.setStatus(updatedApplication.getStatus());
                
                return applicationRepository.save(app);
            } else {
                throw new ApplicationNotFoundException("Application with ID " + id + " not found");
            }
        } catch (ApplicationNotFoundException e) {
            throw e;
        } catch (Exception e) {
            throw new ApplicationServiceException("Error updating application: " + e.getMessage());
        }
    }

    // Delete application
    public boolean deleteApplication(String id) {
        if (id == null || id.trim().isEmpty()) {
            throw new InvalidApplicationDataException("Application ID cannot be null or empty");
        }

        try {
            if (applicationRepository.existsById(id)) {
                applicationRepository.deleteById(id);
                return true;
            } else {
                throw new ApplicationNotFoundException("Application with ID " + id + " not found");
            }
        } catch (ApplicationNotFoundException e) {
            throw e;
        } catch (Exception e) {
            throw new ApplicationServiceException("Error deleting application: " + e.getMessage());
        }
    }

    // Get applications by status
    public List<Application> getApplicationsByStatus(String status) {
        if (!validStatuses.contains(status)) {
            throw new InvalidApplicationDataException("Invalid status: " + status);
        }
        
        try {
            return applicationRepository.findByStatus(status);
        } catch (Exception e) {
            throw new ApplicationServiceException("Error retrieving applications by status: " + e.getMessage());
        }
    }

    // Get applications by handler
    public List<Application> getApplicationsByHandler(String handler) {
        if (handler == null || handler.trim().isEmpty()) {
            throw new InvalidApplicationDataException("Handler name cannot be null or empty");
        }
        
        try {
            return applicationRepository.findByHandler(handler);
        } catch (Exception e) {
            throw new ApplicationServiceException("Error retrieving applications by handler: " + e.getMessage());
        }
    }

    // Private helper methods
    private void validateApplicationData(Application application) {
        if (application == null) {
            throw new InvalidApplicationDataException("Application data cannot be null");
        }
        
        if (application.getApplicant() == null || application.getApplicant().trim().isEmpty()) {
            throw new InvalidApplicationDataException("Applicant name is required");
        }
        
        if (application.getHandler() == null || application.getHandler().trim().isEmpty()) {
            throw new InvalidApplicationDataException("Handler name is required");
        }
        
        if (application.getStatus() == null || !validStatuses.contains(application.getStatus())) {
            throw new InvalidApplicationDataException("Invalid or missing status. Valid statuses: " + validStatuses);
        }
    }

    private String generateUniqueId() {
        String id;
        do {
            Random random = new Random();
            int randomNum = 100000 + random.nextInt(900000);
            id = "SC" + randomNum;
        } while (applicationRepository.existsById(id));
        
        return id;
    }
}

// ========================================
// CONFIGURATION FILES
// ========================================

// application.properties
# Server Configuration
server.port=8080

# Database Configuration (H2 for development)
spring.datasource.url=jdbc:h2:mem:creditcard
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# H2 Console (for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# CORS Configuration
spring.web.cors.allow-credentials=true

# ========================================
// pom.xml dependencies (add these to your existing pom.xml)
# ========================================

/*
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
*/

// ========================================
// DATA INITIALIZATION (Optional)
// ========================================

// DataInitializer.java
package com.scb.creditcardorigination.application.service;

import com.scb.creditcardorigination.application.model.Application;
import com.scb.creditcardorigination.application.repository.ApplicationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private ApplicationRepository applicationRepository;

    @Override
    public void run(String... args) throws Exception {
        // Initialize with some sample data if the database is empty
        if (applicationRepository.count() == 0) {
            Application app1 = new Application("SC101234", "Chitranshu Gupta", "Harsha", "Application Submitted");
            Application app2 = new Application("SC101235", "Chitranshu Gupta", "Harsha", "Credit Card Accepted");
            Application app3 = new Application("SC101236", "Chitranshu Gupta", "Harsha", "Application Processing");
            
            applicationRepository.save(app1);
            applicationRepository.save(app2);
            applicationRepository.save(app3);
            
            System.out.println("Sample data initialized successfully!");
        }
    }
}
