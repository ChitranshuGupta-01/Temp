"use client";
import React, { useMemo, useState, useEffect } from "react";
import {
  Search,
  Filter,
  Download,
  Calendar,
  Clock,
  CreditCard,
  ArrowUpRight,
  ArrowDownLeft,
  ChevronLeft,
  ChevronRight,
  Sparkles,
} from "lucide-react";
import ChatOverlay from "./ChatOverlay";

type Tx = {
  id: string;
  transactionId?: string;
  type: string;
  date: string;
  time?: string;
  amount: number;
  currency?: string;
  beneficiary: string;
  status: string;
  details?: string;
  fromAccount?: string;
  toAccount?: string;
  channel?: string;
  priority?: string;
  reference?: string;
};

export default function RelatedTransactions({
  transactions,
}: {
  transactions: Tx[];
}) {
  const [query, setQuery] = useState("");
  const [filterBy, setFilterBy] = useState("all");
  const [perPage, setPerPage] = useState(5);
  const [page, setPage] = useState(1);
  const [isChatOpen, setIsChatOpen] = useState(false);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    return transactions.filter((t) => {
      const matchesSearch =
        !q ||
        t.transactionId?.toLowerCase().includes(q) ||
        t.id?.toLowerCase().includes(q) ||
        t.type.toLowerCase().includes(q) ||
        t.beneficiary?.toLowerCase().includes(q) ||
        t.status?.toLowerCase().includes(q) ||
        t.details?.toLowerCase().includes(q) ||
        t.reference?.toLowerCase().includes(q) ||
        t.amount?.toString().includes(q);
      const matchesFilter = filterBy === "all" || t.type === filterBy;
      return matchesSearch && matchesFilter;
    });
  }, [transactions, query, filterBy]);

  const total = filtered.length;
  const totalPages = Math.ceil(total / perPage);
  const startIndex = (page - 1) * perPage;
  const endIndex = startIndex + perPage;
  const pageData = filtered.slice(startIndex, endIndex);

  useEffect(() => {
    setPage(1);
  }, [query, filterBy, perPage]);

  const transactionTypes = [...new Set(transactions.map((t) => t.type))];

  const getPriorityColor = (priority?: string) => {
    switch (priority?.toLowerCase()) {
      case "high":
        return "bg-gradient-to-r from-red-100 to-pink-100 text-red-800";
      case "medium":
        return "bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800";
      case "low":
        return "bg-gradient-to-r from-green-100 to-emerald-100 text-green-800";
      default:
        return "bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800";
    }
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "completed":
        return "bg-gradient-to-r from-green-100 to-emerald-100 text-green-800";
      case "pending":
        return "bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800";
      case "flagged":
        return "bg-gradient-to-r from-red-100 to-pink-100 text-red-800";
      case "cleared":
        return "bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-800";
      default:
        return "bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800";
    }
  };

  const getTransactionIcon = (type: string) => {
    if (type.includes("Wire") || type.includes("Transfer")) {
      return <ArrowUpRight className="w-4 h-4 text-blue-600 flex-shrink-0" />;
    } else if (type.includes("Deposit")) {
      return <ArrowDownLeft className="w-4 h-4 text-green-600 flex-shrink-0" />;
    } else {
      return <CreditCard className="w-4 h-4 text-purple-600 flex-shrink-0" />;
    }
  };

  const formatAmount = (amount: number, currency = "USD") => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency,
    }).format(amount);
  };

  const handlePageChange = (p: number) => {
    setPage(p);
  };

  const downloadCSV = () => {
    const headers = [
      "Transaction ID",
      "Type",
      "Date",
      "Amount",
      "Currency",
      "Beneficiary",
      "Status",
      "Priority",
      "Reference",
      "Details",
    ];
    const csvContent = [
      headers.join(","),
      ...filtered.map((t) =>
        [
          `"${t.transactionId || t.id}"`,
          `"${t.type}"`,
          `"${t.date}"`,
          `"${t.amount}"`,
          `"${t.currency || "USD"}"`,
          `"${t.beneficiary}"`,
          `"${t.status}"`,
          `"${t.priority || "-"}"`,
          `"${t.reference || "-"}"`,
          `"${t.details || "-"}"`,
        ].join(",")
      ),
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `related-transactions-${new Date()
      .toISOString()
      .split("T")[0]}.csv`;
    link.click();
  };

  return (
    <>
      <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-slate-50 to-green-50 px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-r from-green-500 to-teal-600 rounded-lg shadow-sm">
                <CreditCard className="w-5 h-5 text-white" />
              </div>
              <div>
                <h2 className="text-lg font-semibold text-gray-900">
                  Related Transactions
                </h2>
                <p className="text-sm text-gray-600">
                  All transactions made to the same account: ****5678
                </p>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <button
                onClick={() => setIsChatOpen(true)}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 hover:scale-105"
                title="Ask AI Assistant"
              >
                <Sparkles className="w-5 h-5" />
              </button>
              <button
                onClick={downloadCSV}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 hover:scale-105"
                title="Download CSV"
              >
                <Download className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200">
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="Search transactions, amounts, beneficiaries, or references..."
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm"
              />
            </div>

            <div className="flex gap-4">
              <div className="relative">
                <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <select
                  value={filterBy}
                  onChange={(e) => setFilterBy(e.target.value)}
                  className="pl-10 pr-8 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white shadow-sm transition-all duration-200 min-w-48"
                >
                  <option value="all">All Transaction Types</option>
                  {transactionTypes.map((type) => (
                    <option key={type} value={type}>
                      {type}
                    </option>
                  ))}
                </select>
              </div>

              <select
                value={perPage}
                onChange={(e) => setPerPage(Number(e.target.value))}
                className="px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white shadow-sm transition-all duration-200"
              >
                <option value={5}>5 per page</option>
                <option value={10}>10 per page</option>
                <option value={15}>15 per page</option>
                <option value={20}>20 per page</option>
              </select>
            </div>
          </div>
        </div>

        {/* Table */}
        <div>
          <table className="w-full">
            <thead className="bg-gradient-to-r from-gray-50 to-slate-100">
              <tr>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase">
                  Transaction
                </th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase">
                  Date
                </th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase">
                  Amount
                </th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase">
                  Beneficiary
                </th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase">
                  Status
                </th>
                <th className="px-4 py-4 text-left text-xs font-semibold text-gray-600 uppercase">
                  Details
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {pageData.map((t, i) => (
                <tr
                  key={t.id}
                  className={`hover:bg-gradient-to-r hover:from-green-50 hover:to-teal-50 transition-all duration-200 ${
                    i % 2 === 0 ? "bg-white" : "bg-gray-50/50"
                  }`}
                >
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="flex items-center space-x-2">
                        {getTransactionIcon(t.type)}
                        <span className="text-sm font-semibold text-gray-900 truncate">
                          {t.type}
                        </span>
                      </div>
                      <div className="text-xs font-mono text-indigo-600 bg-indigo-50 rounded px-2 py-1 inline-block">
                        {t.transactionId || t.id}
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="flex items-center space-x-1 text-sm text-gray-900">
                        <Calendar className="w-3 h-3 text-gray-500" />
                        <span className="text-xs">{t.date}</span>
                      </div>
                      {t.time && (
                        <div className="flex items-center space-x-1 text-xs text-gray-600">
                          <Clock className="w-3 h-3 text-gray-400" />
                          <span>{t.time}</span>
                        </div>
                      )}
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="text-sm font-bold text-gray-900">
                        {formatAmount(t.amount, t.currency)}
                      </div>
                      <div>
                        <span
                          className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium shadow-sm ${getPriorityColor(
                            t.priority
                          )}`}
                        >
                          {(t.priority || "LOW").toUpperCase()}
                        </span>
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="space-y-1">
                      <div className="text-sm font-medium text-gray-900 truncate">
                        {t.beneficiary}
                      </div>
                      <div className="text-xs text-gray-500">
                        {t.channel || ""}
                      </div>
                      {t.fromAccount && t.toAccount && (
                        <div className="text-xs text-gray-600">
                          <span className="font-mono">
                            {t.fromAccount}
                          </span>{" "}
                          →{" "}
                          <span className="font-mono">{t.toAccount}</span>
                        </div>
                      )}
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <span
                      className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium shadow-sm ${getStatusColor(
                        t.status
                      )}`}
                    >
                      {t.status}
                    </span>
                  </td>
                  <td className="px-4 py-4 text-sm text-gray-600 truncate max-w-48">
                    {t.details || t.reference || "-"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination Footer */}
        <div className="bg-gradient-to-r from-gray-50 to-slate-50 px-6 py-4 border-t border-gray-200">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
            <div className="flex items-center space-x-4">
              <p className="text-sm text-gray-600 font-medium">
                Showing{" "}
                <span className="text-green-600 font-semibold">
                  {startIndex + 1}
                </span>{" "}
                to{" "}
                <span className="text-green-600 font-semibold">
                  {Math.min(endIndex, total)}
                </span>{" "}
                of{" "}
                <span className="text-green-600 font-semibold">{total}</span>{" "}
                transactions
              </p>
            </div>

            <div className="flex items-center space-x-2">
              <button
                onClick={() => handlePageChange(page - 1)}
                disabled={page === 1}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 disabled:opacity-50"
              >
                <ChevronLeft className="w-4 h-4" />
              </button>

              <div className="flex items-center space-x-1">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((p) => {
                  if (
                    p === 1 ||
                    p === totalPages ||
                    (p >= page - 1 && p <= page + 1)
                  ) {
                    return (
                      <button
                        key={p}
                        onClick={() => handlePageChange(p)}
                        className={`px-3 py-1 text-sm rounded-lg transition-all duration-200 ${
                          page === p
                            ? "bg-green-600 text-white shadow-sm"
                            : "text-gray-600 hover:text-green-600 hover:bg-green-50"
                        }`}
                      >
                        {p}
                      </button>
                    );
                  } else if (p === page - 2 || p === page + 2) {
                    return (
                      <span key={p} className="px-2 text-gray-400">
                        ...
                      </span>
                    );
                  }
                  return null;
                })}
              </div>

              <button
                onClick={() => handlePageChange(page + 1)}
                disabled={page === totalPages}
                className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-all duration-200 disabled:opacity-50"
              >
                <ChevronRight className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Overlay */}
      <ChatOverlay
        isOpen={isChatOpen}
        onClose={() => setIsChatOpen(false)}
        tableData={filtered}
        tableName="Related Transactions"
      />
    </>
  );
}
