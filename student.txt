"use client";

import React, { useMemo, useState } from "react";
import {
  FileText,
  AlertTriangle,
  Search,
  Filter,
  Download,
  ChevronLeft,
  ChevronRight,
  X,
} from "lucide-react";
import ReactFlow, { Background, Controls } from "reactflow";
import "reactflow/dist/style.css";

type EventItem = {
  id: string;
  type: string;
  date: string;
  profile: string;
  ip: string;
  status: "Success" | "Failed" | "Flagged" | "Other";
  severity: "Low" | "Medium" | "High";
  desc: string;
};

export default function CaseDetailPage() {
  // --- Case state ---
  const [caseStatus, setCaseStatus] = useState("Active");
  const [notes, setNotes] = useState<string[]>([]);
  const [riskScore, setRiskScore] = useState(85);

  // --- Modals ---
  const [showNoteModal, setShowNoteModal] = useState(false);
  const [showStatusModal, setShowStatusModal] = useState(false);
  const [newNote, setNewNote] = useState("");
  const [newStatus, setNewStatus] = useState(caseStatus);

  // --- Relation Diagram ---
  const nodes = [
    {
      id: "case",
      data: {
        label: `Case\nCase ID: CASE-2024-154\nDate: 2024-01-15\nStatus: ${caseStatus}\nDecision: Approve\nType: Investigation`,
      },
      position: { x: 100, y: 30 },
      style: {
        background: "#fee2e2",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #fca5a5",
        width: 260,
      },
    },
    {
      id: "profile",
      data: {
        label: "Profile\nProfile ID: PROF-789\nName: John Doe\nDOB: 1985-03-22",
      },
      position: { x: 420, y: 30 },
      style: {
        background: "#dbeafe",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #93c5fd",
        width: 220,
      },
    },
    {
      id: "txn",
      data: {
        label:
          "Transaction\nTrans ID: TXN-456123\nType: Wire Transfer\nAmount: $15,000\nFrequency: Multiple",
      },
      position: { x: 100, y: 230 },
      style: {
        background: "#eef2ff",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #c7d2fe",
        width: 260,
      },
    },
    {
      id: "activity",
      data: {
        label: "Activity\nEVT-001 Login Attempt\nEVT-003 Transaction Alert",
      },
      position: { x: 420, y: 230 },
      style: {
        background: "#fff1f2",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #fbcfe8",
        width: 260,
      },
    },
  ];

  const edges = [
    { id: "e1", source: "case", target: "profile", animated: true },
    { id: "e2", source: "case", target: "txn", animated: true },
    { id: "e3", source: "profile", target: "activity", animated: true },
  ];

  // --- Dummy events ---
  const events: EventItem[] = [
    {
      id: "EVT-001",
      type: "Login Attempt",
      date: "2024-01-15 14:30:25",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "Successful login",
    },
    {
      id: "EVT-002",
      type: "Failed Login",
      date: "2024-01-15 09:15:42",
      profile: "John Doe",
      ip: "203.45.67.88",
      status: "Failed",
      severity: "High",
      desc: "Multiple failed login attempts",
    },
    {
      id: "EVT-003",
      type: "Transaction Alert",
      date: "2024-01-14 16:45:12",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Flagged",
      severity: "Medium",
      desc: "High-value transaction exceeding daily limit",
    },
  ];

  // --- Table state ---
  const [searchTerm, setSearchTerm] = useState("");
  const [eventTypeFilter, setEventTypeFilter] = useState("All Event Types");
  const [pageSize, setPageSize] = useState<number>(5);
  const [page, setPage] = useState<number>(1);

  const eventTypes = useMemo(() => {
    const s = new Set<string>();
    events.forEach((e) => s.add(e.type));
    return ["All Event Types", ...Array.from(s)];
  }, [events]);

  const filtered = useMemo(() => {
    const q = searchTerm.trim().toLowerCase();
    return events.filter((e) => {
      if (eventTypeFilter !== "All Event Types" && e.type !== eventTypeFilter)
        return false;
      if (!q) return true;
      return (
        e.id.toLowerCase().includes(q) ||
        e.type.toLowerCase().includes(q) ||
        e.profile.toLowerCase().includes(q) ||
        e.ip.toLowerCase().includes(q) ||
        e.status.toLowerCase().includes(q) ||
        e.desc.toLowerCase().includes(q) ||
        e.date.toLowerCase().includes(q)
      );
    });
  }, [events, searchTerm, eventTypeFilter]);

  const totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
  const currentPage = Math.min(Math.max(1, page), totalPages);
  const startIndex = (currentPage - 1) * pageSize;
  const visible = filtered.slice(startIndex, startIndex + pageSize);

  function handlePageChange(next: number) {
    setPage(Math.min(Math.max(1, next), totalPages));
  }

  // --- Downloads ---
  function handleDownloadCSV() {
    const headers = [
      "Event ID",
      "Event Type",
      "Date & Time",
      "Profile",
      "IP",
      "Status",
      "Severity",
      "Description",
    ];
    const rows = filtered.map((r) =>
      [r.id, r.type, r.date, r.profile, r.ip, r.status, r.severity, `"${r.desc}"`].join(",")
    );
    const csv = [headers.join(","), ...rows].join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "events.csv";
    a.click();
    URL.revokeObjectURL(url);
  }

  function handleGenerateReport() {
    const header = `CASE REPORT
====================
Case ID: CASE-2024-154
Status: ${caseStatus}
Risk Score: ${riskScore}
Notes: ${notes.length > 0 ? notes.join("; ") : "None"}
Total Events: ${events.length}

EVENT DETAILS
====================`;

    const eventLines = events
      .map(
        (e) =>
          `Event: ${e.id}
  Type: ${e.type}
  Date: ${e.date}
  Profile: ${e.profile}
  IP: ${e.ip}
  Status: ${e.status}
  Severity: ${e.severity}
  Description: ${e.desc}
--------------------`
      )
      .join("\n");

    const report = `${header}\n${eventLines}`;
    const blob = new Blob([report], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "case_report.txt";
    a.click();
    URL.revokeObjectURL(url);
  }

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
      {/* ===== Case Header ===== */}
      <div className="bg-white rounded-2xl shadow-lg border p-6">
        <h1 className="text-xl font-bold flex items-center gap-2 text-gray-800">
          <FileText className="w-6 h-6 text-orange-600" />
          Case #54532134
        </h1>
        <p className="text-gray-500 text-sm">High Value Transaction Investigation</p>

        <div className="mt-3 text-sm text-gray-700">
          <p>Status: <b>{caseStatus}</b></p>
          <p>Risk Score: <b>{riskScore}/100</b></p>
          {notes.length > 0 && (
            <div className="mt-2">
              <b>Notes:</b>
              <ul className="list-disc ml-6 text-gray-600">
                {notes.map((n, i) => (
                  <li key={i}>{n}</li>
                ))}
              </ul>
            </div>
          )}
        </div>

        <div className="mt-4 flex gap-3">
          <button
            onClick={() => setShowNoteModal(true)}
            className="px-4 py-2 text-sm bg-indigo-50 border rounded hover:bg-indigo-100"
          >
            Add Note
          </button>
          <button
            onClick={() => setShowStatusModal(true)}
            className="px-4 py-2 text-sm bg-indigo-50 border rounded hover:bg-indigo-100"
          >
            Update Status
          </button>
          <button
            onClick={handleGenerateReport}
            className="px-4 py-2 text-sm bg-indigo-50 border rounded hover:bg-indigo-100"
          >
            Generate Report
          </button>
        </div>
      </div>

      {/* ===== Relation Diagram ===== */}
      <div className="bg-white rounded-2xl shadow-lg border p-6">
        <h2 className="text-lg font-semibold mb-4">Case Relation Diagram</h2>
        <div className="h-[330px] border rounded">
          <ReactFlow nodes={nodes} edges={edges} fitView>
            <Background />
            <Controls />
          </ReactFlow>
        </div>
      </div>

      {/* ===== Past Events Log ===== */}
      <div className="bg-white rounded-2xl shadow-lg border p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Past Events Log</h2>
          <button
            onClick={handleDownloadCSV}
            className="px-3 py-2 rounded-md bg-gray-50 border hover:bg-gray-100 text-sm flex items-center"
          >
            <Download className="w-4 h-4 mr-1" /> CSV
          </button>
        </div>

        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3 mb-4">
          <div className="relative flex-1">
            <Search className="w-4 h-4 absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                setPage(1);
              }}
              placeholder="Search events..."
              className="w-full pl-10 pr-3 py-2 border rounded-lg text-sm focus:ring-2 focus:ring-indigo-300 shadow-sm"
            />
          </div>

          <div className="flex gap-2">
            <select
              value={eventTypeFilter}
              onChange={(e) => {
                setEventTypeFilter(e.target.value);
                setPage(1);
              }}
              className="border rounded-lg py-2 px-3 text-sm"
            >
              {eventTypes.map((t) => (
                <option key={t} value={t}>{t}</option>
              ))}
            </select>
            <select
              value={pageSize}
              onChange={(e) => {
                setPageSize(Number(e.target.value));
                setPage(1);
              }}
              className="border rounded-lg py-2 px-3 text-sm"
            >
              <option value={5}>5 per page</option>
              <option value={10}>10 per page</option>
              <option value={25}>25 per page</option>
            </select>
          </div>
        </div>

        <div className="overflow-x-auto rounded-lg border">
          <table className="w-full text-sm">
            <thead className="bg-indigo-50">
              <tr>
                <th className="p-2">Event ID</th>
                <th className="p-2">Event Type</th>
                <th className="p-2">Date</th>
                <th className="p-2">Profile</th>
                <th className="p-2">IP</th>
                <th className="p-2">Status</th>
                <th className="p-2">Severity</th>
                <th className="p-2">Description</th>
              </tr>
            </thead>
            <tbody>
              {visible.map((e) => (
                <tr key={e.id} className="even:bg-gray-50">
                  <td className="p-2 font-medium text-indigo-700">{e.id}</td>
                  <td className="p-2">{e.type}</td>
                  <td className="p-2">{e.date}</td>
                  <td className="p-2">{e.profile}</td>
                  <td className="p-2 font-mono">{e.ip}</td>
                  <td className="p-2">{e.status}</td>
                  <td className="p-2">{e.severity}</td>
                  <td className="p-2">{e.desc}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-3 flex justify-between text-sm text-gray-600">
          <span>
            Showing {filtered.length === 0 ? 0 : startIndex + 1} to{" "}
            {Math.min(startIndex + pageSize, filtered.length)} of{" "}
            {filtered.length} events
          </span>
          <div className="flex gap-1">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage <= 1}
              className="px-2 py-1 rounded hover:bg-gray-100 disabled:opacity-50"
            >
              <ChevronLeft className="w-4 h-4" />
            </button>
            {Array.from({ length: totalPages }).map((_, i) => (
              <button
                key={i}
                onClick={() => handlePageChange(i + 1)}
                className={`px-3 py-1 rounded ${
                  i + 1 === currentPage
                    ? "bg-indigo-600 text-white"
                    : "hover:bg-gray-100"
                }`}
              >
                {i + 1}
              </button>
            ))}
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage >= totalPages}
              className="px-2 py-1 rounded hover:bg-gray-100 disabled:opacity-50"
            >
              <ChevronRight className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* ===== Related Transactions ===== */}
      <div className="bg-white rounded-2xl shadow-lg border p-6">
        <h2 className="text-lg font-semibold mb-2">Related Transactions</h2>
        <input
          type="text"
          placeholder="Search transactions..."
          className="w-full border rounded-lg p-2 text-sm focus:ring-2 focus:ring-indigo-300"
        />
      </div>

      {/* ===== Add Note Modal ===== */}
      {showNoteModal && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center">
          <div className="bg-white p-6 rounded-xl shadow-lg w-96">
            <div className="flex justify-between items-center mb-3">
              <h3 className="font-semibold">Add Note</h3>
              <button onClick={() => setShowNoteModal(false)}>
                <X className="w-5 h-5" />
              </button>
            </div>
            <textarea
              value={newNote}
              onChange={(e) => setNewNote(e.target.value)}
              className="w-full border rounded p-2 mb-3"
              rows={4}
              placeholder="Write your note..."
            />
            <button
              onClick={() => {
                if (newNote.trim()) {
                  setNotes((prev) => [...prev, newNote.trim()]);
                  setNewNote("");
                  setShowNoteModal(false);
                }
              }}
              className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
            >
              Save Note
            </button>
          </div>
        </div>
      )}

      {/* ===== Update Status Modal ===== */}
      {showStatusModal && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center">
          <div className="bg-white p-6 rounded-xl shadow-lg w-80">
            <div className="flex justify-between items-center mb-3">
              <h3 className="font-semibold">Update Status</h3>
              <button onClick={() => setShowStatusModal(false)}>
                <X className="w-5 h-5" />
              </button>
            </div>
            <select
              value={newStatus}
              onChange={(e) => setNewStatus(e.target.value)}
              className="w-full border rounded p-2 mb-3"
            >
              <option>Active</option>
              <option>Closed</option>
              <option>On Hold</option>
              <option>Pending Review</option>
            </select>
            <button
              onClick={() => {
                setCaseStatus(newStatus);
                setShowStatusModal(false);
              }}
              className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
            >
              Update
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
