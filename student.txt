// src/app/fincrime/components/Transactions/Transactions.tsx

"use client"
import { useRouter } from "next/navigation";

interface EventsProps {
  transactions: any;
  tmxLogs: any;
}

import React, { useState, useEffect } from 'react';
import {
  Activity,
  ChevronLeft,
  ChevronRight,
  Minus,
  CreditCard,
  Network,
  CalendarDays,
  LogIn,
  UserX, Fingerprint, XCircle, ShieldAlert, ArrowDownLeft, ArrowUpRight, FileText, RefreshCw, DollarSign,
  TrendingDown, TrendingUp, AlertTriangle, CheckCircle, Shield, Key, Lock, Smartphone, ShieldCheck,
  Globe, MapPin, Clock, Settings, Mail, LogOut, Bell, Unlock
} from 'lucide-react';

interface TimelineEvent {
  id: string;
  date: string;
  time: string;
  type: 'event' | 'case' | 'payment' | 'transaction';
  subType: string;
  icon: React.ReactNode;
  description: string;
  details: string;
  status: 'success' | 'failed' | 'pending' | 'warning';
  amount?: string;
  custom_event_type?: string;
  relationshipId?: string;
}
const Events: React.FC<EventsProps> = (props) => {

  // Calculate the date range (past 60 days)
  const currDate: Date = new Date();
  const past60Days: Date = new Date();
  past60Days.setDate(currDate.getDate() - 60);

  // Format dates to `YYYY-MM-DD` for the HTML5 date picker
  const maxDate = currDate.toISOString().split("T")[0];
  const minDate = past60Days.toISOString().split("T")[0];

  const [timelineFilter, setTimelineFilter] = useState('All');
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedStartDate, setSelectedStartDate] = useState(minDate);
  const [selectedEndDate, setSelectedEndDate] = useState(maxDate);
  const [selectedEventItem, setSelectedEventItem] = useState<TimelineEvent | null>(null);
  const [selectedPaymentItem, setSelectedPaymentItem] = useState<TimelineEvent | null>(null);
  const [selectedCaseItem, setSelectedCaseItem] = useState<TimelineEvent | null>(null);

  const itemsPerPage = 11; // Changed from 18 to 11

  const router = useRouter();
  const handleGraphClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
   //console.log("Navigating to Graph Page for Relationship ID:", relationshipId);
   
    router.push(`/fincrime/analysis/relationship/${relationshipId}`);
  };

  // Filter events based on selected filter and date
  const getFilteredEvents = () => {
    let filtered = allTimelineEvents.filter(event => event.date === selectedStartDate);
    if (timelineFilter !== 'All') {
      filtered = filtered.filter(event => {
        switch (timelineFilter) {
          case 'Events':
            return event.type === 'event';
          case 'Case':
            return event.type === 'case';
          case 'Payments':
            return event.type === 'payment' || event.type === 'transaction';
          default:
            return true;
        }
      });
    }
    return filtered.sort((a, b) => b.time.localeCompare(a.time));
  };

 
  const getEventTmxImg = (log:any) => {
    switch (log["customer_event_type"] ) { 
      case "login_success":
        return <LogIn className="w-4 h-4" />;
      case "login_failed":
        return <UserX className="w-4 h-4" />;
      case "fingerprint_success":
        return <Fingerprint className="w-4 h-4" />;
      case "fingerprint_failed":
        return <XCircle className="w-4 h-4" />;
      case "otp_failed":
        return <ShieldAlert className="w-4 h-4" />;
      default:
        return <FileText className="w-4 h-4" />;
    }
  }

  // Generate comprehensive timeline events (65+ events)
  const generateTimelineEvents = (): TimelineEvent[] => {
    //const events: TimelineEvent[] = [];

    var events: any = [];
    var transactions: any = Array.isArray(props.transactions)?props.transactions:[];
    var tmxLogs: any = Array.isArray(props.tmxLogs)?props.tmxLogs:[];
    let sdate =  new Date(selectedStartDate+" 00:00").getTime();
    let edate = new Date(selectedEndDate+" 23:59").getTime();

    (timelineFilter == "All" || timelineFilter == "Payments")?
    transactions && transactions.filter((transaction: any, index: number) => {
      let id = transaction["id"];
      transaction = transaction["attributes"];
      let recordDate = new Date(transaction["transaction-time"]).getTime();
      const transationDate = transaction["transaction-time"] && transaction["transaction-time"].split(" ")[0];
      const transationTime = transaction["transaction-time"] && transaction["transaction-time"].split(" ")[1];
      // recordDate >= sdate && recordDate <= edate ?
        events.push({
          id: index,
          date: transationDate || "Unknown",
          time: transationTime || "Unknown",
          type: 'payment',
          subType: transaction["credit-debit"] || 'unknown',
          icon: transaction["credit-debit"] == "C" ? <ArrowDownLeft className="w-4 h-4" /> :
            (transaction["credit-debit"] == "D" ? <ArrowUpRight className="w-4 h-4" /> : transaction["credit-debit"]),
          description: transaction["credit-debit"] == "C" ? "Credit Payment" :
            (transaction["credit-debit"] == "D" ? "Debit Payment" : transaction["credit-debit"]),
          details: transaction.details || 'No details provided',
          status: "success",//transaction["reversal-flag"],
          amount: transaction["transaction-amount"] || 'N/A'
        });//:"";
    }):"";

    (timelineFilter == "All" || timelineFilter == "Events")?
    tmxLogs && tmxLogs.filter((log: any, index: number) => {
      let id = log["transaction_id"];
      let recordDate = new Date(log["event_datetime"]).getTime();
      const transationDate = log["event_datetime"] && log["event_datetime"].toISOString().split("T")[0];
      const transationTime = log["event_datetime"] && log["event_datetime"].toISOString().split("T")[1];
      recordDate >= sdate && recordDate <= edate ?
          events.push({
            id: log["transaction_id"],
            date: transationDate || "Unknown",
            time: transationTime || "Unknown",
            type: 'event',
            subType: log["event_type"],
            icon: getEventTmxImg(log),
            description: log["event_type"],
            details: log["customer_event_type"],
            status: "success",//transaction["reversal-flag"],
            amount: "N/A",
            event_datetime: log["event_datatime"],
            log: log
          }):"";
        }):"";
    return events;
  };

  const getEventIcon = (event: TimelineEvent) => {
    return event.icon;
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'event':
        return 'border text-sky-700 bg-sky-400/90';
      case 'payment':
      case 'transaction':
        return 'border text-green-700 bg-green-400/90';
      case 'case':
        return 'border text-orange-600 bg-orange-200/90';
      default:
        return 'border text-gray-400';
    }
  };

  const getEventColor = (event: TimelineEvent) => {
    let status = event.status;
    
    if (event["details"] && event["details"].indexOf("fail") != -1) {
      status = "failed";
    }
    switch (status) {
      case 'success':
        return 'text-green-400 border-green-400';
      case 'failed':
        return 'text-red-400 border-red-400';
      case 'warning':
        return 'text-orange-400 border-orange-400';
      case 'pending':
        return 'text-blue-400 border-blue-400';
      default:
        return 'text-gray-400 border-gray-400';
    }
  };

  const handleTimelineItemClick = (event: TimelineEvent) => {
    switch (event.type) {
      case 'event':
        setSelectedEventItem(event);
        break;
      case 'payment':
        setSelectedPaymentItem(event);
      case 'transaction':
        setSelectedPaymentItem(event);
        break;
      case 'case':
       // setSelectedCaseItem(event);
        break;
    }
  };
  

  const getStatusBadge = (event: any) => {
    let status = event.type == "event" ? event.details:event.status;
    if (status.indexOf("fail") != -1) {
      status = "failed";
    }
    else if (event.type == "event" && status && status.indexOf("fail") == -1) {
      status = "success";
    }
    switch (status) {
      case 'success':
        return <span className="px-2 py-1 border text-green-400 rounded-full text-xs font-medium">Success</span>;
      case 'failed':
        return <span className="px-2 py-1 border text-red-400 rounded-full text-xs font-medium">Failed</span>;
      case 'warning':
        return <span className="px-2 py-1 border text-orange-400 rounded-full text-xs font-medium">Warning</span>;
      case 'pending':
        return <span className="px-2 py-1 border text-blue-400 rounded-full text-xs font-medium">Pending</span>;
      default:
        return <span className="px-2 py-1 border text-green-400 rounded-full text-xs font-medium">Success</span>;
    }
  };

  var filteredEvents = generateTimelineEvents(),
  totalPages = Math.ceil(filteredEvents.length / itemsPerPage);
  let startIndex = (currentPage -1)*itemsPerPage;
  var currentEvents = filteredEvents.slice(startIndex, startIndex + itemsPerPage);
  useEffect(()=>{
    setCurrentPage(1);
  },[selectedStartDate,selectedEndDate]);
  //setCurrentPage(1);

  return (
    <React.Fragment>
    <div className="backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 overflow-hidden mb-4">
      <div className="bg-gradient-to-r from-slate-50 to-purple-50 px-6 py-4">
        <div className="flex items-center justify-between flex-wrap gap-4">
          <h2 className=" font-semibold flex items-center gap-2">
            {/* <Activity className="w-5 h-5" /> */}
            <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-600 rounded-xl shadow-lg">
              <Activity className="w-5 h-5 text-white" />
            </div>
            Activity Timeline
          </h2>

          {/* Controls */}
          <div className="flex items-center gap-4 flex-wrap">
            {/* Filter Buttons */}
            <div className="flex items-center gap-2">
              {['All', 'Events', 'Case', 'Payments'].map((filter) => (
                <button
                  key={filter}
                  onClick={() => setTimelineFilter(filter)}
                  className={`px-3 py-1 rounded text-xs font-medium transition-colors ${timelineFilter === filter
                    ? 'bg-white text-gray-800'
                    : ' hover:bg-white/20'
                    }`}
                >
                  {filter}
                </button>
              ))}
            </div>

          {/* Date Picker */}
          <div className="flex items-center gap-2">
                  {/* <Calendar className="w-4 h-4 " /> */}
                  <input
                    type="date"
                    value={selectedStartDate}
                    min={minDate}
                    max={maxDate}
                    onChange={(e) => setSelectedStartDate(e.target.value)}
                    className="bg-white  text-xs rounded px-2 py-1 border-0 focus:outline-none focus:bg-white/30"
                  />
                   <input
                    type="date"
                    min={minDate}
                    max={maxDate}
                    value={selectedEndDate}
                    onChange={(e) => setSelectedEndDate(e.target.value)}
                    className="bg-white  text-xs rounded px-2 py-1 border-0 focus:outline-none focus:bg-white/30"
                  />
                </div>

            {/* Results Count */}
            <div className=" text-xs">
              {filteredEvents.length} items
            </div>
          </div>
        </div>
      </div>

      {/* Timeline Content - Reduced Height */}
      <div className="p-6" style={{ minHeight: '280px' }}>
        {currentEvents.length > 0 ? (
          <>
            {/* Horizontal Timeline */}
            <div className="relative">
              {/* Timeline Line */}
              {/* <div className="absolute top-14 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-500 via-purple-500 to-green-500 opacity-60"></div> */}

              {/* Timeline Items */}
              <div className="flex justify-between items-start relative">
                <div className="flex flex-col items-center object-center relative top-24">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="p-2 rounded-lg bg-gray/10 disabled:opacity-50 hover:text-pink-600 hover:bg-pink-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <ChevronLeft className="w-4 h-4 " />
                  </button>
                </div>
                {currentEvents.map((event, index) => {
                  const isEven = index % 2 === 0;
                  return (
                    <div key={event.id} className="flex flex-col items-center relative" style={{ width: `${100 / 11}%` }}>
                      {/* Type Badge - Alternating Position */}
                      <div className={` h-24 ${isEven ? 'order-1' : 'order-5'}`}>
                      </div>
                      <div className={` ${isEven ? 'order-3' : 'order-4 mb-1'}`}>
                        <span className={`px-1.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(event.type)}`}>
                          {event.type.toUpperCase()}
                        </span>
                      </div>

                      {/* Timeline Circle - Larger and Centered */}
                      <div className={`${isEven ? 'order-2' : 'order-4'} relative z-10`}>
                        <button
                          onClick={() => handleTimelineItemClick(event)}
                          className={`w-8 h-8 rounded-full flex items-center justify-center ${getEventColor(event)} border-2 transition-all duration-200 hover:scale-125 cursor-pointer shadow-lg`}
                          title={`${event.description} - ${event.details}`}
                        >
                          <div className="w-4 h-4 flex items-center justify-center">
                            {React.cloneElement(getEventIcon(event) as React.ReactElement, {
                              className: "w-4 h-4"
                            })}
                          </div>
                        </button>
                      </div>

                      {/* Dotted line */}
                      <div className={`mt-2 mb-2 text-center ${isEven ? 'order-4' : 'order-3'}`}>
                        <Minus className="rotate-90 h-2" />
                        <Minus className="rotate-90 h-2" />
                        <Minus className="rotate-90 h-2" />
                      </div>

                      {/* Timestamp - Alternating Position */}
                      <div className={`text-center ${isEven ? 'order-5' : 'order-2'}`}>
                        <div className="font-medium" style={{ fontSize: "0.7rem" }}>
                          {event.date}
                        </div>
                        <div className="text-gray-500 " style={{ fontSize: "0.7rem" }}>
                          {event.time}
                        </div>
                      </div>
                    </div>
                  );
                })}
                <div className="flex flex-col items-center object-center relative top-24">
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="p-2 rounded-lg bg-gray/10 disabled:opacity-50 hover:text-pink-600 hover:bg-pink-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <ChevronRight className="w-4 h-4 " />
                  </button>
                </div>
              </div>
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center pt-6 mt-6 border-t columns-2 gap-80">
                <div className="text-gray-400 text-sm">
                  Showing {startIndex + 1}-{Math.min(startIndex + itemsPerPage, filteredEvents.length)} of {filteredEvents.length} items
                </div>

                <div className="flex items-center gap-2">
                  {/* <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="p-2 rounded-lg bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <ChevronLeft className="w-4 h-4 " />
                </button> */}

                  <div className="flex items-center gap-1">
                    {Array.from({ length: Math.min(totalPages, 7) }, (_, i) => {
                      let page;
                      if (totalPages <= 7) {
                        page = i + 1;
                      } else if (currentPage <= 4) {
                        page = i + 1;
                      } else if (currentPage >= totalPages - 3) {
                        page = totalPages - 6 + i;
                      } else {
                        page = currentPage - 3 + i;
                      }

                      return (
                        <button
                          key={page}
                          onClick={() => setCurrentPage(page)}
                          className={`w-8 h-8 rounded-lg text-sm font-medium transition-colors ${currentPage === page
                            ? 'bg-gradient-to-r from-purple-200 to-pink-200'
                            : 'bg-white/10 text-gray-300 hover:bg-white/20'
                            }`}
                        >
                          {page}
                        </button>
                      );
                    })}
                  </div>

                  {/* <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="p-2 rounded-lg bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <ChevronRight className="w-4 h-4 " />
                </button> */}
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="text-center py-12">
            <Activity className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className=" text-lg font-medium mb-2">No Activities Found</h3>
            <p className="text-gray-400">No activities match your current filter criteria for {selectedStartDate}</p>
          </div>
        )}
      </div>
    </div>
    <div>
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {/* Payment */}
      <div className="bg-white/10 backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 overflow-hidden">
        <div className="bg-gradient-to-r from-green-50 to-teal-50 px-4 py-3 flex items-center justify-between flex-wrap gap-4">
          <h3 className=" font-semibold text-sm flex items-center gap-2">
            {/* <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 0 0 2.25-2.25V6.75A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25v10.5A2.25 2.25 0 0 0 4.5 19.5Z" />
            </svg> */}
            <div className="p-2 bg-gradient-to-r from-green-500 to-teal-600 rounded-lg shadow-sm">
              <CreditCard className="w-5 h-5 text-white" />
            </div>
            Payment
          </h3>
          <div className=" flex items-center gap-4 flex-wrap">
            {/* <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" className="size-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z" />
            </svg> */}
            {/* <div className="p-2 bg-gradient-to-r from-neutral-200 to-neutral-400 rounded-lg shadow-sm cursor-pointer" title="Detailed view"> */}
            <Network className="w-4 h-4" />
            {/* </div> */}
          </div>
        </div>
        <div className="p-4 space-y-3">
          {selectedPaymentItem ? (
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-gray-700 text-sm">Type</span>
                <span className=" text-sm font-medium">{selectedPaymentItem.subType=="C"? "Credit":
                              (selectedPaymentItem.subType=="D"? "Debit":selectedPaymentItem.subType)}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-700 text-sm">Transaction Time</span>
                <span className=" text-sm">{selectedPaymentItem.date} {selectedPaymentItem.time}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-700 text-sm">Amount</span>
                {/* <span className={`text-sm font-medium ${selectedPaymentItem.amount? 'text-green-400' : 'text-red-400'
                  }`}> */}
                 <span className={`text-sm font-medium ${selectedPaymentItem.subType=="C"? 'text-green-400' : 'text-red-400'
                  }`}>
                  {(selectedPaymentItem.subType=="C"?"+ "+selectedPaymentItem.amount:
                    (selectedPaymentItem.subType=="D"?"- "+selectedPaymentItem.amount:selectedPaymentItem.amount)) || 'N/A'}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-700 text-sm">Status</span>
                {getStatusBadge(selectedPaymentItem)}
              </div>
              <div className="pt-2 border-t ">
                <p className="text-gray-700 text-xs">{selectedPaymentItem.details}</p>
              </div>
            </div>
          ) : (
            <div className="text-center py-4">
              <p className="text-gray-400 text-sm">Click on a payment in the timeline to view details</p>
            </div>
          )}
        </div>
      </div>
      {/* Events */}
      <div className="bg-white/10 backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 overflow-hidden">
            <div className="bg-gradient-to-r from-sky-50 to-blue-50 px-4 py-3 flex items-center justify-between flex-wrap gap-4">
              <h3 className=" font-semibold text-sm flex items-center gap-2">
                {/* <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5m-9-6h.008v.008H12v-.008ZM12 15h.008v.008H12V15Zm0 2.25h.008v.008H12v-.008ZM9.75 15h.008v.008H9.75V15Zm0 2.25h.008v.008H9.75v-.008ZM7.5 15h.008v.008H7.5V15Zm0 2.25h.008v.008H7.5v-.008Zm6.75-4.5h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V15Zm0 2.25h.008v.008h-.008v-.008Zm2.25-4.5h.008v.008H16.5v-.008Zm0 2.25h.008v.008H16.5V15Z" />
                </svg> */}
                <div className="p-2 bg-gradient-to-r from-sky-300 to-blue-400 rounded-lg shadow-sm">
                  <CalendarDays className="w-5 h-5 text-white" />
                </div>
                Events
              </h3>
              <div className=" flex items-center gap-4 flex-wrap" >
                {/* <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" className="size-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z" />
                </svg> */}
                {/* <div className="p-2 bg-gradient-to-r from-neutral-200 to-neutral-400 rounded-lg shadow-sm cursor-pointer" title="Detailed view"> */}
                  <Network className="w-4 h-4" />
                {/* </div> */}
              </div>
            </div>
            <div className="p-4 space-y-3">
              {selectedEventItem ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Event Type</span>
                    <span className=" text-sm font-medium">{selectedEventItem.subType}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Event Time</span>
                    <span className=" text-sm">{selectedEventItem.date} {selectedEventItem.time}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Description</span>
                    <span className=" text-sm">{selectedEventItem.description}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Status</span>
                    {getStatusBadge(selectedEventItem)}
                  </div>
                  <div className="pt-2 border-t ">
                    <p className="text-gray-700 text-xs">{selectedEventItem.details}</p>
                  </div>
                </div>
              ) : (
                <div className="text-center py-4">
                  <p className="text-gray-400 text-sm">Click on an event in the timeline to view details</p>
                </div>
              )}
            </div>
      </div>
      {/* Case */}
      <div className="bg-white/10 backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 overflow-hidden">
            <div className="bg-gradient-to-r from-amber-50 to-orange-50 px-4 py-3 flex items-center justify-between flex-wrap gap-4">
              <h3 className=" font-semibold text-sm flex items-center gap-2">
                {/* <svg className="w-6 h-6 text-gray-800 dark:" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 3v4a1 1 0 0 1-1 1H5m8 7.5 2.5 2.5M19 4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-5 9.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"/>
                </svg> */}
                <div className="p-2 bg-gradient-to-r from-orange-200 to-orange-300 rounded-xl shadow-lg">
                  <FileText className="w-5 h-5 text-white" />
                </div>
                Case</h3>
              <div className=" flex items-center gap-4 flex-wrap" onClick={handleGraphClick}>
                {/* <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" className="size-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z" />
                </svg> */}
                <div className="p-2 bg-gradient-to-r from-neutral-200 to-neutral-400 rounded-lg shadow-sm cursor-pointer" title="Detailed view">
                  <Network className="w-4 h-4" />
                </div>
              </div>
            </div>
            <div className="p-4 space-y-3">
              {selectedCaseItem ? (
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Case ID</span>
                    <span className=" text-sm font-medium">{selectedCaseItem.id}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Case Time</span>
                    <span className=" text-sm">{selectedCaseItem.date} {selectedCaseItem.time}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Case Status</span>
                    {getStatusBadge(selectedCaseItem.status)}
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-700 text-sm">Case Type</span>
                    <span className=" text-sm">{selectedCaseItem.subType}</span>
                  </div>
                  <div className="pt-2 border-t ">
                    <p className="text-gray-700 text-xs">{selectedCaseItem.details}</p>
                  </div>
                </div>
              ) : (
                <div className="text-center py-4">
                  {/* <p className="text-gray-400 text-sm">Click on a case in the timeline to view details</p> */}
                  <p className="text-gray-400 text-sm">Pending</p>
                </div>
              )}
            </div>
            
            {/* Notes Section */}
            <div className="p-4 pt-0">
              <div className="p-3 bg-yellow-100 rounded-lg">
                <h4 className="text-yellow-800 font-semibold text-sm mb-2">Notes</h4>
                <div className="h-16 bg-yellow-50 rounded border-2 border-dashed border-yellow-300"></div>
              </div>
            </div>
          </div>
    </div>
  </div>
  </React.Fragment>
  );
};

export default React.memo(Events);
