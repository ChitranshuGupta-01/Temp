"use client";

import React, { useMemo, useState } from "react";
import {
  FileText,
  AlertTriangle,
  Search,
  Filter,
  Download,
  Settings,
  ChevronLeft,
  ChevronRight,
} from "lucide-react";
import ReactFlow, { Background, Controls } from "reactflow";
import "reactflow/dist/style.css";

type EventItem = {
  id: string;
  type: string;
  date: string;
  profile: string;
  ip: string;
  status: "Success" | "Failed" | "Flagged" | "Other";
  severity: "Low" | "Medium" | "High";
  desc: string;
};

export default function CaseDetailPage() {
  // --- Relation diagram nodes & edges (kept simple/visual) ---
  const nodes = [
    {
      id: "case",
      data: {
        label:
          "Case\nCase ID: CASE-2024-154\nDate: 2024-01-15\nStatus: Active\nDecision: Approve\nType: Investigation",
      },
      position: { x: 100, y: 30 },
      style: {
        background: "#fee2e2",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #fca5a5",
        width: 240,
      },
    },
    {
      id: "profile",
      data: {
        label:
          "Profile\nProfile ID: PROF-789\nName: John Doe\nMMN: Smith\nGender: Male\nDOB: 1985-03-22",
      },
      position: { x: 420, y: 30 },
      style: {
        background: "#dbeafe",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #93c5fd",
        width: 220,
      },
    },
    {
      id: "txn",
      data: {
        label:
          "Transaction Detail\nTrans ID: TXN-456123\nType: Wire Transfer\nAmount: $15,000.00\nFrequency: Multiple",
      },
      position: { x: 100, y: 230 },
      style: {
        background: "#eef2ff",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #c7d2fe",
        width: 260,
      },
    },
    {
      id: "activity",
      data: {
        label:
          "Last 5 Activity\nEVT-001 Login Attempt\nEVT-003 Transaction Alert\nEVT-004 Profile Update",
      },
      position: { x: 420, y: 230 },
      style: {
        background: "#fff1f2",
        padding: 12,
        borderRadius: 10,
        border: "1px solid #fbcfe8",
        width: 260,
      },
    },
  ];

  const edges = [
    { id: "e1", source: "case", target: "profile", animated: true },
    { id: "e2", source: "case", target: "txn", animated: true },
    { id: "e3", source: "profile", target: "activity", animated: true },
  ];

  // --- Events data (dummy) ---
  const events: EventItem[] = [
    {
      id: "EVT-001",
      type: "Login Attempt",
      date: "2024-01-15 14:30:25",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "Successful login from registered device",
    },
    {
      id: "EVT-002",
      type: "Failed Login",
      date: "2024-01-15 09:15:42",
      profile: "John Doe",
      ip: "203.45.67.88",
      status: "Failed",
      severity: "High",
      desc: "Multiple failed login attempts from unknown device",
    },
    {
      id: "EVT-003",
      type: "Transaction Alert",
      date: "2024-01-14 16:45:12",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Flagged",
      severity: "Medium",
      desc: "High-value transaction exceeding daily limit",
    },
    {
      id: "EVT-004",
      type: "Profile Update",
      date: "2024-01-14 11:20:31",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "Contact information updated successfully",
    },
    {
      id: "EVT-005",
      type: "Beneficiary Added",
      date: "2024-01-13 13:55:16",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "New beneficiary ABC Corp added to account",
    },
    // add more rows so paging can be visible
    {
      id: "EVT-006",
      type: "Login Attempt",
      date: "2024-01-12 08:22:10",
      profile: "John Doe",
      ip: "192.168.1.101",
      status: "Success",
      severity: "Low",
      desc: "Successful login from registered device",
    },
    {
      id: "EVT-007",
      type: "Password Change",
      date: "2024-01-12 09:30:00",
      profile: "John Doe",
      ip: "192.168.1.102",
      status: "Success",
      severity: "Low",
      desc: "Password changed via settings",
    },
    {
      id: "EVT-008",
      type: "Failed Login",
      date: "2024-01-11 10:12:34",
      profile: "John Doe",
      ip: "45.67.89.12",
      status: "Failed",
      severity: "High",
      desc: "Multiple failed attempts",
    },
    {
      id: "EVT-009",
      type: "Transaction Alert",
      date: "2024-01-10 13:15:00",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Flagged",
      severity: "Medium",
      desc: "Large outbound wire",
    },
    {
      id: "EVT-010",
      type: "Beneficiary Added",
      date: "2024-01-09 15:05:05",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "Beneficiary added",
    },
    {
      id: "EVT-011",
      type: "Login Attempt",
      date: "2024-01-08 07:45:12",
      profile: "John Doe",
      ip: "10.0.0.5",
      status: "Success",
      severity: "Low",
      desc: "Login from new device",
    },
    {
      id: "EVT-012",
      type: "Failed Login",
      date: "2024-01-07 21:20:56",
      profile: "John Doe",
      ip: "58.45.23.11",
      status: "Failed",
      severity: "High",
      desc: "Brute-force attempts detected",
    },
    {
      id: "EVT-013",
      type: "Profile Update",
      date: "2024-01-06 11:11:11",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "Email updated",
    },
    {
      id: "EVT-014",
      type: "Transaction Alert",
      date: "2024-01-05 12:12:12",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Flagged",
      severity: "Medium",
      desc: "Rapid repeated transfers to a new beneficiary",
    },
    {
      id: "EVT-015",
      type: "Beneficiary Added",
      date: "2024-01-04 16:00:00",
      profile: "John Doe",
      ip: "192.168.1.100",
      status: "Success",
      severity: "Low",
      desc: "Added beneficiary XYZ Corp",
    },
  ];

  // --- UI state for events table ---
  const [searchTerm, setSearchTerm] = useState("");
  const [eventTypeFilter, setEventTypeFilter] = useState("All Event Types");
  const [pageSize, setPageSize] = useState<number>(5);
  const [page, setPage] = useState<number>(1);

  // unique event types for dropdown
  const eventTypes = useMemo(() => {
    const s = new Set<string>();
    events.forEach((e) => s.add(e.type));
    return ["All Event Types", ...Array.from(s)];
  }, [events]);

  // filtered + searched events
  const filtered = useMemo(() => {
    const q = searchTerm.trim().toLowerCase();
    return events.filter((e) => {
      // event type filter
      if (eventTypeFilter !== "All Event Types" && e.type !== eventTypeFilter)
        return false;

      if (!q) return true;

      // check across searchable fields
      return (
        e.id.toLowerCase().includes(q) ||
        e.type.toLowerCase().includes(q) ||
        e.profile.toLowerCase().includes(q) ||
        e.ip.toLowerCase().includes(q) ||
        e.status.toLowerCase().includes(q) ||
        e.desc.toLowerCase().includes(q) ||
        e.date.toLowerCase().includes(q)
      );
    });
  }, [events, searchTerm, eventTypeFilter]);

  const totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
  const currentPage = Math.min(Math.max(1, page), totalPages);
  const startIndex = (currentPage - 1) * pageSize;
  const visible = filtered.slice(startIndex, startIndex + pageSize);

  function handlePageChange(next: number) {
    setPage(Math.min(Math.max(1, next), totalPages));
  }

  function handleDownload() {
    // simple CSV download (client-side)
    const headers = [
      "Event ID",
      "Event Type",
      "Date & Time",
      "Profile",
      "IP Address",
      "Status",
      "Severity",
      "Description",
    ];
    const rows = filtered.map((r) =>
      [
        r.id,
        r.type,
        r.date,
        r.profile,
        r.ip,
        r.status,
        r.severity,
        `"${r.desc.replace(/"/g, '""')}"`,
      ].join(",")
    );
    const csv = [headers.join(","), ...rows].join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "events.csv";
    a.click();
    URL.revokeObjectURL(url);
  }

  return (
    <div className="p-6 space-y-6">
      {/* ===== Case Header ===== */}
      <div className="bg-white rounded-2xl shadow p-6 border">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold flex items-center gap-3">
              <FileText className="w-6 h-6 text-orange-500" />
              Case #54532134
            </h1>
            <p className="text-gray-500 text-sm">
              High Value Transaction Investigation
            </p>
          </div>
          <div className="flex items-center gap-3">
            <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-red-100 text-red-600 font-medium">
              High Priority
            </span>
          </div>
        </div>

        <div className="mt-4 text-sm text-gray-700 space-y-2">
          <p>
            Investigation of suspicious wire transfers exceeding{" "}
            <span className="font-semibold">$15,000</span> from account{" "}
            <span className="font-mono">****5678</span> to multiple
            beneficiaries. Pattern suggests potential money laundering
            activity.
          </p>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-gray-600 mt-2">
            <p>
              <span className="font-semibold">Assignee: </span> John Smith
            </p>
            <p>
              <span className="font-semibold">Profile: </span> John Doe
              (PROF-789)
            </p>
            <p>
              <span className="font-semibold">Created: </span> 2024-01-10
            </p>
            <p>
              <span className="font-semibold">Updated: </span> 2024-01-15
            </p>
          </div>
        </div>

        <div className="mt-4 flex items-center gap-3">
          <AlertTriangle className="w-5 h-5 text-red-500" />
          <span className="text-lg font-bold text-red-600">85</span>
          <span className="text-gray-500 text-sm">/100 Risk</span>
        </div>

        <div className="mt-4 flex gap-3">
          <button className="px-3 py-2 text-sm bg-gray-100 rounded-lg hover:bg-gray-200">
            Add Note
          </button>
          <button className="px-3 py-2 text-sm bg-gray-100 rounded-lg hover:bg-gray-200">
            Update Status
          </button>
          <button className="px-3 py-2 text-sm bg-gray-100 rounded-lg hover:bg-gray-200">
            Generate Report
          </button>
        </div>
      </div>

      {/* ===== Relation Diagram (React Flow) ===== */}
      <div className="bg-white rounded-2xl shadow p-6 border h-[420px]">
        <h2 className="text-lg font-semibold mb-4">Case Relation Diagram</h2>
        <div className="h-[330px] rounded-md border">
          <ReactFlow nodes={nodes} edges={edges} fitView>
            <Background />
            <Controls />
          </ReactFlow>
        </div>
      </div>

      {/* ===== Past Events Log (with search/filter/page) ===== */}
      <div className="bg-white rounded-2xl shadow p-6 border">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h2 className="text-lg font-semibold">Past Events Log</h2>
            <p className="text-sm text-gray-500">
              Recent activity and security events for Profile: John Doe
            </p>
          </div>

          {/* right-side icons/controls */}
          <div className="flex items-center gap-3">
            <button
              onClick={handleDownload}
              className="p-2 rounded-md hover:bg-gray-100"
              aria-label="Download events"
            >
              <Download className="w-5 h-5 text-gray-600" />
            </button>

            <button className="p-2 rounded-md hover:bg-gray-100" aria-label="Settings">
              <Settings className="w-5 h-5 text-gray-600" />
            </button>
          </div>
        </div>

        {/* search + filters row */}
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3 mb-4">
          <div className="flex items-center gap-2 w-full md:max-w-xl">
            <div className="relative flex-1">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 pointer-events-none text-gray-400">
                <Search className="w-4 h-4" />
              </span>
              <input
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setPage(1);
                }}
                placeholder="Search events, status, IP addresses, or description..."
                className="w-full pl-10 pr-3 py-2 border rounded-lg text-sm focus:outline-none focus:ring-1 focus:ring-indigo-300"
              />
            </div>
          </div>

          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2 text-sm">
              <Filter className="w-4 h-4 text-gray-500" />
              <select
                value={eventTypeFilter}
                onChange={(e) => {
                  setEventTypeFilter(e.target.value);
                  setPage(1);
                }}
                className="border rounded-lg py-2 px-3 text-sm focus:outline-none"
              >
                {eventTypes.map((t) => (
                  <option key={t} value={t}>
                    {t}
                  </option>
                ))}
              </select>
            </div>

            <div className="flex items-center gap-2 text-sm">
              <span className="text-gray-500">|</span>
              <select
                value={pageSize}
                onChange={(e) => {
                  setPageSize(Number(e.target.value));
                  setPage(1);
                }}
                className="border rounded-lg py-2 px-3 text-sm focus:outline-none"
              >
                <option value={5}>5 per page</option>
                <option value={10}>10 per page</option>
                <option value={25}>25 per page</option>
              </select>
            </div>
          </div>
        </div>

        {/* table */}
        <div className="overflow-x-auto">
          <table className="w-full text-sm border rounded-lg overflow-hidden">
            <thead className="bg-gray-100">
              <tr>
                <th className="p-2 text-left">Event ID</th>
                <th className="p-2 text-left">Event Type</th>
                <th className="p-2 text-left">Date & Time</th>
                <th className="p-2 text-left">Profile</th>
                <th className="p-2 text-left">IP Address</th>
                <th className="p-2 text-left">Status</th>
                <th className="p-2 text-left">Severity</th>
                <th className="p-2 text-left">Description</th>
              </tr>
            </thead>

            <tbody>
              {visible.map((e, i) => (
                <tr
                  key={e.id}
                  className={`border-t ${i % 2 === 0 ? "bg-white" : "bg-gray-50"}`}
                >
                  <td className="p-2 font-medium text-indigo-700">{e.id}</td>
                  <td className="p-2">{e.type}</td>
                  <td className="p-2 text-gray-600">{e.date}</td>
                  <td className="p-2">{e.profile}</td>
                  <td className="p-2 font-mono text-gray-700">{e.ip}</td>

                  {/* Status pill */}
                  <td className="p-2">
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        e.status === "Success"
                          ? "bg-green-100 text-green-700"
                          : e.status === "Failed"
                          ? "bg-red-100 text-red-700"
                          : e.status === "Flagged"
                          ? "bg-yellow-100 text-yellow-700"
                          : "bg-gray-100 text-gray-700"
                      }`}
                    >
                      {e.status}
                    </span>
                  </td>

                  {/* Severity pill */}
                  <td className="p-2">
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        e.severity === "Low"
                          ? "bg-green-100 text-green-700"
                          : e.severity === "High"
                          ? "bg-red-100 text-red-700"
                          : "bg-yellow-100 text-yellow-700"
                      }`}
                    >
                      {e.severity}
                    </span>
                  </td>

                  <td className="p-2 text-gray-700">{e.desc}</td>
                </tr>
              ))}

              {visible.length === 0 && (
                <tr>
                  <td colSpan={8} className="p-4 text-center text-gray-500">
                    No events found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* footer: showing X to Y of Z + pagination */}
        <div className="mt-4 flex items-center justify-between text-sm text-gray-600">
          <div>
            Showing{" "}
            <span className="font-medium">
              {filtered.length === 0 ? 0 : startIndex + 1}
            </span>{" "}
            to{" "}
            <span className="font-medium">
              {Math.min(startIndex + pageSize, filtered.length)}
            </span>{" "}
            of <span className="font-medium">{filtered.length}</span> events
          </div>

          <div className="flex items-center gap-2">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              className="p-2 rounded hover:bg-gray-100"
              disabled={currentPage <= 1}
              aria-label="Previous page"
            >
              <ChevronLeft className="w-4 h-4 text-gray-700" />
            </button>

            {/* show up to 5 page numbers centered on current */}
            <div className="inline-flex items-center gap-1">
              {Array.from({ length: totalPages }).map((_, idx) => {
                const pnum = idx + 1;
                // limit visible page numbers for long lists
                if (
                  totalPages > 7 &&
                  Math.abs(pnum - currentPage) > 2 &&
                  pnum !== 1 &&
                  pnum !== totalPages
                ) {
                  // render ellipsis near ends only once
                  if (pnum === 2 && currentPage > 4) return <span key={pnum}>...</span>;
                  if (pnum === totalPages - 1 && currentPage < totalPages - 3)
                    return <span key={pnum}>...</span>;
                  if (Math.abs(pnum - currentPage) > 2) return null;
                }
                return (
                  <button
                    key={pnum}
                    onClick={() => handlePageChange(pnum)}
                    className={`px-3 py-1 rounded-md text-sm ${
                      pnum === currentPage
                        ? "bg-indigo-600 text-white"
                        : "hover:bg-gray-100 text-gray-700"
                    }`}
                    aria-current={pnum === currentPage ? "page" : undefined}
                  >
                    {pnum}
                  </button>
                );
              })}
            </div>

            <button
              onClick={() => handlePageChange(currentPage + 1)}
              className="p-2 rounded hover:bg-gray-100"
              disabled={currentPage >= totalPages}
              aria-label="Next page"
            >
              <ChevronRight className="w-4 h-4 text-gray-700" />
            </button>
          </div>
        </div>
      </div>

      {/* ===== Related Transactions (simple input to match screenshot) ===== */}
      <div className="bg-white rounded-2xl shadow p-6 border">
        <h2 className="text-lg font-semibold mb-2">Related Transactions</h2>
        <p className="text-sm text-gray-500 mb-2">
          All transactions made to the same account: ****5678
        </p>
        <div>
          <input
            type="text"
            placeholder="Search transactions, amounts, beneficiaries, or references..."
            className="w-full border rounded-lg p-2 text-sm"
          />
        </div>
      </div>
    </div>
  );
}
