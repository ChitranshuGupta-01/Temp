"use client";
import React, { useCallback } from "react";
import ReactFlow, { Background, Controls, MiniMap, Node, Edge } from "reactflow";
import { Maximize2, ZoomIn, ZoomOut, Network } from "lucide-react";
import 'reactflow/dist/style.css';

export default function CaseRelationDiagram({ relation }: { relation: any }) {
  const nodes: Node[] = [
    {
      id: "case",
      position: { x: 100, y: 40 },
      data: {
        label: (
          <div className="rounded-xl p-4 bg-gradient-to-r from-red-500 to-red-400 text-white shadow-md border border-red-200">
            <div className="font-semibold text-base">Case</div>
            <div className="text-xs mt-1 opacity-90">Case ID: {relation.case.caseId}</div>
            <div className="text-xs opacity-90">Date: {relation.case.date}</div>
          </div>
        ),
      },
      style: { width: 220, height: 90 },
    },
    {
      id: "profile",
      position: { x: 440, y: 40 },
      data: {
        label: (
          <div className="rounded-xl p-4 bg-gradient-to-r from-sky-500 to-blue-500 text-white shadow-md border border-blue-200">
            <div className="font-semibold text-base">Profile</div>
            <div className="text-xs mt-1 opacity-90">
              {relation.profile.name} ({relation.profile.id})
            </div>
          </div>
        ),
      },
      style: { width: 220, height: 90 },
    },
    {
      id: "txn",
      position: { x: 80, y: 220 },
      data: {
        label: (
          <div className="rounded-xl p-4 bg-gradient-to-r from-indigo-500 to-indigo-400 text-white shadow-md border border-indigo-200">
            <div className="font-semibold text-base">Transaction</div>
            <div className="text-xs mt-1 opacity-90">
              {relation.transaction.type} - {relation.transaction.id}
            </div>
            <div className="text-xs opacity-90">
              Amount: {relation.transaction.amount}
            </div>
          </div>
        ),
      },
      style: { width: 240, height: 110 },
    },
    {
      id: "bene",
      position: { x: 360, y: 220 },
      data: {
        label: (
          <div className="rounded-xl p-4 bg-gradient-to-r from-amber-400 to-yellow-400 text-white shadow-md border border-yellow-200">
            <div className="font-semibold text-base">Beneficiary</div>
            <div className="text-xs mt-1 opacity-90">{relation.beneficiary.name}</div>
            <div className="text-xs opacity-90">Amount: {relation.beneficiary.amount}</div>
          </div>
        ),
      },
      style: { width: 220, height: 100 },
    },
    {
      id: "activity",
      position: { x: 640, y: 220 },
      data: {
        label: (
          <div className="rounded-xl p-4 bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-md border border-pink-200">
            <div className="font-semibold text-base">Last 5 Activities</div>
            <div className="text-xs mt-1 opacity-90">
              {relation.last5Activity.map((a: any) => a.id).join(", ")}
            </div>
          </div>
        ),
      },
      style: { width: 250, height: 110 },
    },
  ];

  const edges: Edge[] = [
    { id: "e1", source: "case", target: "profile", animated: true },
    { id: "e2", source: "case", target: "txn", animated: true },
    { id: "e3", source: "txn", target: "bene", animated: true },
    { id: "e4", source: "profile", target: "activity", animated: true },
    { id: "e5", source: "case", target: "bene", animated: true },
  ];

  const onInit = useCallback((instance: any) => {
    instance.fitView({ padding: 0.15 });
  }, []);

  return (
    <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
      {/* Header */}
      <div className="flex items-center justify-between px-6 py-4 bg-gradient-to-r from-slate-50 to-blue-50 border-b border-gray-200">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg shadow-sm">
            <Network className="w-5 h-5 text-white" />
          </div>
          <div>
            <h4 className="text-lg font-semibold text-gray-900">Case Relation Diagram</h4>
            <p className="text-sm text-gray-600">
              Visual relationships between case, profile, transactions and beneficiaries
            </p>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <button
            className="flex items-center gap-1 px-3 py-2 rounded-lg bg-white border border-gray-300 text-sm text-gray-700 hover:bg-gray-50 transition-all duration-200 shadow-sm"
            title="Zoom Out"
          >
            <ZoomOut className="w-4 h-4" /> Zoom Out
          </button>
          <button
            className="flex items-center gap-1 px-3 py-2 rounded-lg bg-white border border-gray-300 text-sm text-gray-700 hover:bg-gray-50 transition-all duration-200 shadow-sm"
            title="Zoom In"
          >
            <ZoomIn className="w-4 h-4" /> Zoom In
          </button>
          <button
            className="flex items-center gap-1 px-3 py-2 rounded-lg bg-white border border-gray-300 text-sm text-gray-700 hover:bg-gray-50 transition-all duration-200 shadow-sm"
            title="Fullscreen"
          >
            <Maximize2 className="w-4 h-4" /> Fullscreen
          </button>
        </div>
      </div>

      {/* Diagram Area */}
      <div
        style={{ height: 440 }}
        className="bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-50 border-t border-gray-100"
      >
        <ReactFlow nodes={nodes} edges={edges} onInit={onInit} fitView>
          <Background color="#e5e7eb" gap={16} />
          <MiniMap
            nodeStrokeColor={(n) => {
              if (n.id === "case") return "#ef4444";
              if (n.id === "profile") return "#3b82f6";
              if (n.id === "txn") return "#6366f1";
              if (n.id === "bene") return "#facc15";
              return "#ec4899";
            }}
            nodeColor={(n) => {
              if (n.id === "case") return "#fee2e2";
              if (n.id === "profile") return "#dbeafe";
              if (n.id === "txn") return "#e0e7ff";
              if (n.id === "bene") return "#fef9c3";
              return "#fce7f3";
            }}
            nodeBorderRadius={4}
          />
          <Controls />
        </ReactFlow>
      </div>
    </div>
  );
}
