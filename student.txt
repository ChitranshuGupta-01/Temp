import React, { useState, useEffect } from "react";
import * as XLSX from "xlsx";
import documentService from "./serviceDocuments"; // API service
import "./DocumentManager.css";

function DocumentManager() {
  const [documents, setDocuments] = useState([]);
  const [editingIdx, setEditingIdx] = useState(-1);
  const [editData, setEditData] = useState({});
  const [creating, setCreating] = useState(false);

  // ✅ Fetch documents
  useEffect(() => {
    fetchDocuments();
  }, []);

  const fetchDocuments = async () => {
    try {
      const res = await documentService.getAllDocuments();
      console.log("Fetched Documents:", res.data); // 🔍 Debug
      setDocuments(res.data);
    } catch (err) {
      console.error("Error fetching documents:", err);
    }
  };

  // ✅ Handle Excel download
  const handleDownloadExcel = () => {
    const ws = XLSX.utils.json_to_sheet(documents);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Documents");
    XLSX.writeFile(wb, "documents.xlsx");
  };

  // ✅ Edit
  const handleEdit = (doc) => {
    setEditingIdx(doc.id);
    setEditData({ ...doc });
  };

  // ✅ Delete
  const handleDelete = async (id) => {
    try {
      await documentService.deleteDocument(id);
      fetchDocuments();
    } catch (err) {
      console.error("Error deleting document:", err);
    }
  };

  return (
    <div className="document-manager-container">
      {/* Header with button */}
      <div className="document-manager-header">
        <h2>Document Manager</h2>
        <button className="btn-download" onClick={handleDownloadExcel}>
          ⬇ Download Excel
        </button>
      </div>

      {/* Table */}
      <table className="document-table">
        <thead>
          <tr>
            <th>Application ID</th>
            <th>Document Name</th>
            <th>Document Type</th>
            <th>File</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {documents.length > 0 ? (
            documents.map((doc) => (
              <tr key={doc.id}>
                <td>{doc.applicationId}</td>
                <td>{doc.documentName}</td>
                <td>{doc.documentType}</td>
                <td>
                  {doc.fileUrl ? (
                    <a
                      href={doc.fileUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      View
                    </a>
                  ) : (
                    "No File"
                  )}
                </td>
                <td>
                  <button onClick={() => handleEdit(doc)}>Edit</button>
                  <button onClick={() => handleDelete(doc.id)}>Delete</button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" style={{ textAlign: "center" }}>
                No data available
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}

export default DocumentManager;

//////////////////////////////////////


/* Header with button aligned right */
.document-manager-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

/* Download button styled like edit (green) */
.btn-download {
  background-color: #006a4d; /* SC green */
  color: #fff;
  border-radius: 6px;
  padding: 8px 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-download:hover {
  background-color: #004d34; /* darker green */
}
