Table: applications:

CREATE TABLE applications (
    id VARCHAR(20) PRIMARY KEY,
    applicant VARCHAR(100) NOT NULL,
    handler VARCHAR(100) NOT NULL,
    status VARCHAR(50) NOT NULL
);

3. Code Files:

Xmodel.java:


package com.scb.creditcardorigination.xfeature.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "applications")
public class Xmodel {

    @Id
    private String id;
    private String applicant;
    private String handler;
    private String status;

    // Getters and setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getApplicant() { return applicant; }
    public void setApplicant(String applicant) { this.applicant = applicant; }

    public String getHandler() { return handler; }
    public void setHandler(String handler) { this.handler = handler; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}

Xrepository.java:
package com.scb.creditcardorigination.xfeature.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import com.scb.creditcardorigination.xfeature.model.Xmodel;

public interface Xrepository extends JpaRepository<Xmodel, String> {
}


Xservice.java:

package com.scb.creditcardorigination.xfeature.service;

import com.scb.creditcardorigination.xfeature.model.Xmodel;
import com.scb.creditcardorigination.xfeature.repository.Xrepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class Xservice {
    private final Xrepository repository;

    public Xservice(Xrepository repository) {
        this.repository = repository;
    }

    public List<Xmodel> getAllApplications() {
        return repository.findAll();
    }

    public Optional<Xmodel> getApplicationById(String id) {
        return repository.findById(id);
    }

    public Xmodel createApplication(Xmodel application) {
        return repository.save(application);
    }

    public Xmodel updateApplication(String id, Xmodel application) {
        application.setId(id);
        return repository.save(application);
    }

    public void deleteApplication(String id) {
        repository.deleteById(id);
    }
}



Xcontroller.java:

package com.scb.creditcardorigination.xfeature.controller;

import com.scb.creditcardorigination.xfeature.model.Xmodel;
import com.scb.creditcardorigination.xfeature.service.Xservice;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/applications")
public class Xcontroller {

    private final Xservice service;

    public Xcontroller(Xservice service) {
        this.service = service;
    }

    @GetMapping
    public List<Xmodel> getAllApplications() {
        return service.getAllApplications();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Xmodel> getApplicationById(@PathVariable String id) {
        return service.getApplicationById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public Xmodel createApplication(@RequestBody Xmodel application) {
        return service.createApplication(application);
    }

    @PutMapping("/{id}")
    public Xmodel updateApplication(@PathVariable String id, @RequestBody Xmodel application) {
        return service.updateApplication(id, application);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteApplication(@PathVariable String id) {
        service.deleteApplication(id);
        return ResponseEntity.noContent().build();
    }
}


XexceptionHandling.java:

package com.scb.creditcardorigination.xfeature.exceptionHandling;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class XexceptionHandling {

    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleAllExceptions(Exception ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}


DatabaseConfig.java:
package com.scb.creditcardorigination.config;

import org.springframework.context.annotation.Configuration;

@Configuration
public class DatabaseConfig {
    // If you use application.properties for DB configs, this can stay empty.
}


SecurityConfig.java:
package com.scb.creditcardorigination.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeHttpRequests()
            .anyRequest().permitAll();
        return http.build();
    }
}


4. application.properties:
spring.datasource.url=jdbc:mysql://localhost:3306/creditcarddb
spring.datasource.username=root
spring.datasource.password=yourpassword
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect


service.js:
import axios from "axios";

const API_URL = "http://localhost:8080/applications"; 
// Adjust if backend runs on a different port or context-path

// Get all applications
export const getApplications = () => {
  return axios.get(API_URL);
};

// Get single application by ID
export const getApplicationById = (id) => {
  return axios.get(`${API_URL}/${id}`);
};

// Create new application
export const createApplication = (application) => {
  return axios.post(API_URL, application);
};

// Update application
export const updateApplication = (id, application) => {
  return axios.put(`${API_URL}/${id}`, application);
};

// Delete application
export const deleteApplication = (id) => {
  return axios.delete(`${API_URL}/${id}`);
};


Onboarding.js:

import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  getApplications,
  createApplication,
  updateApplication,
  deleteApplication,
} from "../services/service";   // ðŸ‘ˆ import service.js

import "./Onboarding.css";

function Onboarding() {
  const [applications, setApplications] = useState([]);
  const [editingIdx, setEditingIdx] = useState(-1);
  const [editData, setEditData] = useState({});
  const [creating, setCreating] = useState(false);
  const [createData, setCreateData] = useState({
    applicant: "",
    handler: "",
    status: "Application Submitted",
  });

  const navigate = useNavigate();

  // Load data from backend when component mounts
  useEffect(() => {
    getApplications().then((res) => {
      setApplications(res.data);
    });
  }, []);

  // Save edited record
  function handleEditSave(idx) {
    const app = applications[idx];
    updateApplication(app.id, editData).then(() => {
      let copy = [...applications];
      copy[idx] = editData;
      setApplications(copy);
      setEditingIdx(-1);
    });
  }

  // Delete record
  function handleDelete(idx) {
    const app = applications[idx];
    deleteApplication(app.id).then(() => {
      let copy = [...applications];
      copy.splice(idx, 1);
      setApplications(copy);
      setEditingIdx(-1);
    });
  }

  // Create record
  function handleCreateSave() {
    createApplication(createData).then((res) => {
      setApplications([res.data, ...applications]);
      setCreating(false);
    });
  }

  // ... keep rest of your JSX same
}

export default Onboarding;



