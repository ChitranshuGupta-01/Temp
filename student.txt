
CREATE TABLE onboarding_applications (
    id VARCHAR(20) PRIMARY KEY,
    applicant VARCHAR(100),
    handler VARCHAR(100),
    status VARCHAR(50),
    application_id VARCHAR(20)
);


CREATE TABLE applications (
    id INTEGER PRIMARY KEY,
    full_name VARCHAR(100),
    phone_number VARCHAR(15),
    email VARCHAR(255),
    credit_card_type VARCHAR(50),
    profile_type VARCHAR(50),
    application_id VARCHAR(20)
);




CREATE TABLE dmtable (
    id INTEGER PRIMARY KEY,
    application_id VARCHAR(255),
    document_name VARCHAR(255),
    document_type VARCHAR(255),
    file_url VARCHAR(500)
);



CREATE OR REPLACE FUNCTION insert_into_dmtable_from_documents()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert ID Proof
    IF NEW.id_proof_path IS NOT NULL THEN
        INSERT INTO dmtable (application_id, document_name, document_type, file_url)
        VALUES (NEW.application_id, 'ID Proof', 'ID', NEW.id_proof_path);
    END IF;

    -- Insert Address Proof
    IF NEW.address_proof_path IS NOT NULL THEN
        INSERT INTO dmtable (application_id, document_name, document_type, file_url)
        VALUES (NEW.application_id, 'Address Proof', 'Address', NEW.address_proof_path);
    END IF;

    -- Insert Income Proof
    IF NEW.income_proof_path IS NOT NULL THEN
        INSERT INTO dmtable (application_id, document_name, document_type, file_url)
        VALUES (NEW.application_id, 'Income Proof', 'Income', NEW.income_proof_path);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;





CREATE TRIGGER after_documents_insert
AFTER INSERT ON documents
FOR EACH ROW
EXECUTE FUNCTION insert_into_dmtable_from_documents();




-- Step 1: Create trigger function
CREATE OR REPLACE FUNCTION insert_into_onboarding_applications()
RETURNS TRIGGER AS $$
DECLARE
    handlers text[] := ARRAY['user1', 'user2', 'user3'];
    random_handler text;
BEGIN
    -- Pick a random handler
    random_handler := handlers[ceil(random() * array_length(handlers, 1))];

    -- Insert applicant into onboarding_applications
    INSERT INTO onboarding_applications (id, applicant, handler, status)
    VALUES (NEW.id::varchar, NEW.full_name, random_handler, 'Application Processing'); 

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Step 2: Create the trigger
CREATE TRIGGER after_applications_insert
AFTER INSERT ON applications
FOR EACH ROW
EXECUTE FUNCTION insert_into_onboarding_applications();

