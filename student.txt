"use client";
import { useState } from "react";
import {
  UserCircle,
  Lock,
  Eye,
  EyeOff,
  Loader2,
  Check,
  LogIn,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { setSession } from "../utils/session";

export default function LoginPage() {
  const router = useRouter();
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [userid, setUserid] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleLogin = () => {
    setError("");
    setIsLoading(true);

    setTimeout(() => {
      if (userid === "admin" && password === "fin@1234") {
        const token =
          "fincrime_token_" + Math.random().toString(36).substring(2);
        setSession(token);
        setIsLoading(false);
        setIsSuccess(true);

        setTimeout(() => {
          router.push("/");
        }, 1500);
      } else {
        setIsLoading(false);
        setError("Invalid credentials. Try again.");
      }
    }, 2000);
  };

  const togglePasswordVisibility = () => setShowPassword(!showPassword);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      {/* Outer container */}
      <div className="w-full max-w-sm bg-white shadow-md rounded-lg border border-gray-200 p-8">
        {/* Logo */}
        <div className="flex flex-col items-center mb-6">
          <img
            src="/logo.png"
            alt="Krono Sphere Logo"
            className="w-32 mb-4"
          />
          <h2 className="text-xl font-semibold text-gray-800">
            Sign in to your account
          </h2>
        </div>

        {/* User ID */}
        <div className="mb-4 relative">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            User Name <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <UserCircle className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Enter your username"
              value={userid}
              onChange={(e) => setUserid(e.target.value)}
              className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        {/* Password */}
        <div className="mb-2 relative">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Password <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Lock className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type={showPassword ? "text" : "password"}
              placeholder="Enter your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full pl-10 pr-10 py-2 border border-gray-300 rounded-md text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <button
              type="button"
              onClick={togglePasswordVisibility}
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600"
            >
              {showPassword ? (
                <EyeOff className="w-5 h-5" />
              ) : (
                <Eye className="w-5 h-5" />
              )}
            </button>
          </div>
        </div>

        {/* Help / Error Message */}
        {error && (
          <p className="text-sm text-red-500 text-center mt-2">{error}</p>
        )}
        <div className="text-sm text-blue-600 hover:underline mt-2 cursor-pointer">
          Help
        </div>

        {/* Sign In Button */}
        <button
          onClick={handleLogin}
          disabled={isLoading || isSuccess || !userid || !password}
          className="w-full mt-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-all duration-300 disabled:opacity-70 flex items-center justify-center gap-2"
        >
          {isLoading ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" /> Authenticating...
            </>
          ) : isSuccess ? (
            <>
              <Check className="w-5 h-5" /> Access Granted
            </>
          ) : (
            <>
              <LogIn className="w-5 h-5" /> Sign In
            </>
          )}
        </button>

        {/* SSO Link */}
        <div className="text-center text-sm text-gray-500 mt-4">
          OR <br />
          <a
            href="#"
            className="text-blue-600 hover:underline font-medium text-sm"
          >
            Click here for SSO Login
          </a>
        </div>
      </div>
    </div>
  );
}
