import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Onboarding.css";

// Preloaded applications
const defaultApplications = [
  {
    id: "SC101234",
    applicant: "Chitranshu Gupta",
    handler: "Harsha",
    status: "Application Submitted",
  },
  {
    id: "SC101235",
    applicant: "Chitranshu Gupta",
    handler: "Harsha",
    status: "Credit Card Accepted",
  },
  {
    id: "SC101236",
    applicant: "Chitranshu Gupta",
    handler: "Harsha",
    status: "Application Processing",
  },
];

// New status list
const statusList = [
  {
    value: "Application Submitted",
    label: "Application Submitted",
    badge: "badge-submitted",
  },
  {
    value: "Application Processing",
    label: "Application Processing",
    badge: "badge-processing",
  },
  {
    value: "Credit Card Offer",
    label: "Credit Card Offer",
    badge: "badge-offer",
  },
  {
    value: "Credit Card Accepted",
    label: "Credit Card Accepted",
    badge: "badge-accepted",
  },
  {
    value: "Printed & Shipped",
    label: "Printed & Shipped",
    badge: "badge-shipped",
  },
];

// Helper: generate unique application ID
function generateAppId() {
  return "SC" + Math.floor(100000 + Math.random() * 900000);
}

function Onboarding() {
  const [applications, setApplications] = useState(defaultApplications);
  const [editingIdx, setEditingIdx] = useState(-1);
  const [editData, setEditData] = useState({});
  const [creating, setCreating] = useState(false);
  const [createData, setCreateData] = useState({
    applicant: "",
    handler: "",
    status: "Application Submitted",
  });

  const navigate = useNavigate();

  // --- Edit handlers ---
  function handleEdit(idx) {
    setEditingIdx(idx);
    setEditData(applications[idx]);
  }

  function handleEditChange(e) {
    setEditData({ ...editData, [e.target.name]: e.target.value });
  }

  function handleEditSave(idx) {
    const newApps = [...applications];
    newApps[idx] = { ...editData };
    setApplications(newApps);
    setEditingIdx(-1);
    setEditData({});
  }

  function handleDelete(idx) {
    setApplications(applications.filter((_, i) => i !== idx));
    if (editingIdx === idx) setEditingIdx(-1);
  }

  // --- Create handlers ---
  function handleCreateOpen() {
    setCreating(true);
    setCreateData({
      applicant: "",
      handler: "",
      status: "Application Submitted",
    });
  }

  function handleCreateChange(e) {
    setCreateData({ ...createData, [e.target.name]: e.target.value });
  }

  function handleCreateSave() {
    const newApp = {
      id: generateAppId(),
      ...createData,
    };
    setApplications([newApp, ...applications]);
    setCreating(false);
    setCreateData({
      applicant: "",
      handler: "",
      status: "Application Submitted",
    });
  }

  // --- UI ---
  return (
    <div className="main-content">
      <div>
        <div className="app-title">Applications</div>
        <div className="app-desc">Manage customer onboarding applications</div>
      </div>

      <div className="create-container">
        <button className="btn btn-create" onClick={handleCreateOpen}>
          + Create New
        </button>
      </div>

      {applications.map((app, idx) => (
        <div
          className="app-card"
          tabIndex={0}
          key={idx}
          style={{
            outline: editingIdx === idx ? "2px solid #5ea9fa" : undefined,
          }}
        >
          {editingIdx === idx ? (
            // --- Editing Form ---
            <div className="edit-form">
              <div className="form-group">
                <label className="form-label">Application ID</label>
                <input className="form-control" value={editData.id} disabled />
              </div>
              <div className="form-group">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="status"
                  value={editData.status}
                  onChange={handleEditChange}
                >
                  {statusList.map((st) => (
                    <option value={st.value} key={st.value}>
                      {st.label}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label className="form-label">Applicant</label>
                <input
                  className="form-control"
                  name="applicant"
                  value={editData.applicant}
                  onChange={handleEditChange}
                />
              </div>
              <div className="form-group">
                <label className="form-label">Handled By</label>
                <input
                  className="form-control"
                  name="handler"
                  value={editData.handler}
                  onChange={handleEditChange}
                />
              </div>
              <div className="edit-actions">
                <button
                  className="btn-save"
                  onClick={() => handleEditSave(idx)}
                >
                  âœ” Save
                </button>
                <button
                  className="btn-cancel"
                  onClick={() => setEditingIdx(-1)}
                >
                  âœ– Cancel
                </button>
              </div>
            </div>
          ) : (
            // --- Card View ---
            <>
              <div className="app-header">
                <div className="app-header-left">
                  <span className="app-id">Application ID - {app.id}</span>
                  <span
                    className={`badge badge-status ${
                      app.status === "Application Submitted"
                        ? "badge-submitted"
                        : app.status === "Application Processing"
                        ? "badge-processing"
                        : app.status === "Credit Card Offer"
                        ? "badge-offer"
                        : app.status === "Credit Card Accepted"
                        ? "badge-accepted"
                        : "badge-shipped"
                    }`}
                  >
                    {app.status}
                  </span>
                </div>
                <div className="app-header-right">
                  <button
                    className="app-action-btn app-action-btn-edit"
                    onClick={() => handleEdit(idx)}
                  >
                    âœŽ Edit
                  </button>
                  <button
                    className="app-action-btn app-action-btn-offer"
                    onClick={() => navigate("/home")}
                  >
                    ðŸ’¼ Offer Page
                  </button>
                  <button
                    className="app-action-btn app-action-btn-del"
                    onClick={() => handleDelete(idx)}
                  >
                    ðŸ—‘ Delete
                  </button>
                </div>
              </div>
              <div className="ms-1" style={{ lineHeight: 1.8 }}>
                <span className="info-label">Applicant:</span>{" "}
                <span className="info-value">{app.applicant}</span>
                <br />
                <span className="info-label">Handled By:</span>{" "}
                <span className="info-value">{app.handler}</span>
              </div>
            </>
          )}
        </div>
      ))}

      {/* Create Modal */}
      {creating && (
        <div className="modal-backdrop-custom">
          <div className="modal-box">
            <span className="modal-close" onClick={() => setCreating(false)}>
              &times;
            </span>
            <div className="modal-title">Create New Application</div>
            <form className="modal-form" onSubmit={(e) => e.preventDefault()}>
              <div className="form-group">
                <label className="form-label">Applicant</label>
                <input
                  className="form-control"
                  name="applicant"
                  value={createData.applicant}
                  onChange={handleCreateChange}
                  placeholder="Enter Applicant Name"
                  required
                />
              </div>
              <div className="form-group">
                <label className="form-label">Handled By</label>
                <input
                  className="form-control"
                  name="handler"
                  value={createData.handler}
                  onChange={handleCreateChange}
                  placeholder="Enter Handler Name"
                  required
                />
              </div>
              <div className="form-group">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="status"
                  value={createData.status}
                  onChange={handleCreateChange}
                >
                  {statusList.map((st) => (
                    <option key={st.value} value={st.value}>
                      {st.label}
                    </option>
                  ))}
                </select>
              </div>
              <div className="modal-actions">
                <button
                  type="submit"
                  className="btn btn-create"
                  onClick={handleCreateSave}
                  disabled={
                    !createData.applicant.trim() || !createData.handler.trim()
                  }
                >
                  Create
                </button>
                <button
                  type="button"
                  className="btn btn-outline-secondary"
                  onClick={() => setCreating(false)}
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default Onboarding;


////////////////////////////////////////////




body { 
  background: #f4f6f8; 
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.main-content { 
  margin-top: 50px; 
  max-width: 1124px; 
  margin-left: auto; 
  margin-right: auto; 
  padding-left: 20px; 
  padding-right: 20px;
}

.app-title { 
  font-size: 2.2rem; 
  font-weight: 700; 
  margin-bottom: 6px;
}

.app-desc { 
  color: #666f7a; 
  margin-bottom: 25px;
}


/* --- PRIMARY CREATE BUTTON --- */
.btn-create { 
  background: #5ea9fa; 
  border: none; 
  font-weight: 500; 
  font-size: 1.05rem; 
  padding: 9px 24px; 
  border-radius: 8px; 
  box-shadow: 0 2px 6px rgba(30,90,210,0.12); 
  transition: background 0.2s; 
}
.btn-create:hover, 
.btn-create:focus { 
  background: #91c8fd;
}
.create-container { 
  margin-bottom: 25px; 
  text-align: right; 
}


/* --- APPLICATION CARD --- */
.app-card { 
  background: #fff; 
  border-radius: 14px; 
  border: 1.4px solid #eaeaeb; 
  box-shadow: 0 2px 10px rgba(55,93,219,0.05); 
  margin-bottom: 28px; 
  padding: 26px 32px 20px 32px; 
  transition: background 0.18s; 
  cursor: pointer;
}
.app-card:hover { 
  background: #eef3f9;
}
.app-id { 
  font-size: 1.15rem; 
  font-weight: 600;
}


/* --- STAGE BADGES --- */
.badge-status { 
  font-size: 0.95rem; 
  padding: 4px 14px; 
  border-radius: 10px; 
  margin-left: 8px; 
  vertical-align: middle;
}

/* Stage 1 - Application Submitted */
.badge-submitted { 
  background: #e5ecfa; 
  color: #247fff; 
  border: 1px solid #b2cdfd;
}

/* Stage 2 - Application Processing */
.badge-processing { 
  background: #fff6da; 
  color: #b58900; 
  border: 1px solid #ffe29a;
}

/* Stage 3 - Credit Card Offer */
.badge-offer { 
  background: #f0e6ff; 
  color: #6c3bbf; 
  border: 1px solid #d6b8ff;
}

/* Stage 4 - Credit Card Accepted */
.badge-accepted { 
  background: #dbf3df; 
  color: #239d4b; 
  border: 1px solid #c3e8c7;
}

/* Stage 5 - Printed & Shipped */
.badge-shipped { 
  background: #e0f7fa; 
  color: #00838f; 
  border: 1px solid #b2ebf2;
}


/* --- ACTION BUTTONS --- */
.app-action-btn { 
  font-size: 0.95rem; 
  padding: 5px 14px; 
  margin-left: 8px; 
  border-radius: 8px;
}
.app-action-btn-edit { 
  color: #3b4c71; 
  border: 1.5px solid #dbe5ee; 
  background: #eff4f9;
}
.app-action-btn-edit:hover { 
  background: #e0ecfa;
}
.app-action-btn-del { 
  color: #c92c2c; 
  border: 1.5px solid #f6c6c6; 
  background: #fcf3f4;
}
.app-action-btn-del:hover { 
  background: #ffe3e3;
}
.app-action-btn-offer { 
  color: #2563eb; 
  border: 1.5px solid #c7dbfa; 
  background: #eef4ff;
}
.app-action-btn-offer:hover { 
  background: #dce8ff;
}


/* --- INFO SECTION --- */
.info-label { 
  font-weight: 600; 
  color: #242d38; 
  margin-right: 6px;
}
.info-value { 
  color: #2d4157;
}

.app-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  margin-bottom: 12px;
}
.app-header-left {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-wrap: wrap;
}
.app-header-right {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}


/* --- EDIT MODE --- */
.edit-form { margin-top: 10px; }
.edit-form .form-group { 
  display: flex; 
  flex-direction: column; 
  margin-bottom: 16px; 
}
.edit-form .form-control, 
.edit-form .form-select {
  border-radius: 10px; 
  font-size: 1rem; 
  padding: 10px; 
  border: 1.2px solid #dce5f4; 
  background: #f9fbfd;
}
.edit-actions { 
  display: flex; 
  justify-content: flex-end; 
  gap: 12px; 
  margin-top: 10px; 
}
.btn-save { 
  background: #4caf50; 
  color: white; 
  border: none; 
  padding: 8px 18px; 
  border-radius: 8px; 
  font-weight: 500; 
}
.btn-save:hover { 
  background: #45a049; 
}
.btn-cancel { 
  background: #f8d7da; 
  color: #b71c1c; 
  border: none; 
  padding: 8px 18px; 
  border-radius: 8px; 
  font-weight: 500; 
}
.btn-cancel:hover { 
  background: #f5c2c7; 
}


/* --- MODAL --- */
.modal-backdrop-custom { 
  position: fixed; 
  top:0; left:0; width:100vw; height:100vh;
  z-index: 1050; 
  background: rgba(0,0,0,0.35); 
  display: flex; 
  align-items: center; 
  justify-content: center;
}
.modal-box { 
  background: #fff; 
  border-radius: 16px; 
  padding: 40px; 
  min-width: 420px; 
  max-width: 500px;
  box-shadow: 0 4px 28px rgba(40,65,100,0.2); 
  border: none; 
  position: relative;
}
.modal-title { 
  font-size: 1.55rem; 
  font-weight: 700; 
  margin-bottom: 32px; 
  color: #1f2d3d;
}
.modal-close { 
  position: absolute; 
  top: 14px; 
  right: 20px; 
  cursor: pointer; 
  font-size: 2rem; 
  color: #999; 
  opacity: 0.7;
}
.modal-close:hover { 
  opacity: 1;
}
.modal-form .form-label { 
  font-weight: 500; 
  margin-bottom: 6px;
}
.modal-form .form-control, 
.modal-form .form-select { 
  border-radius: 10px; 
  font-size: 1.05rem; 
  padding: 10px; 
  margin-bottom: 16px; 
  background: #f9fbfd; 
  border: 1.2px solid #dce5f4;
}
.modal-actions { 
  margin-top: 30px; 
  display: flex; 
  justify-content: flex-end; 
  gap: 14px;
}
.btn-outline-secondary { 
  border-radius: 8px; 
  padding: 8px 18px;
}
.modal-form .form-group {
  display: flex;
  flex-direction: column;
  margin-bottom: 16px;
}



