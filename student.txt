package com.scb.creditcardorigination.xfeature.service;

import com.scb.creditcardorigination.xfeature.model.Document;
import com.scb.creditcardorigination.xfeature.repository.DocumentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;

@Service
public class DocumentService {

    private final String uploadDir = "uploads/";

    @Autowired
    private DocumentRepository documentRepository;

    // Save document entity
    public Document saveDocument(Document document) {
        return documentRepository.save(document);
    }

    // Upload a file and update document path
    public Document uploadFile(Long documentId, MultipartFile file, String type) throws IOException {
        Optional<Document> optionalDoc = documentRepository.findById(documentId);
        if (optionalDoc.isEmpty()) {
            throw new RuntimeException("Document not found with ID: " + documentId);
        }

        Document document = optionalDoc.get();

        // Create upload dir if not exists
        File dir = new File(uploadDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }

        // Save file
        String filePath = uploadDir + documentId + "_" + type + "_" + file.getOriginalFilename();
        Path path = Paths.get(filePath);
        Files.write(path, file.getBytes());

        // Set path based on type
        switch (type.toLowerCase()) {
            case "idproof":
                document.setIdProofPath(filePath);
                break;
            case "addressproof":
                document.setAddressProofPath(filePath);
                break;
            case "incomeproof":
                document.setIncomeProofPath(filePath);
                break;
            default:
                throw new RuntimeException("Invalid document type: " + type);
        }

        return documentRepository.save(document);
    }

    // Fetch a document by ID
    public Optional<Document> getDocument(Long id) {
        return documentRepository.findById(id);
    }

    // Delete document by ID
    public void deleteDocument(Long id) {
        documentRepository.deleteById(id);
    }
}
